
/Users/jido/Documents/GitHub/X046-010-laddstation_villa/Laddstation_M01/target/Laddstation_M01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d08  080a0018  080a0018  00010018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.exidx    00000008  080a4d20  080a4d20  00014d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .backup       00000004  40024000  080a4d28  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000070  20000300  080a4d2c  00030300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000061c  20000370  20000370  00040370  2**2
                  ALLOC
  6 .module_info_suffix 0000002c  080a4d9c  080a4d9c  00034d9c  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  080a4dc8  080a4dc8  00034dc8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000b61ec  00000000  00000000  00034dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000108a4  00000000  00000000  000eafb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000165cd  00000000  00000000  000fb85c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002490  00000000  00000000  00111e29  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003898  00000000  00000000  001142b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00026929  00000000  00000000  00117b51  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00025114  00000000  00000000  0013e47a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0009cddc  00000000  00000000  0016358e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c748  00000000  00000000  0020036c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0018 <user_part_module>:
 80a0018:	b4 47 0a 08                                         .G..

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f004 faab 	bl	80a4588 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f004 fab0 	bl	80a459e <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000300 	.word	0x20000300
 80a0048:	080a4d2c 	.word	0x080a4d2c
 80a004c:	20000370 	.word	0x20000370
 80a0050:	20000370 	.word	0x20000370
 80a0054:	2000098c 	.word	0x2000098c
 80a0058:	2000098c 	.word	0x2000098c

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f002 fecb 	bl	80a2df8 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a4cdc 	.word	0x080a4cdc
 80a0084:	080a4d14 	.word	0x080a4d14

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 bbc0 	b.w	80a080c <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 fa33 	bl	80a04f8 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f002 be71 	b.w	80a2d7c <_post_loop>

080a009a <_Znwj>:
 80a009a:	f001 bad7 	b.w	80a164c <malloc>

080a009e <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
 80a009e:	f001 bad5 	b.w	80a164c <malloc>

080a00a2 <_ZdlPv>:
 80a00a2:	f001 badb 	b.w	80a165c <free>

080a00a6 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
 80a00a6:	f001 bad9 	b.w	80a165c <free>

080a00aa <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00aa:	7800      	ldrb	r0, [r0, #0]
 80a00ac:	fab0 f080 	clz	r0, r0
 80a00b0:	0940      	lsrs	r0, r0, #5
 80a00b2:	4770      	bx	lr

080a00b4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00b4:	2301      	movs	r3, #1
 80a00b6:	7003      	strb	r3, [r0, #0]
 80a00b8:	4770      	bx	lr
	...

080a00bc <_Z8callbackPcPhj>:
  p[length] = NULL;

//  Serial.print("MQTT rx:");
//  Serial.println(p);
//  setMessage(p);
    forceReading = 1;
 80a00bc:	4b01      	ldr	r3, [pc, #4]	; (80a00c4 <_Z8callbackPcPhj+0x8>)
 80a00be:	2201      	movs	r2, #1
 80a00c0:	601a      	str	r2, [r3, #0]
 80a00c2:	4770      	bx	lr
 80a00c4:	20000300 	.word	0x20000300

080a00c8 <_Z17tinkerDigitalRead6String>:
 * Output         : None.
 * Return         : Value of the pin (0 or 1) in INT type
                    Returns a negative number on failure
 *******************************************************************************/
int tinkerDigitalRead(String pin)
{
 80a00c8:	b5f0      	push	{r4, r5, r6, r7, lr}
	//convert ascii to integer
	int pinNumber = pin.charAt(1) - '0';
 80a00ca:	2101      	movs	r1, #1
 * Output         : None.
 * Return         : Value of the pin (0 or 1) in INT type
                    Returns a negative number on failure
 *******************************************************************************/
int tinkerDigitalRead(String pin)
{
 80a00cc:	b085      	sub	sp, #20
 80a00ce:	4606      	mov	r6, r0
	//convert ascii to integer
	int pinNumber = pin.charAt(1) - '0';
 80a00d0:	f002 f957 	bl	80a2382 <_ZNK6String6charAtEj>
 80a00d4:	f1a0 0530 	sub.w	r5, r0, #48	; 0x30
	//Sanity check to see if the pin numbers are within limits
	if (pinNumber< 0 || pinNumber >7) return -1;
 80a00d8:	2d07      	cmp	r5, #7
                    Returns a negative number on failure
 *******************************************************************************/
int tinkerDigitalRead(String pin)
{
	//convert ascii to integer
	int pinNumber = pin.charAt(1) - '0';
 80a00da:	4604      	mov	r4, r0
	//Sanity check to see if the pin numbers are within limits
	if (pinNumber< 0 || pinNumber >7) return -1;
 80a00dc:	d825      	bhi.n	80a012a <_Z17tinkerDigitalRead6String+0x62>

	if(pin.startsWith("D"))
 80a00de:	4916      	ldr	r1, [pc, #88]	; (80a0138 <_Z17tinkerDigitalRead6String+0x70>)
 80a00e0:	4668      	mov	r0, sp
 80a00e2:	f002 f876 	bl	80a21d2 <_ZN6StringC1EPK19__FlashStringHelper>
 80a00e6:	4669      	mov	r1, sp
 80a00e8:	4630      	mov	r0, r6
 80a00ea:	f002 f938 	bl	80a235e <_ZNK6String10startsWithERKS_>
 80a00ee:	4607      	mov	r7, r0
 80a00f0:	4668      	mov	r0, sp
 80a00f2:	f002 f827 	bl	80a2144 <_ZN6StringD1Ev>
 80a00f6:	b10f      	cbz	r7, 80a00fc <_Z17tinkerDigitalRead6String+0x34>
	{
		pinMode(pinNumber, INPUT_PULLDOWN);
 80a00f8:	b2ac      	uxth	r4, r5
 80a00fa:	e00e      	b.n	80a011a <_Z17tinkerDigitalRead6String+0x52>
		return digitalRead(pinNumber);
	}
	else if (pin.startsWith("A"))
 80a00fc:	490f      	ldr	r1, [pc, #60]	; (80a013c <_Z17tinkerDigitalRead6String+0x74>)
 80a00fe:	4668      	mov	r0, sp
 80a0100:	f002 f867 	bl	80a21d2 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0104:	4669      	mov	r1, sp
 80a0106:	4630      	mov	r0, r6
 80a0108:	f002 f929 	bl	80a235e <_ZNK6String10startsWithERKS_>
 80a010c:	4605      	mov	r5, r0
 80a010e:	4668      	mov	r0, sp
 80a0110:	f002 f818 	bl	80a2144 <_ZN6StringD1Ev>
 80a0114:	b165      	cbz	r5, 80a0130 <_Z17tinkerDigitalRead6String+0x68>
	{
		pinMode(pinNumber+10, INPUT_PULLDOWN);
 80a0116:	3c26      	subs	r4, #38	; 0x26
 80a0118:	b2a4      	uxth	r4, r4
 80a011a:	4620      	mov	r0, r4
 80a011c:	2103      	movs	r1, #3
 80a011e:	f002 fed3 	bl	80a2ec8 <pinMode>
		return digitalRead(pinNumber+10);
 80a0122:	4620      	mov	r0, r4
 80a0124:	f002 fefa 	bl	80a2f1c <digitalRead>
 80a0128:	e004      	b.n	80a0134 <_Z17tinkerDigitalRead6String+0x6c>
int tinkerDigitalRead(String pin)
{
	//convert ascii to integer
	int pinNumber = pin.charAt(1) - '0';
	//Sanity check to see if the pin numbers are within limits
	if (pinNumber< 0 || pinNumber >7) return -1;
 80a012a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a012e:	e001      	b.n	80a0134 <_Z17tinkerDigitalRead6String+0x6c>
	else if (pin.startsWith("A"))
	{
		pinMode(pinNumber+10, INPUT_PULLDOWN);
		return digitalRead(pinNumber+10);
	}
	return -2;
 80a0130:	f06f 0001 	mvn.w	r0, #1
}
 80a0134:	b005      	add	sp, #20
 80a0136:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0138:	080a485f 	.word	0x080a485f
 80a013c:	080a47c8 	.word	0x080a47c8

080a0140 <_Z16tinkerAnalogRead6String>:
 * Output         : None.
 * Return         : Returns the analog value in INT type (0 to 4095)
                    Returns a negative number on failure
 *******************************************************************************/
int tinkerAnalogRead(String pin)
{
 80a0140:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	//convert ascii to integer
	int pinNumber = pin.charAt(1) - '0';
 80a0142:	2101      	movs	r1, #1
 * Output         : None.
 * Return         : Returns the analog value in INT type (0 to 4095)
                    Returns a negative number on failure
 *******************************************************************************/
int tinkerAnalogRead(String pin)
{
 80a0144:	4605      	mov	r5, r0
	//convert ascii to integer
	int pinNumber = pin.charAt(1) - '0';
 80a0146:	f002 f91c 	bl	80a2382 <_ZNK6String6charAtEj>
 80a014a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
	//Sanity check to see if the pin numbers are within limits
	if (pinNumber< 0 || pinNumber >7) return -1;
 80a014e:	2b07      	cmp	r3, #7
                    Returns a negative number on failure
 *******************************************************************************/
int tinkerAnalogRead(String pin)
{
	//convert ascii to integer
	int pinNumber = pin.charAt(1) - '0';
 80a0150:	4604      	mov	r4, r0
	//Sanity check to see if the pin numbers are within limits
	if (pinNumber< 0 || pinNumber >7) return -1;
 80a0152:	d81f      	bhi.n	80a0194 <_Z16tinkerAnalogRead6String+0x54>

	if(pin.startsWith("D"))
 80a0154:	4914      	ldr	r1, [pc, #80]	; (80a01a8 <_Z16tinkerAnalogRead6String+0x68>)
 80a0156:	4668      	mov	r0, sp
 80a0158:	f002 f83b 	bl	80a21d2 <_ZN6StringC1EPK19__FlashStringHelper>
 80a015c:	4669      	mov	r1, sp
 80a015e:	4628      	mov	r0, r5
 80a0160:	f002 f8fd 	bl	80a235e <_ZNK6String10startsWithERKS_>
 80a0164:	4606      	mov	r6, r0
 80a0166:	4668      	mov	r0, sp
 80a0168:	f001 ffec 	bl	80a2144 <_ZN6StringD1Ev>
 80a016c:	b9ae      	cbnz	r6, 80a019a <_Z16tinkerAnalogRead6String+0x5a>
	{
		return -3;
	}
	else if (pin.startsWith("A"))
 80a016e:	490f      	ldr	r1, [pc, #60]	; (80a01ac <_Z16tinkerAnalogRead6String+0x6c>)
 80a0170:	4668      	mov	r0, sp
 80a0172:	f002 f82e 	bl	80a21d2 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0176:	4628      	mov	r0, r5
 80a0178:	4669      	mov	r1, sp
 80a017a:	f002 f8f0 	bl	80a235e <_ZNK6String10startsWithERKS_>
 80a017e:	4605      	mov	r5, r0
 80a0180:	4668      	mov	r0, sp
 80a0182:	f001 ffdf 	bl	80a2144 <_ZN6StringD1Ev>
 80a0186:	b15d      	cbz	r5, 80a01a0 <_Z16tinkerAnalogRead6String+0x60>
	{
		return analogRead(pinNumber+10);
 80a0188:	f1a4 0026 	sub.w	r0, r4, #38	; 0x26
 80a018c:	b280      	uxth	r0, r0
 80a018e:	f002 fed8 	bl	80a2f42 <analogRead>
 80a0192:	e007      	b.n	80a01a4 <_Z16tinkerAnalogRead6String+0x64>
int tinkerAnalogRead(String pin)
{
	//convert ascii to integer
	int pinNumber = pin.charAt(1) - '0';
	//Sanity check to see if the pin numbers are within limits
	if (pinNumber< 0 || pinNumber >7) return -1;
 80a0194:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a0198:	e004      	b.n	80a01a4 <_Z16tinkerAnalogRead6String+0x64>

	if(pin.startsWith("D"))
	{
		return -3;
 80a019a:	f06f 0002 	mvn.w	r0, #2
 80a019e:	e001      	b.n	80a01a4 <_Z16tinkerAnalogRead6String+0x64>
	}
	else if (pin.startsWith("A"))
	{
		return analogRead(pinNumber+10);
	}
	return -2;
 80a01a0:	f06f 0001 	mvn.w	r0, #1
}
 80a01a4:	b004      	add	sp, #16
 80a01a6:	bd70      	pop	{r4, r5, r6, pc}
 80a01a8:	080a485f 	.word	0x080a485f
 80a01ac:	080a47c8 	.word	0x080a47c8

080a01b0 <_Z18tinkerDigitalWrite6String>:
 * Input          : Pin and value
 * Output         : None.
 * Return         : 1 on success and a negative number on failure
 *******************************************************************************/
int tinkerDigitalWrite(String command)
{
 80a01b0:	b5f0      	push	{r4, r5, r6, r7, lr}
	bool value = 0;
	//convert ascii to integer
	int pinNumber = command.charAt(1) - '0';
 80a01b2:	2101      	movs	r1, #1
 * Input          : Pin and value
 * Output         : None.
 * Return         : 1 on success and a negative number on failure
 *******************************************************************************/
int tinkerDigitalWrite(String command)
{
 80a01b4:	b085      	sub	sp, #20
 80a01b6:	4606      	mov	r6, r0
	bool value = 0;
	//convert ascii to integer
	int pinNumber = command.charAt(1) - '0';
 80a01b8:	f002 f8e3 	bl	80a2382 <_ZNK6String6charAtEj>
 80a01bc:	f1a0 0430 	sub.w	r4, r0, #48	; 0x30
	//Sanity check to see if the pin numbers are within limits
	if (pinNumber< 0 || pinNumber >7) return -1;
 80a01c0:	2c07      	cmp	r4, #7
 80a01c2:	d845      	bhi.n	80a0250 <_Z18tinkerDigitalWrite6String+0xa0>

	if(command.substring(3,7) == "HIGH") value = 1;
 80a01c4:	2307      	movs	r3, #7
 80a01c6:	2203      	movs	r2, #3
 80a01c8:	4631      	mov	r1, r6
 80a01ca:	4668      	mov	r0, sp
 80a01cc:	f002 f8dc 	bl	80a2388 <_ZNK6String9substringEjj>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80a01d0:	4924      	ldr	r1, [pc, #144]	; (80a0264 <_Z18tinkerDigitalWrite6String+0xb4>)
 80a01d2:	4668      	mov	r0, sp
 80a01d4:	f002 f89b 	bl	80a230e <_ZNK6String6equalsEPKc>
 80a01d8:	4605      	mov	r5, r0
 80a01da:	4668      	mov	r0, sp
 80a01dc:	f001 ffb2 	bl	80a2144 <_ZN6StringD1Ev>
 80a01e0:	b97d      	cbnz	r5, 80a0202 <_Z18tinkerDigitalWrite6String+0x52>
	else if(command.substring(3,6) == "LOW") value = 0;
 80a01e2:	2306      	movs	r3, #6
 80a01e4:	2203      	movs	r2, #3
 80a01e6:	4631      	mov	r1, r6
 80a01e8:	4668      	mov	r0, sp
 80a01ea:	f002 f8cd 	bl	80a2388 <_ZNK6String9substringEjj>
 80a01ee:	491e      	ldr	r1, [pc, #120]	; (80a0268 <_Z18tinkerDigitalWrite6String+0xb8>)
 80a01f0:	4668      	mov	r0, sp
 80a01f2:	f002 f88c 	bl	80a230e <_ZNK6String6equalsEPKc>
 80a01f6:	4607      	mov	r7, r0
 80a01f8:	4668      	mov	r0, sp
 80a01fa:	f001 ffa3 	bl	80a2144 <_ZN6StringD1Ev>
 80a01fe:	b90f      	cbnz	r7, 80a0204 <_Z18tinkerDigitalWrite6String+0x54>
 80a0200:	e029      	b.n	80a0256 <_Z18tinkerDigitalWrite6String+0xa6>
	//convert ascii to integer
	int pinNumber = command.charAt(1) - '0';
	//Sanity check to see if the pin numbers are within limits
	if (pinNumber< 0 || pinNumber >7) return -1;

	if(command.substring(3,7) == "HIGH") value = 1;
 80a0202:	2501      	movs	r5, #1
	else if(command.substring(3,6) == "LOW") value = 0;
	else return -2;

	if(command.startsWith("D"))
 80a0204:	4919      	ldr	r1, [pc, #100]	; (80a026c <_Z18tinkerDigitalWrite6String+0xbc>)
 80a0206:	4668      	mov	r0, sp
 80a0208:	f001 ffe3 	bl	80a21d2 <_ZN6StringC1EPK19__FlashStringHelper>
 80a020c:	4669      	mov	r1, sp
 80a020e:	4630      	mov	r0, r6
 80a0210:	f002 f8a5 	bl	80a235e <_ZNK6String10startsWithERKS_>
 80a0214:	4607      	mov	r7, r0
 80a0216:	4668      	mov	r0, sp
 80a0218:	f001 ff94 	bl	80a2144 <_ZN6StringD1Ev>
 80a021c:	b96f      	cbnz	r7, 80a023a <_Z18tinkerDigitalWrite6String+0x8a>
	{
		pinMode(pinNumber, OUTPUT);
		digitalWrite(pinNumber, value);
		return 1;
	}
	else if(command.startsWith("A"))
 80a021e:	4914      	ldr	r1, [pc, #80]	; (80a0270 <_Z18tinkerDigitalWrite6String+0xc0>)
 80a0220:	4668      	mov	r0, sp
 80a0222:	f001 ffd6 	bl	80a21d2 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0226:	4630      	mov	r0, r6
 80a0228:	4669      	mov	r1, sp
 80a022a:	f002 f898 	bl	80a235e <_ZNK6String10startsWithERKS_>
 80a022e:	4606      	mov	r6, r0
 80a0230:	4668      	mov	r0, sp
 80a0232:	f001 ff87 	bl	80a2144 <_ZN6StringD1Ev>
 80a0236:	b18e      	cbz	r6, 80a025c <_Z18tinkerDigitalWrite6String+0xac>
	{
		pinMode(pinNumber+10, OUTPUT);
 80a0238:	340a      	adds	r4, #10
 80a023a:	b2a4      	uxth	r4, r4
 80a023c:	2101      	movs	r1, #1
 80a023e:	4620      	mov	r0, r4
 80a0240:	f002 fe42 	bl	80a2ec8 <pinMode>
		digitalWrite(pinNumber+10, value);
 80a0244:	4620      	mov	r0, r4
 80a0246:	4629      	mov	r1, r5
 80a0248:	f002 fe4f 	bl	80a2eea <digitalWrite>
		return 1;
 80a024c:	2001      	movs	r0, #1
 80a024e:	e007      	b.n	80a0260 <_Z18tinkerDigitalWrite6String+0xb0>
{
	bool value = 0;
	//convert ascii to integer
	int pinNumber = command.charAt(1) - '0';
	//Sanity check to see if the pin numbers are within limits
	if (pinNumber< 0 || pinNumber >7) return -1;
 80a0250:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a0254:	e004      	b.n	80a0260 <_Z18tinkerDigitalWrite6String+0xb0>

	if(command.substring(3,7) == "HIGH") value = 1;
	else if(command.substring(3,6) == "LOW") value = 0;
	else return -2;
 80a0256:	f06f 0001 	mvn.w	r0, #1
 80a025a:	e001      	b.n	80a0260 <_Z18tinkerDigitalWrite6String+0xb0>
	{
		pinMode(pinNumber+10, OUTPUT);
		digitalWrite(pinNumber+10, value);
		return 1;
	}
	else return -3;
 80a025c:	f06f 0002 	mvn.w	r0, #2
}
 80a0260:	b005      	add	sp, #20
 80a0262:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0264:	080a47ca 	.word	0x080a47ca
 80a0268:	080a47cf 	.word	0x080a47cf
 80a026c:	080a485f 	.word	0x080a485f
 80a0270:	080a47c8 	.word	0x080a47c8

080a0274 <_Z17tinkerAnalogWrite6String>:
 * Input          : Pin and Value (0 to 255)
 * Output         : None.
 * Return         : 1 on success and a negative number on failure
 *******************************************************************************/
int tinkerAnalogWrite(String command)
{
 80a0274:	b5f0      	push	{r4, r5, r6, r7, lr}
	//convert ascii to integer
	int pinNumber = command.charAt(1) - '0';
 80a0276:	2101      	movs	r1, #1
 * Input          : Pin and Value (0 to 255)
 * Output         : None.
 * Return         : 1 on success and a negative number on failure
 *******************************************************************************/
int tinkerAnalogWrite(String command)
{
 80a0278:	b089      	sub	sp, #36	; 0x24
 80a027a:	4606      	mov	r6, r0
	//convert ascii to integer
	int pinNumber = command.charAt(1) - '0';
 80a027c:	f002 f881 	bl	80a2382 <_ZNK6String6charAtEj>
 80a0280:	f1a0 0530 	sub.w	r5, r0, #48	; 0x30
	//Sanity check to see if the pin numbers are within limits
	if (pinNumber< 0 || pinNumber >7) return -1;
 80a0284:	2d07      	cmp	r5, #7
 * Return         : 1 on success and a negative number on failure
 *******************************************************************************/
int tinkerAnalogWrite(String command)
{
	//convert ascii to integer
	int pinNumber = command.charAt(1) - '0';
 80a0286:	4604      	mov	r4, r0
	//Sanity check to see if the pin numbers are within limits
	if (pinNumber< 0 || pinNumber >7) return -1;
 80a0288:	d83e      	bhi.n	80a0308 <_Z17tinkerAnalogWrite6String+0x94>

	String value = command.substring(3);
 80a028a:	2203      	movs	r2, #3
 80a028c:	4631      	mov	r1, r6
 80a028e:	4668      	mov	r0, sp
 80a0290:	f002 f8a2 	bl	80a23d8 <_ZNK6String9substringEj>

	if(command.startsWith("D"))
 80a0294:	491f      	ldr	r1, [pc, #124]	; (80a0314 <_Z17tinkerAnalogWrite6String+0xa0>)
 80a0296:	a804      	add	r0, sp, #16
 80a0298:	f001 ff9b 	bl	80a21d2 <_ZN6StringC1EPK19__FlashStringHelper>
 80a029c:	a904      	add	r1, sp, #16
 80a029e:	4630      	mov	r0, r6
 80a02a0:	f002 f85d 	bl	80a235e <_ZNK6String10startsWithERKS_>
 80a02a4:	4607      	mov	r7, r0
 80a02a6:	a804      	add	r0, sp, #16
 80a02a8:	f001 ff4c 	bl	80a2144 <_ZN6StringD1Ev>
 80a02ac:	b157      	cbz	r7, 80a02c4 <_Z17tinkerAnalogWrite6String+0x50>
	{
		pinMode(pinNumber, OUTPUT);
 80a02ae:	b2ad      	uxth	r5, r5
 80a02b0:	2101      	movs	r1, #1
 80a02b2:	4628      	mov	r0, r5
 80a02b4:	f002 fe08 	bl	80a2ec8 <pinMode>
		analogWrite(pinNumber, value.toInt());
 80a02b8:	4668      	mov	r0, sp
 80a02ba:	f002 f894 	bl	80a23e6 <_ZNK6String5toIntEv>
 80a02be:	4601      	mov	r1, r0
 80a02c0:	4628      	mov	r0, r5
 80a02c2:	e017      	b.n	80a02f4 <_Z17tinkerAnalogWrite6String+0x80>
		return 1;
	}
	else if(command.startsWith("A"))
 80a02c4:	4914      	ldr	r1, [pc, #80]	; (80a0318 <_Z17tinkerAnalogWrite6String+0xa4>)
 80a02c6:	a804      	add	r0, sp, #16
 80a02c8:	f001 ff83 	bl	80a21d2 <_ZN6StringC1EPK19__FlashStringHelper>
 80a02cc:	a904      	add	r1, sp, #16
 80a02ce:	4630      	mov	r0, r6
 80a02d0:	f002 f845 	bl	80a235e <_ZNK6String10startsWithERKS_>
 80a02d4:	4605      	mov	r5, r0
 80a02d6:	a804      	add	r0, sp, #16
 80a02d8:	f001 ff34 	bl	80a2144 <_ZN6StringD1Ev>
 80a02dc:	b175      	cbz	r5, 80a02fc <_Z17tinkerAnalogWrite6String+0x88>
	{
		pinMode(pinNumber+10, OUTPUT);
 80a02de:	3c26      	subs	r4, #38	; 0x26
 80a02e0:	b2a4      	uxth	r4, r4
 80a02e2:	2101      	movs	r1, #1
 80a02e4:	4620      	mov	r0, r4
 80a02e6:	f002 fdef 	bl	80a2ec8 <pinMode>
		analogWrite(pinNumber+10, value.toInt());
 80a02ea:	4668      	mov	r0, sp
 80a02ec:	f002 f87b 	bl	80a23e6 <_ZNK6String5toIntEv>
 80a02f0:	4601      	mov	r1, r0
 80a02f2:	4620      	mov	r0, r4
 80a02f4:	f002 fe3c 	bl	80a2f70 <_Z11analogWritetm>
		return 1;
 80a02f8:	2401      	movs	r4, #1
 80a02fa:	e001      	b.n	80a0300 <_Z17tinkerAnalogWrite6String+0x8c>
	}
	else return -2;
 80a02fc:	f06f 0401 	mvn.w	r4, #1
	//convert ascii to integer
	int pinNumber = command.charAt(1) - '0';
	//Sanity check to see if the pin numbers are within limits
	if (pinNumber< 0 || pinNumber >7) return -1;

	String value = command.substring(3);
 80a0300:	4668      	mov	r0, sp
 80a0302:	f001 ff1f 	bl	80a2144 <_ZN6StringD1Ev>
 80a0306:	e001      	b.n	80a030c <_Z17tinkerAnalogWrite6String+0x98>
int tinkerAnalogWrite(String command)
{
	//convert ascii to integer
	int pinNumber = command.charAt(1) - '0';
	//Sanity check to see if the pin numbers are within limits
	if (pinNumber< 0 || pinNumber >7) return -1;
 80a0308:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		pinMode(pinNumber+10, OUTPUT);
		analogWrite(pinNumber+10, value.toInt());
		return 1;
	}
	else return -2;
}
 80a030c:	4620      	mov	r0, r4
 80a030e:	b009      	add	sp, #36	; 0x24
 80a0310:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0312:	bf00      	nop
 80a0314:	080a485f 	.word	0x080a485f
 80a0318:	080a47c8 	.word	0x080a47c8

080a031c <_Z5doLED6String>:
    // Integration from Node-red
   int doLED(String cmd) {
 80a031c:	b508      	push	{r3, lr}
    bool ledState = atoi(cmd);
 80a031e:	6800      	ldr	r0, [r0, #0]
 80a0320:	f004 f908 	bl	80a4534 <atoi>
    digitalWrite(D7, ledState);
 80a0324:	1c01      	adds	r1, r0, #0
 80a0326:	bf18      	it	ne
 80a0328:	2101      	movne	r1, #1
 80a032a:	2007      	movs	r0, #7
 80a032c:	f002 fddd 	bl	80a2eea <digitalWrite>
 80a0330:	bd08      	pop	{r3, pc}

080a0332 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.7.constprop.11>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
 80a0332:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0334:	4605      	mov	r5, r0
 80a0336:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80a033a:	4323      	orrs	r3, r4
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a033c:	f88d 3000 	strb.w	r3, [sp]
 80a0340:	233c      	movs	r3, #60	; 0x3c
 80a0342:	f001 fb2d 	bl	80a19a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, eventData, 60, flags1, flags2);
    }
 80a0346:	4628      	mov	r0, r5
 80a0348:	b003      	add	sp, #12
 80a034a:	bd30      	pop	{r4, r5, pc}

080a034c <_ZN10CloudClass7publishEPKcS1_.isra.8.constprop.10>:
// Deprecated methods
inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
 80a034c:	b513      	push	{r0, r1, r4, lr}
 80a034e:	4604      	mov	r4, r0
 80a0350:	4b05      	ldr	r3, [pc, #20]	; (80a0368 <_ZN10CloudClass7publishEPKcS1_.isra.8.constprop.10+0x1c>)
    return publish(name, data, PUBLIC);
 80a0352:	2200      	movs	r2, #0
        val_(0) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 80a0354:	781b      	ldrb	r3, [r3, #0]
 80a0356:	f88d 2000 	strb.w	r2, [sp]
 80a035a:	460a      	mov	r2, r1
 80a035c:	4903      	ldr	r1, [pc, #12]	; (80a036c <_ZN10CloudClass7publishEPKcS1_.isra.8.constprop.10+0x20>)
 80a035e:	f7ff ffe8 	bl	80a0332 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.7.constprop.11>
}
 80a0362:	4620      	mov	r0, r4
 80a0364:	b002      	add	sp, #8
 80a0366:	bd10      	pop	{r4, pc}
 80a0368:	20000378 	.word	0x20000378
 80a036c:	080a47d3 	.word	0x080a47d3

080a0370 <_ZN11USARTSerial5writeEi>:
  bool breakRx(void);

  inline size_t write(unsigned long n) { return write((uint16_t)n); }
  inline size_t write(long n) { return write((uint16_t)n); }
  inline size_t write(unsigned int n) { return write((uint16_t)n); }
  inline size_t write(int n) { return write((uint16_t)n); }
 80a0370:	b289      	uxth	r1, r1
 80a0372:	f002 bb4a 	b.w	80a2a0a <_ZN11USARTSerial5writeEt>
	...

080a0378 <_Z11mqttPublishPc6String>:
MQTT client("skinny.skycharts.net", 1883, callback);

PollingTimer batteryTimer(360000);
volatile int forceReading = 1;

void mqttPublish(char *event, String msg) {
 80a0378:	b530      	push	{r4, r5, lr}
 80a037a:	4604      	mov	r4, r0
 80a037c:	b089      	sub	sp, #36	; 0x24
    if (!client.isConnected()) {
 80a037e:	4814      	ldr	r0, [pc, #80]	; (80a03d0 <_Z11mqttPublishPc6String+0x58>)
MQTT client("skinny.skycharts.net", 1883, callback);

PollingTimer batteryTimer(360000);
volatile int forceReading = 1;

void mqttPublish(char *event, String msg) {
 80a0380:	460d      	mov	r5, r1
    if (!client.isConnected()) {
 80a0382:	f000 fc52 	bl	80a0c2a <_ZN4MQTT11isConnectedEv>
 80a0386:	b9c0      	cbnz	r0, 80a03ba <_Z11mqttPublishPc6String+0x42>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a0388:	4912      	ldr	r1, [pc, #72]	; (80a03d4 <_Z11mqttPublishPc6String+0x5c>)
 80a038a:	a804      	add	r0, sp, #16
 80a038c:	f001 ff21 	bl	80a21d2 <_ZN6StringC1EPK19__FlashStringHelper>
         client.connect("x042_" + String(Time.now()));
 80a0390:	f002 fae2 	bl	80a2958 <_ZN9TimeClass3nowEv>
 80a0394:	220a      	movs	r2, #10
 80a0396:	4601      	mov	r1, r0
 80a0398:	4668      	mov	r0, sp
 80a039a:	f001 ff6b 	bl	80a2274 <_ZN6StringC1Elh>
 80a039e:	4669      	mov	r1, sp
 80a03a0:	a804      	add	r0, sp, #16
 80a03a2:	f001 ffa8 	bl	80a22f6 <_ZplRK15StringSumHelperRK6String>
 80a03a6:	6801      	ldr	r1, [r0, #0]
 80a03a8:	4809      	ldr	r0, [pc, #36]	; (80a03d0 <_Z11mqttPublishPc6String+0x58>)
 80a03aa:	f000 fd23 	bl	80a0df4 <_ZN4MQTT7connectEPKc>
 80a03ae:	4668      	mov	r0, sp
 80a03b0:	f001 fec8 	bl	80a2144 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a03b4:	a804      	add	r0, sp, #16
 80a03b6:	f001 fec5 	bl	80a2144 <_ZN6StringD1Ev>
    }
    if (client.isConnected()) {
 80a03ba:	4805      	ldr	r0, [pc, #20]	; (80a03d0 <_Z11mqttPublishPc6String+0x58>)
 80a03bc:	f000 fc35 	bl	80a0c2a <_ZN4MQTT11isConnectedEv>
 80a03c0:	b120      	cbz	r0, 80a03cc <_Z11mqttPublishPc6String+0x54>
        client.publish(event, msg);
 80a03c2:	682a      	ldr	r2, [r5, #0]
 80a03c4:	4621      	mov	r1, r4
 80a03c6:	4802      	ldr	r0, [pc, #8]	; (80a03d0 <_Z11mqttPublishPc6String+0x58>)
 80a03c8:	f000 fd93 	bl	80a0ef2 <_ZN4MQTT7publishEPKcS1_>
    }
}
 80a03cc:	b009      	add	sp, #36	; 0x24
 80a03ce:	bd30      	pop	{r4, r5, pc}
 80a03d0:	20000380 	.word	0x20000380
 80a03d4:	080a47dc 	.word	0x080a47dc

080a03d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a03d8:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a03da:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a03dc:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 80a03de:	b17c      	cbz	r4, 80a0400 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a03e0:	6863      	ldr	r3, [r4, #4]
 80a03e2:	3b01      	subs	r3, #1
 80a03e4:	6063      	str	r3, [r4, #4]
 80a03e6:	b95b      	cbnz	r3, 80a0400 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 80a03e8:	6823      	ldr	r3, [r4, #0]
 80a03ea:	4620      	mov	r0, r4
 80a03ec:	689b      	ldr	r3, [r3, #8]
 80a03ee:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a03f0:	68a3      	ldr	r3, [r4, #8]
 80a03f2:	3b01      	subs	r3, #1
 80a03f4:	60a3      	str	r3, [r4, #8]
 80a03f6:	b91b      	cbnz	r3, 80a0400 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a03f8:	6823      	ldr	r3, [r4, #0]
 80a03fa:	4620      	mov	r0, r4
 80a03fc:	68db      	ldr	r3, [r3, #12]
 80a03fe:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 80a0400:	4628      	mov	r0, r5
 80a0402:	bd38      	pop	{r3, r4, r5, pc}
 80a0404:	0000      	movs	r0, r0
	...

080a0408 <_Z9measureVAv>:
//delay (360000); // 5 minute delay
 
 
}

void measureVA() {
 80a0408:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    //average = average + (.044 * analogRead(A0) -3.78) / 1000;//this is 
    //chargeAmp = average;
 // }

//Version 3 (A1 - 550) * (5v/1023 = 0.00488758553 =Vpp) / 0.066 känslighet sensor
    sensorValue = analogRead(A1);
 80a040a:	200b      	movs	r0, #11
 80a040c:	f002 fd99 	bl	80a2f42 <analogRead>
 80a0410:	4b2d      	ldr	r3, [pc, #180]	; (80a04c8 <_Z9measureVAv+0xc0>)
 80a0412:	6018      	str	r0, [r3, #0]
    offSet = sensorValue - 3070;
 80a0414:	4b2d      	ldr	r3, [pc, #180]	; (80a04cc <_Z9measureVAv+0xc4>)
 80a0416:	f6a0 30fe 	subw	r0, r0, #3070	; 0xbfe
 80a041a:	6018      	str	r0, [r3, #0]
    voltage = offSet * Vpp;
 80a041c:	f003 fd32 	bl	80a3e84 <__aeabi_i2f>
 80a0420:	492b      	ldr	r1, [pc, #172]	; (80a04d0 <_Z9measureVAv+0xc8>)
 80a0422:	f003 fd83 	bl	80a3f2c <__aeabi_fmul>
 80a0426:	4b2b      	ldr	r3, [pc, #172]	; (80a04d4 <_Z9measureVAv+0xcc>)
 80a0428:	6018      	str	r0, [r3, #0]
    chargeAmp = voltage / 0.066;
 80a042a:	f003 f8d5 	bl	80a35d8 <__aeabi_f2d>
 80a042e:	a324      	add	r3, pc, #144	; (adr r3, 80a04c0 <_Z9measureVAv+0xb8>)
 80a0430:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0434:	f003 fa4e 	bl	80a38d4 <__aeabi_ddiv>
 80a0438:	f003 fc1a 	bl	80a3c70 <__aeabi_d2f>
 80a043c:	4b26      	ldr	r3, [pc, #152]	; (80a04d8 <_Z9measureVAv+0xd0>)
 80a043e:	6018      	str	r0, [r3, #0]
    //temp5 = 514 - sensorValue;
    //chargeAmp = 75.76 * temp5 / 1023;

  // check to see what the value of the A0 input is and store it in the int(heltal) variable analogvalue
  // batteryVoltage är ett flyttal som visar decimaler. Formel : batteryVoltage = A0 * 2 / 112
    analogvalue = analogRead(A0);
 80a0440:	200a      	movs	r0, #10
 80a0442:	f002 fd7e 	bl	80a2f42 <analogRead>
 80a0446:	4b25      	ldr	r3, [pc, #148]	; (80a04dc <_Z9measureVAv+0xd4>)
 80a0448:	4604      	mov	r4, r0
 80a044a:	6018      	str	r0, [r3, #0]
    temp = analogvalue*2;
 80a044c:	0040      	lsls	r0, r0, #1
 80a044e:	f003 fd19 	bl	80a3e84 <__aeabi_i2f>
 80a0452:	4b23      	ldr	r3, [pc, #140]	; (80a04e0 <_Z9measureVAv+0xd8>)
    batteryVoltage = temp/112;
 80a0454:	4923      	ldr	r1, [pc, #140]	; (80a04e4 <_Z9measureVAv+0xdc>)
    //chargeAmp = 75.76 * temp5 / 1023;

  // check to see what the value of the A0 input is and store it in the int(heltal) variable analogvalue
  // batteryVoltage är ett flyttal som visar decimaler. Formel : batteryVoltage = A0 * 2 / 112
    analogvalue = analogRead(A0);
    temp = analogvalue*2;
 80a0456:	6018      	str	r0, [r3, #0]
    batteryVoltage = temp/112;
 80a0458:	f003 fe1c 	bl	80a4094 <__aeabi_fdiv>
 80a045c:	4b22      	ldr	r3, [pc, #136]	; (80a04e8 <_Z9measureVAv+0xe0>)
 80a045e:	6018      	str	r0, [r3, #0]
// 3035=54,2v  3012=53,8V : 3007= 53,7V : 3001 = 53,6V :2996= 53,5 :  2938 = 52V : 2800 = 50v : 2700 = 48,21

   if (analogvalue<2700) {
 80a0460:	f640 238b 	movw	r3, #2699	; 0xa8b
 80a0464:	429c      	cmp	r4, r3
 80a0466:	dc0c      	bgt.n	80a0482 <_Z9measureVAv+0x7a>
   // if (batteryVoltage>53) {2968
        digitalWrite(D3,HIGH);
 80a0468:	2101      	movs	r1, #1
 80a046a:	2003      	movs	r0, #3
 80a046c:	f002 fd3d 	bl	80a2eea <digitalWrite>
        Particle.publish("my-event","High");
 80a0470:	491e      	ldr	r1, [pc, #120]	; (80a04ec <_Z9measureVAv+0xe4>)
 80a0472:	4668      	mov	r0, sp
 80a0474:	f7ff ff6a 	bl	80a034c <_ZN10CloudClass7publishEPKcS1_.isra.8.constprop.10>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0478:	a801      	add	r0, sp, #4
 80a047a:	f7ff ffad 	bl	80a03d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        mqttPublish("my-event", "High");
 80a047e:	491b      	ldr	r1, [pc, #108]	; (80a04ec <_Z9measureVAv+0xe4>)
 80a0480:	e00f      	b.n	80a04a2 <_Z9measureVAv+0x9a>

    }
 else if (analogvalue>2938) {
 80a0482:	f640 337a 	movw	r3, #2938	; 0xb7a
 80a0486:	429c      	cmp	r4, r3
 80a0488:	dd15      	ble.n	80a04b6 <_Z9measureVAv+0xae>
//    else if (batteryVoltage<53.8) {3012
        digitalWrite(D3,LOW);
 80a048a:	2100      	movs	r1, #0
 80a048c:	2003      	movs	r0, #3
 80a048e:	f002 fd2c 	bl	80a2eea <digitalWrite>
        Particle.publish("my-event","Low");
 80a0492:	4917      	ldr	r1, [pc, #92]	; (80a04f0 <_Z9measureVAv+0xe8>)
 80a0494:	4668      	mov	r0, sp
 80a0496:	f7ff ff59 	bl	80a034c <_ZN10CloudClass7publishEPKcS1_.isra.8.constprop.10>
 80a049a:	a801      	add	r0, sp, #4
 80a049c:	f7ff ff9c 	bl	80a03d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        mqttPublish("my-event", "Low");
 80a04a0:	4913      	ldr	r1, [pc, #76]	; (80a04f0 <_Z9measureVAv+0xe8>)
 80a04a2:	4668      	mov	r0, sp
 80a04a4:	f001 fe95 	bl	80a21d2 <_ZN6StringC1EPK19__FlashStringHelper>
 80a04a8:	4812      	ldr	r0, [pc, #72]	; (80a04f4 <_Z9measureVAv+0xec>)
 80a04aa:	4669      	mov	r1, sp
 80a04ac:	f7ff ff64 	bl	80a0378 <_Z11mqttPublishPc6String>
 80a04b0:	4668      	mov	r0, sp
 80a04b2:	f001 fe47 	bl	80a2144 <_ZN6StringD1Ev>

   }



}
 80a04b6:	b004      	add	sp, #16
 80a04b8:	bd10      	pop	{r4, pc}
 80a04ba:	bf00      	nop
 80a04bc:	f3af 8000 	nop.w
 80a04c0:	4189374c 	.word	0x4189374c
 80a04c4:	3fb0e560 	.word	0x3fb0e560
 80a04c8:	2000040c 	.word	0x2000040c
 80a04cc:	200003f8 	.word	0x200003f8
 80a04d0:	3aa009f6 	.word	0x3aa009f6
 80a04d4:	200003e4 	.word	0x200003e4
 80a04d8:	200003e8 	.word	0x200003e8
 80a04dc:	20000400 	.word	0x20000400
 80a04e0:	2000037c 	.word	0x2000037c
 80a04e4:	42e00000 	.word	0x42e00000
 80a04e8:	20000374 	.word	0x20000374
 80a04ec:	080a47e2 	.word	0x080a47e2
 80a04f0:	080a47e7 	.word	0x080a47e7
 80a04f4:	080a47d3 	.word	0x080a47d3

080a04f8 <loop>:
    batteryTimer.start();
}


// loop() runs over and over again, as quickly as it can execute.
void loop() {
 80a04f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  // The core of your code will likely live here.
  // assume you have an analog sensor attached to A0:
    
    aValue = analogRead(A0);
 80a04fc:	200a      	movs	r0, #10
    batteryTimer.start();
}


// loop() runs over and over again, as quickly as it can execute.
void loop() {
 80a04fe:	b097      	sub	sp, #92	; 0x5c
  // The core of your code will likely live here.
  // assume you have an analog sensor attached to A0:
    
    aValue = analogRead(A0);
 80a0500:	f002 fd1f 	bl	80a2f42 <analogRead>
 80a0504:	4ba9      	ldr	r3, [pc, #676]	; (80a07ac <loop+0x2b4>)
    bValue = analogRead(A1);

    // calculating power from sensor readings A0 and A1
    solarPower = batteryVoltage * chargeAmp; 
 80a0506:	4caa      	ldr	r4, [pc, #680]	; (80a07b0 <loop+0x2b8>)
// loop() runs over and over again, as quickly as it can execute.
void loop() {
  // The core of your code will likely live here.
  // assume you have an analog sensor attached to A0:
    
    aValue = analogRead(A0);
 80a0508:	6018      	str	r0, [r3, #0]
    bValue = analogRead(A1);
 80a050a:	200b      	movs	r0, #11
 80a050c:	f002 fd19 	bl	80a2f42 <analogRead>

    // calculating power from sensor readings A0 and A1
    solarPower = batteryVoltage * chargeAmp; 
 80a0510:	4fa8      	ldr	r7, [pc, #672]	; (80a07b4 <loop+0x2bc>)
void loop() {
  // The core of your code will likely live here.
  // assume you have an analog sensor attached to A0:
    
    aValue = analogRead(A0);
    bValue = analogRead(A1);
 80a0512:	4ba9      	ldr	r3, [pc, #676]	; (80a07b8 <loop+0x2c0>)

    // calculating power from sensor readings A0 and A1
    solarPower = batteryVoltage * chargeAmp; 
 80a0514:	6839      	ldr	r1, [r7, #0]
void loop() {
  // The core of your code will likely live here.
  // assume you have an analog sensor attached to A0:
    
    aValue = analogRead(A0);
    bValue = analogRead(A1);
 80a0516:	6018      	str	r0, [r3, #0]

    // calculating power from sensor readings A0 and A1
    solarPower = batteryVoltage * chargeAmp; 
 80a0518:	6820      	ldr	r0, [r4, #0]
 80a051a:	f003 fd07 	bl	80a3f2c <__aeabi_fmul>
 80a051e:	4ea7      	ldr	r6, [pc, #668]	; (80a07bc <loop+0x2c4>)
 80a0520:	6030      	str	r0, [r6, #0]
 * Id               :   t0
 * attribut         :   txt
 ******************************************************************************/


    if (client.isConnected()) {
 80a0522:	48a7      	ldr	r0, [pc, #668]	; (80a07c0 <loop+0x2c8>)
 80a0524:	f000 fb81 	bl	80a0c2a <_ZN4MQTT11isConnectedEv>
 80a0528:	b110      	cbz	r0, 80a0530 <loop+0x38>
        client.loop();
 80a052a:	48a5      	ldr	r0, [pc, #660]	; (80a07c0 <loop+0x2c8>)
 80a052c:	f000 fd28 	bl	80a0f80 <_ZN4MQTT4loopEv>
    }

   int takeReading = forceReading || batteryTimer.interval();
 80a0530:	4ba4      	ldr	r3, [pc, #656]	; (80a07c4 <loop+0x2cc>)
 80a0532:	681a      	ldr	r2, [r3, #0]
 80a0534:	4698      	mov	r8, r3
 80a0536:	b97a      	cbnz	r2, 80a0558 <loop+0x60>
 80a0538:	4da3      	ldr	r5, [pc, #652]	; (80a07c8 <loop+0x2d0>)

private:
  inline bool _expired() {
    // This ordering is int overflow safe, as long as the actual time since
    // start isn't > ULONG_MAX (~50 days).
    return this->running() && (this->waiting() >= this->_delay);
 80a053a:	782b      	ldrb	r3, [r5, #0]
 80a053c:	2b00      	cmp	r3, #0
 80a053e:	f000 8131 	beq.w	80a07a4 <loop+0x2ac>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0542:	f000 fe7d 	bl	80a1240 <HAL_Timer_Get_Milli_Seconds>
 80a0546:	686b      	ldr	r3, [r5, #4]
 80a0548:	1ac0      	subs	r0, r0, r3
 80a054a:	68ab      	ldr	r3, [r5, #8]
 80a054c:	4283      	cmp	r3, r0
 80a054e:	f200 8129 	bhi.w	80a07a4 <loop+0x2ac>
 80a0552:	f000 fe75 	bl	80a1240 <HAL_Timer_Get_Milli_Seconds>
  inline bool interval( bool min_delay=true) {
    bool result = this->_expired();
    if (result) {
      if (min_delay)
        // Start over from right now. Re-fire after a full _delay.
        this->_start = millis();
 80a0556:	6068      	str	r0, [r5, #4]
   if (!takeReading) {
       return;
   }

  // clear flag
  if (forceReading > 0) {
 80a0558:	f8d8 3000 	ldr.w	r3, [r8]
 80a055c:	4a99      	ldr	r2, [pc, #612]	; (80a07c4 <loop+0x2cc>)
 80a055e:	2b00      	cmp	r3, #0
    forceReading--;
 80a0560:	bfc8      	it	gt
 80a0562:	6813      	ldrgt	r3, [r2, #0]
  delay(1000);

  Serial1.print("t0.txt=");
  Serial1.write(0x22); 
    // Visar batterispänning med en deciamal ex 13,9
  Serial1.print(batteryVoltage,1); 
 80a0564:	f04f 0501 	mov.w	r5, #1
       return;
   }

  // clear flag
  if (forceReading > 0) {
    forceReading--;
 80a0568:	bfc4      	itt	gt
 80a056a:	f103 33ff 	addgt.w	r3, r3, #4294967295	; 0xffffffff
 80a056e:	6013      	strgt	r3, [r2, #0]
  }

  measureVA();
 80a0570:	f7ff ff4a 	bl	80a0408 <_Z9measureVAv>
  
  Serial1.print("t0.txt=\"25.4°C\"");
 80a0574:	f002 fa50 	bl	80a2a18 <_Z22__fetch_global_Serial1v>
 80a0578:	4994      	ldr	r1, [pc, #592]	; (80a07cc <loop+0x2d4>)
 80a057a:	f001 fc43 	bl	80a1e04 <_ZN5Print5printEPKc>
  Serial1.write(0xff);
 80a057e:	f002 fa4b 	bl	80a2a18 <_Z22__fetch_global_Serial1v>
 80a0582:	21ff      	movs	r1, #255	; 0xff
 80a0584:	f7ff fef4 	bl	80a0370 <_ZN11USARTSerial5writeEi>
  Serial1.write(0xff);
 80a0588:	f002 fa46 	bl	80a2a18 <_Z22__fetch_global_Serial1v>
 80a058c:	21ff      	movs	r1, #255	; 0xff
 80a058e:	f7ff feef 	bl	80a0370 <_ZN11USARTSerial5writeEi>
  Serial1.write(0xff);
 80a0592:	f002 fa41 	bl	80a2a18 <_Z22__fetch_global_Serial1v>
 80a0596:	21ff      	movs	r1, #255	; 0xff
 80a0598:	f7ff feea 	bl	80a0370 <_ZN11USARTSerial5writeEi>
    
  delay(1000);
 80a059c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a05a0:	f001 f87c 	bl	80a169c <delay>

  Serial1.print("t0.txt=");
 80a05a4:	f002 fa38 	bl	80a2a18 <_Z22__fetch_global_Serial1v>
 80a05a8:	4989      	ldr	r1, [pc, #548]	; (80a07d0 <loop+0x2d8>)
 80a05aa:	f001 fc2b 	bl	80a1e04 <_ZN5Print5printEPKc>
  Serial1.write(0x22); 
 80a05ae:	f002 fa33 	bl	80a2a18 <_Z22__fetch_global_Serial1v>
 80a05b2:	2122      	movs	r1, #34	; 0x22
 80a05b4:	f7ff fedc 	bl	80a0370 <_ZN11USARTSerial5writeEi>
    // Visar batterispänning med en deciamal ex 13,9
  Serial1.print(batteryVoltage,1); 
 80a05b8:	f002 fa2e 	bl	80a2a18 <_Z22__fetch_global_Serial1v>
 80a05bc:	4680      	mov	r8, r0
 80a05be:	6820      	ldr	r0, [r4, #0]
 80a05c0:	f003 f80a 	bl	80a35d8 <__aeabi_f2d>
 80a05c4:	9500      	str	r5, [sp, #0]
 80a05c6:	460b      	mov	r3, r1
 80a05c8:	4602      	mov	r2, r0
 80a05ca:	4640      	mov	r0, r8
 80a05cc:	f001 fd1e 	bl	80a200c <_ZN5Print5printEdi>
  Serial1.write(0x22); 
 80a05d0:	f002 fa22 	bl	80a2a18 <_Z22__fetch_global_Serial1v>
 80a05d4:	2122      	movs	r1, #34	; 0x22
 80a05d6:	f7ff fecb 	bl	80a0370 <_ZN11USARTSerial5writeEi>

  Serial1.write(0xff);
 80a05da:	f002 fa1d 	bl	80a2a18 <_Z22__fetch_global_Serial1v>
 80a05de:	21ff      	movs	r1, #255	; 0xff
 80a05e0:	f7ff fec6 	bl	80a0370 <_ZN11USARTSerial5writeEi>
  Serial1.write(0xff);
 80a05e4:	f002 fa18 	bl	80a2a18 <_Z22__fetch_global_Serial1v>
 80a05e8:	21ff      	movs	r1, #255	; 0xff
 80a05ea:	f7ff fec1 	bl	80a0370 <_ZN11USARTSerial5writeEi>
 80a05ee:	f8df 820c 	ldr.w	r8, [pc, #524]	; 80a07fc <loop+0x304>
  Serial1.write(0xff);
 80a05f2:	f002 fa11 	bl	80a2a18 <_Z22__fetch_global_Serial1v>
 80a05f6:	21ff      	movs	r1, #255	; 0xff
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 80a05f8:	f04f 0900 	mov.w	r9, #0
 80a05fc:	f7ff feb8 	bl	80a0370 <_ZN11USARTSerial5writeEi>
  //delay(1000);


  
  // Publicera till particle cloud
  String temp2 = String(batteryVoltage,1); // store voltage in "batteryVoltage" string
 80a0600:	6821      	ldr	r1, [r4, #0]
 80a0602:	462a      	mov	r2, r5
 80a0604:	a802      	add	r0, sp, #8
 80a0606:	f001 fe48 	bl	80a229a <_ZN6StringC1Efi>
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 80a060a:	f898 3000 	ldrb.w	r3, [r8]
  Particle.publish("batteryVoltage", temp2, PRIVATE); // publish to cloud
 80a060e:	9a02      	ldr	r2, [sp, #8]
 80a0610:	4970      	ldr	r1, [pc, #448]	; (80a07d4 <loop+0x2dc>)
 80a0612:	a812      	add	r0, sp, #72	; 0x48
 80a0614:	f88d 9000 	strb.w	r9, [sp]
 80a0618:	f7ff fe8b 	bl	80a0332 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.7.constprop.11>
 80a061c:	a813      	add	r0, sp, #76	; 0x4c
 80a061e:	f7ff fedb 	bl	80a03d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  String temp4 = String(chargeAmp,1); // store ampere in "chargeAmp" string
 80a0622:	462a      	mov	r2, r5
 80a0624:	6839      	ldr	r1, [r7, #0]
 80a0626:	a806      	add	r0, sp, #24
 80a0628:	f001 fe37 	bl	80a229a <_ZN6StringC1Efi>
 80a062c:	f898 3000 	ldrb.w	r3, [r8]
  Particle.publish("chargeAmp", temp4, PRIVATE); // publish to cloud
 80a0630:	9a06      	ldr	r2, [sp, #24]
 80a0632:	4969      	ldr	r1, [pc, #420]	; (80a07d8 <loop+0x2e0>)
 80a0634:	a812      	add	r0, sp, #72	; 0x48
 80a0636:	f88d 9000 	strb.w	r9, [sp]
 80a063a:	f7ff fe7a 	bl	80a0332 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.7.constprop.11>
 80a063e:	a813      	add	r0, sp, #76	; 0x4c
 80a0640:	f7ff feca 	bl	80a03d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  String temp5 = String(solarPower,1); // store ampere in "chargeAmp" string
 80a0644:	6831      	ldr	r1, [r6, #0]
 80a0646:	462a      	mov	r2, r5
 80a0648:	a80a      	add	r0, sp, #40	; 0x28
 80a064a:	f001 fe26 	bl	80a229a <_ZN6StringC1Efi>
 80a064e:	f898 3000 	ldrb.w	r3, [r8]
  Particle.publish("solarPower", temp5, PRIVATE); // publish to cloud
 80a0652:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80a0654:	4961      	ldr	r1, [pc, #388]	; (80a07dc <loop+0x2e4>)
 80a0656:	a812      	add	r0, sp, #72	; 0x48
 80a0658:	f88d 9000 	strb.w	r9, [sp]
 80a065c:	f7ff fe69 	bl	80a0332 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.7.constprop.11>
 80a0660:	a813      	add	r0, sp, #76	; 0x4c
 80a0662:	f7ff feb9 	bl	80a03d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  
  mqttPublish("batteryVoltage", temp2);
 80a0666:	a902      	add	r1, sp, #8
 80a0668:	a812      	add	r0, sp, #72	; 0x48
 80a066a:	f001 fdd4 	bl	80a2216 <_ZN6StringC1ERKS_>
 80a066e:	a912      	add	r1, sp, #72	; 0x48
 80a0670:	4858      	ldr	r0, [pc, #352]	; (80a07d4 <loop+0x2dc>)
 80a0672:	f7ff fe81 	bl	80a0378 <_Z11mqttPublishPc6String>
 80a0676:	a812      	add	r0, sp, #72	; 0x48
 80a0678:	f001 fd64 	bl	80a2144 <_ZN6StringD1Ev>
  mqttPublish("chargeAmp" , temp4);
 80a067c:	a906      	add	r1, sp, #24
 80a067e:	a812      	add	r0, sp, #72	; 0x48
 80a0680:	f001 fdc9 	bl	80a2216 <_ZN6StringC1ERKS_>
 80a0684:	a912      	add	r1, sp, #72	; 0x48
 80a0686:	4854      	ldr	r0, [pc, #336]	; (80a07d8 <loop+0x2e0>)
 80a0688:	f7ff fe76 	bl	80a0378 <_Z11mqttPublishPc6String>
 80a068c:	a812      	add	r0, sp, #72	; 0x48
 80a068e:	f001 fd59 	bl	80a2144 <_ZN6StringD1Ev>
  mqttPublish("solarPower" , temp5);
 80a0692:	a90a      	add	r1, sp, #40	; 0x28
 80a0694:	a812      	add	r0, sp, #72	; 0x48
 80a0696:	f001 fdbe 	bl	80a2216 <_ZN6StringC1ERKS_>
 // Particle.publish("batteryVoltage", "13,9", PRIVATE); // publish to cloud

    String temp3 = String(cykelId); // store "CykelId" in string
 80a069a:	4e51      	ldr	r6, [pc, #324]	; (80a07e0 <loop+0x2e8>)
  String temp5 = String(solarPower,1); // store ampere in "chargeAmp" string
  Particle.publish("solarPower", temp5, PRIVATE); // publish to cloud
  
  mqttPublish("batteryVoltage", temp2);
  mqttPublish("chargeAmp" , temp4);
  mqttPublish("solarPower" , temp5);
 80a069c:	a912      	add	r1, sp, #72	; 0x48
 80a069e:	484f      	ldr	r0, [pc, #316]	; (80a07dc <loop+0x2e4>)
 80a06a0:	f7ff fe6a 	bl	80a0378 <_Z11mqttPublishPc6String>
 80a06a4:	a812      	add	r0, sp, #72	; 0x48
 80a06a6:	f001 fd4d 	bl	80a2144 <_ZN6StringD1Ev>
 // Particle.publish("batteryVoltage", "13,9", PRIVATE); // publish to cloud

    String temp3 = String(cykelId); // store "CykelId" in string
 80a06aa:	220a      	movs	r2, #10
 80a06ac:	6831      	ldr	r1, [r6, #0]
 80a06ae:	a80e      	add	r0, sp, #56	; 0x38
 80a06b0:	f001 fdcd 	bl	80a224e <_ZN6StringC1Eih>
    laddare1 = digitalRead(D0);
 80a06b4:	4648      	mov	r0, r9
 80a06b6:	f002 fc31 	bl	80a2f1c <digitalRead>
 80a06ba:	4c4a      	ldr	r4, [pc, #296]	; (80a07e4 <loop+0x2ec>)
 80a06bc:	ebb0 0009 	subs.w	r0, r0, r9
 80a06c0:	bf18      	it	ne
 80a06c2:	2001      	movne	r0, #1
 80a06c4:	7020      	strb	r0, [r4, #0]
    laddare2 = digitalRead(D1);
 80a06c6:	4628      	mov	r0, r5
 80a06c8:	f002 fc28 	bl	80a2f1c <digitalRead>
 80a06cc:	4b46      	ldr	r3, [pc, #280]	; (80a07e8 <loop+0x2f0>)
 80a06ce:	ebb0 0009 	subs.w	r0, r0, r9
 80a06d2:	bf18      	it	ne
 80a06d4:	2001      	movne	r0, #1
 80a06d6:	7018      	strb	r0, [r3, #0]
    laddare3 = digitalRead(D2);
 80a06d8:	2002      	movs	r0, #2
 80a06da:	f002 fc1f 	bl	80a2f1c <digitalRead>
 80a06de:	4b43      	ldr	r3, [pc, #268]	; (80a07ec <loop+0x2f4>)
 80a06e0:	ebb0 0009 	subs.w	r0, r0, r9
    if (laddare1) {
 80a06e4:	7822      	ldrb	r2, [r4, #0]
 // Particle.publish("batteryVoltage", "13,9", PRIVATE); // publish to cloud

    String temp3 = String(cykelId); // store "CykelId" in string
    laddare1 = digitalRead(D0);
    laddare2 = digitalRead(D1);
    laddare3 = digitalRead(D2);
 80a06e6:	bf18      	it	ne
 80a06e8:	2001      	movne	r0, #1
 80a06ea:	7018      	strb	r0, [r3, #0]
 80a06ec:	4634      	mov	r4, r6
    if (laddare1) {
 80a06ee:	b9b2      	cbnz	r2, 80a071e <loop+0x226>
 80a06f0:	f898 3000 	ldrb.w	r3, [r8]
    }
    else {
       Particle.publish( "laddare1/cykelId", temp3, PRIVATE);
 80a06f4:	493e      	ldr	r1, [pc, #248]	; (80a07f0 <loop+0x2f8>)
 80a06f6:	f88d 2000 	strb.w	r2, [sp]
 80a06fa:	a812      	add	r0, sp, #72	; 0x48
 80a06fc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80a06fe:	f7ff fe18 	bl	80a0332 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.7.constprop.11>
 80a0702:	a813      	add	r0, sp, #76	; 0x4c
 80a0704:	f7ff fe68 	bl	80a03d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
       mqttPublish("laddare1/cykelId", temp3);
 80a0708:	a90e      	add	r1, sp, #56	; 0x38
 80a070a:	a812      	add	r0, sp, #72	; 0x48
 80a070c:	f001 fd83 	bl	80a2216 <_ZN6StringC1ERKS_>
 80a0710:	4837      	ldr	r0, [pc, #220]	; (80a07f0 <loop+0x2f8>)
 80a0712:	a912      	add	r1, sp, #72	; 0x48
 80a0714:	f7ff fe30 	bl	80a0378 <_Z11mqttPublishPc6String>
 80a0718:	a812      	add	r0, sp, #72	; 0x48
 80a071a:	f001 fd13 	bl	80a2144 <_ZN6StringD1Ev>
    }
   if (laddare2) {
 80a071e:	4b32      	ldr	r3, [pc, #200]	; (80a07e8 <loop+0x2f0>)
 80a0720:	781a      	ldrb	r2, [r3, #0]
 80a0722:	b9b2      	cbnz	r2, 80a0752 <loop+0x25a>
 80a0724:	f898 3000 	ldrb.w	r3, [r8]
    }
    else {
       Particle.publish( "laddare2/cykelId", temp3, PRIVATE);
 80a0728:	4932      	ldr	r1, [pc, #200]	; (80a07f4 <loop+0x2fc>)
 80a072a:	f88d 2000 	strb.w	r2, [sp]
 80a072e:	a812      	add	r0, sp, #72	; 0x48
 80a0730:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80a0732:	f7ff fdfe 	bl	80a0332 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.7.constprop.11>
 80a0736:	a813      	add	r0, sp, #76	; 0x4c
 80a0738:	f7ff fe4e 	bl	80a03d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
       mqttPublish("laddare2/cykelId", temp3);
 80a073c:	a90e      	add	r1, sp, #56	; 0x38
 80a073e:	a812      	add	r0, sp, #72	; 0x48
 80a0740:	f001 fd69 	bl	80a2216 <_ZN6StringC1ERKS_>
 80a0744:	482b      	ldr	r0, [pc, #172]	; (80a07f4 <loop+0x2fc>)
 80a0746:	a912      	add	r1, sp, #72	; 0x48
 80a0748:	f7ff fe16 	bl	80a0378 <_Z11mqttPublishPc6String>
 80a074c:	a812      	add	r0, sp, #72	; 0x48
 80a074e:	f001 fcf9 	bl	80a2144 <_ZN6StringD1Ev>
    }
   if (laddare3) {
 80a0752:	4b26      	ldr	r3, [pc, #152]	; (80a07ec <loop+0x2f4>)
 80a0754:	781a      	ldrb	r2, [r3, #0]
 80a0756:	b9b2      	cbnz	r2, 80a0786 <loop+0x28e>
 80a0758:	f898 3000 	ldrb.w	r3, [r8]
    }
    else {
       Particle.publish( "laddare3/cykelId", temp3, PRIVATE);
 80a075c:	4926      	ldr	r1, [pc, #152]	; (80a07f8 <loop+0x300>)
 80a075e:	f88d 2000 	strb.w	r2, [sp]
 80a0762:	a812      	add	r0, sp, #72	; 0x48
 80a0764:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80a0766:	f7ff fde4 	bl	80a0332 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.7.constprop.11>
 80a076a:	a813      	add	r0, sp, #76	; 0x4c
 80a076c:	f7ff fe34 	bl	80a03d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
       mqttPublish("laddare3/cykelId", temp3);
 80a0770:	a90e      	add	r1, sp, #56	; 0x38
 80a0772:	a812      	add	r0, sp, #72	; 0x48
 80a0774:	f001 fd4f 	bl	80a2216 <_ZN6StringC1ERKS_>
 80a0778:	481f      	ldr	r0, [pc, #124]	; (80a07f8 <loop+0x300>)
 80a077a:	a912      	add	r1, sp, #72	; 0x48
 80a077c:	f7ff fdfc 	bl	80a0378 <_Z11mqttPublishPc6String>
 80a0780:	a812      	add	r0, sp, #72	; 0x48
 80a0782:	f001 fcdf 	bl	80a2144 <_ZN6StringD1Ev>
    }
    
    cykelId = cykelId + 1;
 80a0786:	6823      	ldr	r3, [r4, #0]
  mqttPublish("batteryVoltage", temp2);
  mqttPublish("chargeAmp" , temp4);
  mqttPublish("solarPower" , temp5);
 // Particle.publish("batteryVoltage", "13,9", PRIVATE); // publish to cloud

    String temp3 = String(cykelId); // store "CykelId" in string
 80a0788:	a80e      	add	r0, sp, #56	; 0x38
    else {
       Particle.publish( "laddare3/cykelId", temp3, PRIVATE);
       mqttPublish("laddare3/cykelId", temp3);
    }
    
    cykelId = cykelId + 1;
 80a078a:	3301      	adds	r3, #1
 80a078c:	6023      	str	r3, [r4, #0]
  mqttPublish("batteryVoltage", temp2);
  mqttPublish("chargeAmp" , temp4);
  mqttPublish("solarPower" , temp5);
 // Particle.publish("batteryVoltage", "13,9", PRIVATE); // publish to cloud

    String temp3 = String(cykelId); // store "CykelId" in string
 80a078e:	f001 fcd9 	bl	80a2144 <_ZN6StringD1Ev>
  // Publicera till particle cloud
  String temp2 = String(batteryVoltage,1); // store voltage in "batteryVoltage" string
  Particle.publish("batteryVoltage", temp2, PRIVATE); // publish to cloud
  String temp4 = String(chargeAmp,1); // store ampere in "chargeAmp" string
  Particle.publish("chargeAmp", temp4, PRIVATE); // publish to cloud
  String temp5 = String(solarPower,1); // store ampere in "chargeAmp" string
 80a0792:	a80a      	add	r0, sp, #40	; 0x28
 80a0794:	f001 fcd6 	bl	80a2144 <_ZN6StringD1Ev>

  
  // Publicera till particle cloud
  String temp2 = String(batteryVoltage,1); // store voltage in "batteryVoltage" string
  Particle.publish("batteryVoltage", temp2, PRIVATE); // publish to cloud
  String temp4 = String(chargeAmp,1); // store ampere in "chargeAmp" string
 80a0798:	a806      	add	r0, sp, #24
 80a079a:	f001 fcd3 	bl	80a2144 <_ZN6StringD1Ev>
  //delay(1000);


  
  // Publicera till particle cloud
  String temp2 = String(batteryVoltage,1); // store voltage in "batteryVoltage" string
 80a079e:	a802      	add	r0, sp, #8
 80a07a0:	f001 fcd0 	bl	80a2144 <_ZN6StringD1Ev>
    cykelId = cykelId + 1;
//delay (3600);
//delay (360000); // 5 minute delay
 
 
}
 80a07a4:	b017      	add	sp, #92	; 0x5c
 80a07a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a07aa:	bf00      	nop
 80a07ac:	20000404 	.word	0x20000404
 80a07b0:	20000374 	.word	0x20000374
 80a07b4:	200003e8 	.word	0x200003e8
 80a07b8:	200003fc 	.word	0x200003fc
 80a07bc:	200003ec 	.word	0x200003ec
 80a07c0:	20000380 	.word	0x20000380
 80a07c4:	20000300 	.word	0x20000300
 80a07c8:	200003d8 	.word	0x200003d8
 80a07cc:	080a47eb 	.word	0x080a47eb
 80a07d0:	080a47fc 	.word	0x080a47fc
 80a07d4:	080a4804 	.word	0x080a4804
 80a07d8:	080a4813 	.word	0x080a4813
 80a07dc:	080a481d 	.word	0x080a481d
 80a07e0:	200003f4 	.word	0x200003f4
 80a07e4:	20000408 	.word	0x20000408
 80a07e8:	20000409 	.word	0x20000409
 80a07ec:	2000040a 	.word	0x2000040a
 80a07f0:	080a4828 	.word	0x080a4828
 80a07f4:	080a4839 	.word	0x080a4839
 80a07f8:	080a484a 	.word	0x080a484a
 80a07fc:	200003f0 	.word	0x200003f0

080a0800 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>:
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
 80a0800:	4602      	mov	r2, r0
 80a0802:	4801      	ldr	r0, [pc, #4]	; (80a0808 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_+0x8>)
 80a0804:	f000 bfac 	b.w	80a1760 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80a0808:	080a1735 	.word	0x080a1735

080a080c <setup>:
//  setMessage(p);
    forceReading = 1;
}

// setup() runs once, when the device is first turned on.
void setup() {
 80a080c:	b500      	push	{lr}
  // Put initialization like pinMode and begin functions here.
    pinMode(D7, OUTPUT);
 80a080e:	2101      	movs	r1, #1
//  setMessage(p);
    forceReading = 1;
}

// setup() runs once, when the device is first turned on.
void setup() {
 80a0810:	b089      	sub	sp, #36	; 0x24
  // Put initialization like pinMode and begin functions here.
    pinMode(D7, OUTPUT);
 80a0812:	2007      	movs	r0, #7
 80a0814:	f002 fb58 	bl	80a2ec8 <pinMode>
    Particle.function("doLED", doLED);
 80a0818:	493a      	ldr	r1, [pc, #232]	; (80a0904 <setup+0xf8>)
 80a081a:	483b      	ldr	r0, [pc, #236]	; (80a0908 <setup+0xfc>)
 80a081c:	f7ff fff0 	bl	80a0800 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
 80a0820:	2300      	movs	r3, #0
 80a0822:	2202      	movs	r2, #2
 80a0824:	4939      	ldr	r1, [pc, #228]	; (80a090c <setup+0x100>)
 80a0826:	483a      	ldr	r0, [pc, #232]	; (80a0910 <setup+0x104>)
 80a0828:	f000 fed0 	bl	80a15cc <spark_variable>
 80a082c:	2300      	movs	r3, #0
 80a082e:	2202      	movs	r2, #2
 80a0830:	4938      	ldr	r1, [pc, #224]	; (80a0914 <setup+0x108>)
 80a0832:	4839      	ldr	r0, [pc, #228]	; (80a0918 <setup+0x10c>)
 80a0834:	f000 feca 	bl	80a15cc <spark_variable>
    Particle.variable("bValue", bValue);
	
	//Setup the Tinker application here

	//Register all the Tinker functions
	Particle.function("digitalread", tinkerDigitalRead);
 80a0838:	4938      	ldr	r1, [pc, #224]	; (80a091c <setup+0x110>)
 80a083a:	4839      	ldr	r0, [pc, #228]	; (80a0920 <setup+0x114>)
 80a083c:	f7ff ffe0 	bl	80a0800 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
	Particle.function("digitalwrite", tinkerDigitalWrite);
 80a0840:	4938      	ldr	r1, [pc, #224]	; (80a0924 <setup+0x118>)
 80a0842:	4839      	ldr	r0, [pc, #228]	; (80a0928 <setup+0x11c>)
 80a0844:	f7ff ffdc 	bl	80a0800 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
	Particle.function("analogread", tinkerAnalogRead);
 80a0848:	4938      	ldr	r1, [pc, #224]	; (80a092c <setup+0x120>)
 80a084a:	4839      	ldr	r0, [pc, #228]	; (80a0930 <setup+0x124>)
 80a084c:	f7ff ffd8 	bl	80a0800 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
	Particle.function("analogwrite", tinkerAnalogWrite);
 80a0850:	4938      	ldr	r1, [pc, #224]	; (80a0934 <setup+0x128>)
 80a0852:	4839      	ldr	r0, [pc, #228]	; (80a0938 <setup+0x12c>)
 80a0854:	f7ff ffd4 	bl	80a0800 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
    //Set up serial communication with Particle on Pin Rx/Tx
    Serial1.begin(9600);      // open the serial port at 9600 bps:
 80a0858:	f002 f8de 	bl	80a2a18 <_Z22__fetch_global_Serial1v>
 80a085c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a0860:	f002 f8d0 	bl	80a2a04 <_ZN11USARTSerial5beginEm>
    //Testar en Cloudvariable för att se hur den kan användas och var den syns
    Particle.publish("my-event","The internet just got smarter!");
 80a0864:	4935      	ldr	r1, [pc, #212]	; (80a093c <setup+0x130>)
 80a0866:	a804      	add	r0, sp, #16
 80a0868:	f7ff fd70 	bl	80a034c <_ZN10CloudClass7publishEPKcS1_.isra.8.constprop.10>
 80a086c:	a805      	add	r0, sp, #20
 80a086e:	f7ff fdb3 	bl	80a03d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    pinMode(D0, INPUT_PULLUP);
 80a0872:	2102      	movs	r1, #2
 80a0874:	2000      	movs	r0, #0
 80a0876:	f002 fb27 	bl	80a2ec8 <pinMode>
    pinMode(D1, INPUT_PULLUP);
 80a087a:	2102      	movs	r1, #2
 80a087c:	2001      	movs	r0, #1
 80a087e:	f002 fb23 	bl	80a2ec8 <pinMode>
    pinMode(D2, INPUT_PULLUP);
 80a0882:	2102      	movs	r1, #2
 80a0884:	4608      	mov	r0, r1
 80a0886:	f002 fb1f 	bl	80a2ec8 <pinMode>
    pinMode(D3, OUTPUT);
 80a088a:	2101      	movs	r1, #1
 80a088c:	2003      	movs	r0, #3
 80a088e:	f002 fb1b 	bl	80a2ec8 <pinMode>
    pinMode(A0, INPUT);
 80a0892:	2100      	movs	r1, #0
 80a0894:	200a      	movs	r0, #10
 80a0896:	f002 fb17 	bl	80a2ec8 <pinMode>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a089a:	4929      	ldr	r1, [pc, #164]	; (80a0940 <setup+0x134>)
 80a089c:	a804      	add	r0, sp, #16
 80a089e:	f001 fc98 	bl	80a21d2 <_ZN6StringC1EPK19__FlashStringHelper>
    
    // connect to the server(unique id by Time.now())
    client.connect("x042_" + String(Time.now()));
 80a08a2:	f002 f859 	bl	80a2958 <_ZN9TimeClass3nowEv>
 80a08a6:	220a      	movs	r2, #10
 80a08a8:	4601      	mov	r1, r0
 80a08aa:	4668      	mov	r0, sp
 80a08ac:	f001 fce2 	bl	80a2274 <_ZN6StringC1Elh>
 80a08b0:	4669      	mov	r1, sp
 80a08b2:	a804      	add	r0, sp, #16
 80a08b4:	f001 fd1f 	bl	80a22f6 <_ZplRK15StringSumHelperRK6String>
 80a08b8:	6801      	ldr	r1, [r0, #0]
 80a08ba:	4822      	ldr	r0, [pc, #136]	; (80a0944 <setup+0x138>)
 80a08bc:	f000 fa9a 	bl	80a0df4 <_ZN4MQTT7connectEPKc>
 80a08c0:	4668      	mov	r0, sp
 80a08c2:	f001 fc3f 	bl	80a2144 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a08c6:	a804      	add	r0, sp, #16
 80a08c8:	f001 fc3c 	bl	80a2144 <_ZN6StringD1Ev>
    if (client.isConnected()) {
 80a08cc:	481d      	ldr	r0, [pc, #116]	; (80a0944 <setup+0x138>)
 80a08ce:	f000 f9ac 	bl	80a0c2a <_ZN4MQTT11isConnectedEv>
 80a08d2:	b118      	cbz	r0, 80a08dc <setup+0xd0>
        client.subscribe("updateStats");
 80a08d4:	491c      	ldr	r1, [pc, #112]	; (80a0948 <setup+0x13c>)
 80a08d6:	481b      	ldr	r0, [pc, #108]	; (80a0944 <setup+0x138>)
 80a08d8:	f000 fc7e 	bl	80a11d8 <_ZN4MQTT9subscribeEPKc>
    }
    mqttPublish("my-event", "MQTT connected");
 80a08dc:	491b      	ldr	r1, [pc, #108]	; (80a094c <setup+0x140>)
 80a08de:	a804      	add	r0, sp, #16
 80a08e0:	f001 fc77 	bl	80a21d2 <_ZN6StringC1EPK19__FlashStringHelper>
 80a08e4:	a904      	add	r1, sp, #16
 80a08e6:	481a      	ldr	r0, [pc, #104]	; (80a0950 <setup+0x144>)
 80a08e8:	f7ff fd46 	bl	80a0378 <_Z11mqttPublishPc6String>
 80a08ec:	a804      	add	r0, sp, #16
 80a08ee:	f001 fc29 	bl	80a2144 <_ZN6StringD1Ev>
 80a08f2:	f000 fca5 	bl	80a1240 <HAL_Timer_Get_Milli_Seconds>
  // Control
  //

  // Calling start on a running timer will reset the timer.
  inline void start() {
    this->_start = millis();
 80a08f6:	4b17      	ldr	r3, [pc, #92]	; (80a0954 <setup+0x148>)
    this->_running = true;
 80a08f8:	2201      	movs	r2, #1
  // Control
  //

  // Calling start on a running timer will reset the timer.
  inline void start() {
    this->_start = millis();
 80a08fa:	6058      	str	r0, [r3, #4]
    this->_running = true;
 80a08fc:	701a      	strb	r2, [r3, #0]

    batteryTimer.start();
}
 80a08fe:	b009      	add	sp, #36	; 0x24
 80a0900:	f85d fb04 	ldr.w	pc, [sp], #4
 80a0904:	080a031d 	.word	0x080a031d
 80a0908:	080a485b 	.word	0x080a485b
 80a090c:	20000404 	.word	0x20000404
 80a0910:	080a4861 	.word	0x080a4861
 80a0914:	200003fc 	.word	0x200003fc
 80a0918:	080a4868 	.word	0x080a4868
 80a091c:	080a00c9 	.word	0x080a00c9
 80a0920:	080a486f 	.word	0x080a486f
 80a0924:	080a01b1 	.word	0x080a01b1
 80a0928:	080a487b 	.word	0x080a487b
 80a092c:	080a0141 	.word	0x080a0141
 80a0930:	080a4888 	.word	0x080a4888
 80a0934:	080a0275 	.word	0x080a0275
 80a0938:	080a4893 	.word	0x080a4893
 80a093c:	080a489f 	.word	0x080a489f
 80a0940:	080a47dc 	.word	0x080a47dc
 80a0944:	20000380 	.word	0x20000380
 80a0948:	080a48be 	.word	0x080a48be
 80a094c:	080a48ca 	.word	0x080a48ca
 80a0950:	080a47d3 	.word	0x080a47d3
 80a0954:	200003d8 	.word	0x200003d8

080a0958 <_GLOBAL__sub_I___appProductID>:
}
    // Integration from Node-red
   int doLED(String cmd) {
    bool ledState = atoi(cmd);
    digitalWrite(D7, ledState);
 80a0958:	b538      	push	{r3, r4, r5, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a095a:	4b14      	ldr	r3, [pc, #80]	; (80a09ac <_GLOBAL__sub_I___appProductID+0x54>)
 80a095c:	2400      	movs	r4, #0
 80a095e:	701c      	strb	r4, [r3, #0]
 80a0960:	4b13      	ldr	r3, [pc, #76]	; (80a09b0 <_GLOBAL__sub_I___appProductID+0x58>)
 80a0962:	2201      	movs	r2, #1
 80a0964:	701a      	strb	r2, [r3, #0]
int bValue = 0; //Node-red test av integration reading (A1)

int cykelId;

void callback(char *topic, byte *payload, unsigned int length);
MQTT client("skinny.skycharts.net", 1883, callback);
 80a0966:	4d13      	ldr	r5, [pc, #76]	; (80a09b4 <_GLOBAL__sub_I___appProductID+0x5c>)
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0968:	f000 fc82 	bl	80a1270 <HAL_Pin_Map>
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
 80a096c:	f002 fa70 	bl	80a2e50 <spark_protocol_instance>
 80a0970:	4623      	mov	r3, r4
 80a0972:	4622      	mov	r2, r4
 80a0974:	f240 419c 	movw	r1, #1180	; 0x49c
 80a0978:	f002 fa72 	bl	80a2e60 <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
 80a097c:	f002 fa68 	bl	80a2e50 <spark_protocol_instance>
 80a0980:	4623      	mov	r3, r4
 80a0982:	4622      	mov	r2, r4
 80a0984:	2102      	movs	r1, #2
 80a0986:	f002 fa73 	bl	80a2e70 <spark_protocol_set_product_firmware_version>
 80a098a:	4b0b      	ldr	r3, [pc, #44]	; (80a09b8 <_GLOBAL__sub_I___appProductID+0x60>)
 80a098c:	f240 725b 	movw	r2, #1883	; 0x75b
 80a0990:	490a      	ldr	r1, [pc, #40]	; (80a09bc <_GLOBAL__sub_I___appProductID+0x64>)
 80a0992:	4628      	mov	r0, r5
 80a0994:	f000 f862 	bl	80a0a5c <_ZN4MQTTC1EPctPFvS0_PhjE>
 80a0998:	4a09      	ldr	r2, [pc, #36]	; (80a09c0 <_GLOBAL__sub_I___appProductID+0x68>)
 80a099a:	490a      	ldr	r1, [pc, #40]	; (80a09c4 <_GLOBAL__sub_I___appProductID+0x6c>)
 80a099c:	4628      	mov	r0, r5
 80a099e:	f002 fb67 	bl	80a3070 <__aeabi_atexit>
#include "Particle.h"

class PollingTimer {
public:
  inline PollingTimer(unsigned long delay_millis, bool started=false) :
      _running(started), _delay(delay_millis) {};
 80a09a2:	4b09      	ldr	r3, [pc, #36]	; (80a09c8 <_GLOBAL__sub_I___appProductID+0x70>)
 80a09a4:	4a09      	ldr	r2, [pc, #36]	; (80a09cc <_GLOBAL__sub_I___appProductID+0x74>)
 80a09a6:	701c      	strb	r4, [r3, #0]
 80a09a8:	609a      	str	r2, [r3, #8]
 80a09aa:	bd38      	pop	{r3, r4, r5, pc}
 80a09ac:	20000378 	.word	0x20000378
 80a09b0:	200003f0 	.word	0x200003f0
 80a09b4:	20000380 	.word	0x20000380
 80a09b8:	080a00bd 	.word	0x080a00bd
 80a09bc:	080a48d9 	.word	0x080a48d9
 80a09c0:	20000370 	.word	0x20000370
 80a09c4:	080a11df 	.word	0x080a11df
 80a09c8:	200003d8 	.word	0x200003d8
 80a09cc:	00057e40 	.word	0x00057e40

080a09d0 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 80a09d0:	b538      	push	{r3, r4, r5, lr}
 80a09d2:	4b0b      	ldr	r3, [pc, #44]	; (80a0a00 <_ZN9TCPClientD1Ev+0x30>)
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a09d4:	6984      	ldr	r4, [r0, #24]
 80a09d6:	4605      	mov	r5, r0
 80a09d8:	6003      	str	r3, [r0, #0]
 80a09da:	b17c      	cbz	r4, 80a09fc <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a09dc:	6863      	ldr	r3, [r4, #4]
 80a09de:	3b01      	subs	r3, #1
 80a09e0:	6063      	str	r3, [r4, #4]
 80a09e2:	b95b      	cbnz	r3, 80a09fc <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
 80a09e4:	6823      	ldr	r3, [r4, #0]
 80a09e6:	4620      	mov	r0, r4
 80a09e8:	689b      	ldr	r3, [r3, #8]
 80a09ea:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a09ec:	68a3      	ldr	r3, [r4, #8]
 80a09ee:	3b01      	subs	r3, #1
 80a09f0:	60a3      	str	r3, [r4, #8]
 80a09f2:	b91b      	cbnz	r3, 80a09fc <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
 80a09f4:	6823      	ldr	r3, [r4, #0]
 80a09f6:	4620      	mov	r0, r4
 80a09f8:	68db      	ldr	r3, [r3, #12]
 80a09fa:	4798      	blx	r3
 80a09fc:	4628      	mov	r0, r5
 80a09fe:	bd38      	pop	{r3, r4, r5, pc}
 80a0a00:	080a4a7c 	.word	0x080a4a7c

080a0a04 <_ZN9TCPClientD0Ev>:
 80a0a04:	b510      	push	{r4, lr}
 80a0a06:	4604      	mov	r4, r0
 80a0a08:	f7ff ffe2 	bl	80a09d0 <_ZN9TCPClientD1Ev>
 80a0a0c:	4620      	mov	r0, r4
 80a0a0e:	f7ff fb48 	bl	80a00a2 <_ZdlPv>
 80a0a12:	4620      	mov	r0, r4
 80a0a14:	bd10      	pop	{r4, pc}

080a0a16 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>:

    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
 80a0a16:	b538      	push	{r3, r4, r5, lr}
 80a0a18:	461d      	mov	r5, r3
    this->callback = callback;
 80a0a1a:	9b05      	ldr	r3, [sp, #20]

    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
 80a0a1c:	4604      	mov	r4, r0
    this->callback = callback;
 80a0a1e:	6303      	str	r3, [r0, #48]	; 0x30
    this->qoscallback = NULL;
 80a0a20:	2300      	movs	r3, #0
 80a0a22:	6343      	str	r3, [r0, #52]	; 0x34
    if (ip != NULL)
 80a0a24:	b102      	cbz	r2, 80a0a28 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x12>
        this->ip = ip;
 80a0a26:	6482      	str	r2, [r0, #72]	; 0x48
    if (domain != NULL)
 80a0a28:	b119      	cbz	r1, 80a0a32 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x1c>
        this->domain = domain;
 80a0a2a:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a0a2e:	f001 fbfd 	bl	80a222c <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
 80a0a32:	9b04      	ldr	r3, [sp, #16]

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
    if (buffer != NULL)
 80a0a34:	69e0      	ldr	r0, [r4, #28]
    if (ip != NULL)
        this->ip = ip;
    if (domain != NULL)
        this->domain = domain;
    this->port = port;
    this->keepalive = keepalive;
 80a0a36:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
 80a0a38:	9b06      	ldr	r3, [sp, #24]
    this->qoscallback = NULL;
    if (ip != NULL)
        this->ip = ip;
    if (domain != NULL)
        this->domain = domain;
    this->port = port;
 80a0a3a:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
    this->keepalive = keepalive;

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
 80a0a3e:	2bff      	cmp	r3, #255	; 0xff
 80a0a40:	bfb8      	it	lt
 80a0a42:	23ff      	movlt	r3, #255	; 0xff
 80a0a44:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
 80a0a48:	b108      	cbz	r0, 80a0a4e <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x38>
      delete[] buffer;
 80a0a4a:	f7ff fb2c 	bl	80a00a6 <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
 80a0a4e:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
 80a0a52:	f7ff fb24 	bl	80a009e <_Znaj>
 80a0a56:	61e0      	str	r0, [r4, #28]
 80a0a58:	bd38      	pop	{r3, r4, r5, pc}
	...

080a0a5c <_ZN4MQTTC1EPctPFvS0_PhjE>:
#define MQTTQOS2_HEADER_MASK        (2 << 1)

#define DUP_FLAG_OFF_MASK           (0<<3)
#define DUP_FLAG_ON_MASK            (1<<3)

MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int)) {
 80a0a5c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80a0a60:	4604      	mov	r4, r0
 80a0a62:	4617      	mov	r7, r2
 80a0a64:	4698      	mov	r8, r3
 80a0a66:	460e      	mov	r6, r1
 80a0a68:	2500      	movs	r5, #0
 80a0a6a:	f001 fe65 	bl	80a2738 <_ZN9TCPClientC1Ev>
 80a0a6e:	61e5      	str	r5, [r4, #28]
 80a0a70:	490a      	ldr	r1, [pc, #40]	; (80a0a9c <_ZN4MQTTC1EPctPFvS0_PhjE+0x40>)
 80a0a72:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a0a76:	f001 fbac 	bl	80a21d2 <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, callback, MQTT_MAX_PACKET_SIZE);
 80a0a7a:	23ff      	movs	r3, #255	; 0xff
 80a0a7c:	9302      	str	r3, [sp, #8]
 80a0a7e:	230f      	movs	r3, #15
 80a0a80:	9300      	str	r3, [sp, #0]
 80a0a82:	4620      	mov	r0, r4
#define MQTTQOS2_HEADER_MASK        (2 << 1)

#define DUP_FLAG_OFF_MASK           (0<<3)
#define DUP_FLAG_ON_MASK            (1<<3)

MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int)) {
 80a0a84:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, callback, MQTT_MAX_PACKET_SIZE);
 80a0a86:	f8cd 8004 	str.w	r8, [sp, #4]
 80a0a8a:	463b      	mov	r3, r7
 80a0a8c:	462a      	mov	r2, r5
 80a0a8e:	4631      	mov	r1, r6
 80a0a90:	f7ff ffc1 	bl	80a0a16 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>
}
 80a0a94:	4620      	mov	r0, r4
 80a0a96:	b004      	add	sp, #16
 80a0a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0a9c:	080a496c 	.word	0x080a496c

080a0aa0 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
 80a0aa0:	b510      	push	{r4, lr}
 80a0aa2:	4604      	mov	r4, r0
    while(!_client.available()) {}
 80a0aa4:	4620      	mov	r0, r4
 80a0aa6:	f001 fdb7 	bl	80a2618 <_ZN9TCPClient9availableEv>
 80a0aaa:	2800      	cmp	r0, #0
 80a0aac:	d0fa      	beq.n	80a0aa4 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
 80a0aae:	4620      	mov	r0, r4
 80a0ab0:	f001 fd59 	bl	80a2566 <_ZN9TCPClient4readEv>
}
 80a0ab4:	b2c0      	uxtb	r0, r0
 80a0ab6:	bd10      	pop	{r4, pc}

080a0ab8 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
 80a0ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a0abc:	4605      	mov	r5, r0
    uint16_t len = 0;
    buffer[len++] = readByte();
 80a0abe:	69c4      	ldr	r4, [r0, #28]
uint8_t MQTT::readByte() {
    while(!_client.available()) {}
    return _client.read();
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
 80a0ac0:	468a      	mov	sl, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
 80a0ac2:	f7ff ffed 	bl	80a0aa0 <_ZN4MQTT8readByteEv>
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
 80a0ac6:	f04f 0801 	mov.w	r8, #1
    return _client.read();
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    buffer[len++] = readByte();
 80a0aca:	4646      	mov	r6, r8
 80a0acc:	7020      	strb	r0, [r4, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
 80a0ace:	69eb      	ldr	r3, [r5, #28]
    uint32_t multiplier = 1;
    uint16_t length = 0;
 80a0ad0:	2700      	movs	r7, #0
 80a0ad2:	f893 9000 	ldrb.w	r9, [r3]
 80a0ad6:	f009 09f0 	and.w	r9, r9, #240	; 0xf0
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
 80a0ada:	4628      	mov	r0, r5
 80a0adc:	f7ff ffe0 	bl	80a0aa0 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
 80a0ae0:	69eb      	ldr	r3, [r5, #28]
 80a0ae2:	1c74      	adds	r4, r6, #1
 80a0ae4:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
 80a0ae6:	f000 037f 	and.w	r3, r0, #127	; 0x7f
 80a0aea:	fb03 7708 	mla	r7, r3, r8, r7
        multiplier *= 128;
    } while ((digit & 128) != 0);
 80a0aee:	0603      	lsls	r3, r0, #24
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
 80a0af0:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
 80a0af2:	b2bf      	uxth	r7, r7
        multiplier *= 128;
 80a0af4:	ea4f 18c8 	mov.w	r8, r8, lsl #7
    } while ((digit & 128) != 0);
 80a0af8:	d501      	bpl.n	80a0afe <_ZN4MQTT10readPacketEPh+0x46>
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
 80a0afa:	4626      	mov	r6, r4
 80a0afc:	e7ed      	b.n	80a0ada <_ZN4MQTT10readPacketEPh+0x22>
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
 80a0afe:	1e63      	subs	r3, r4, #1

    if (isPublish) {
 80a0b00:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
        digit = readByte();
        buffer[len++] = digit;
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
 80a0b04:	f88a 3000 	strb.w	r3, [sl]

    if (isPublish) {
 80a0b08:	d113      	bne.n	80a0b32 <_ZN4MQTT10readPacketEPh+0x7a>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
 80a0b0a:	4628      	mov	r0, r5
 80a0b0c:	f8d5 801c 	ldr.w	r8, [r5, #28]
 80a0b10:	f7ff ffc6 	bl	80a0aa0 <_ZN4MQTT8readByteEv>
 80a0b14:	f808 0004 	strb.w	r0, [r8, r4]
        buffer[len++] = readByte();
 80a0b18:	4628      	mov	r0, r5
 80a0b1a:	f8d5 801c 	ldr.w	r8, [r5, #28]
 80a0b1e:	f7ff ffbf 	bl	80a0aa0 <_ZN4MQTT8readByteEv>
 80a0b22:	1cf4      	adds	r4, r6, #3
 80a0b24:	3602      	adds	r6, #2
 80a0b26:	b2b6      	uxth	r6, r6
 80a0b28:	b2a4      	uxth	r4, r4
 80a0b2a:	f808 0006 	strb.w	r0, [r8, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
 80a0b2e:	2302      	movs	r3, #2
 80a0b30:	e000      	b.n	80a0b34 <_ZN4MQTT10readPacketEPh+0x7c>
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;
 80a0b32:	2300      	movs	r3, #0
 80a0b34:	1b1b      	subs	r3, r3, r4
 80a0b36:	b29e      	uxth	r6, r3
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
 80a0b38:	19a3      	adds	r3, r4, r6
 80a0b3a:	b29b      	uxth	r3, r3
 80a0b3c:	429f      	cmp	r7, r3
 80a0b3e:	d90b      	bls.n	80a0b58 <_ZN4MQTT10readPacketEPh+0xa0>
        digit = readByte();
 80a0b40:	4628      	mov	r0, r5
 80a0b42:	f7ff ffad 	bl	80a0aa0 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
 80a0b46:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
 80a0b4a:	42a3      	cmp	r3, r4
            buffer[len] = digit;
 80a0b4c:	bf84      	itt	hi
 80a0b4e:	69eb      	ldrhi	r3, [r5, #28]
 80a0b50:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
 80a0b52:	3401      	adds	r4, #1
 80a0b54:	b2a4      	uxth	r4, r4
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
 80a0b56:	e7ef      	b.n	80a0b38 <_ZN4MQTT10readPacketEPh+0x80>
            buffer[len] = digit;
        }
        len++;
    }

    if (len > this->maxpacketsize) {
 80a0b58:	f8b5 0054 	ldrh.w	r0, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
 80a0b5c:	42a0      	cmp	r0, r4
 80a0b5e:	bf2c      	ite	cs
 80a0b60:	4620      	movcs	r0, r4
 80a0b62:	2000      	movcc	r0, #0
 80a0b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a0b68 <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
 80a0b68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a0b6a:	4607      	mov	r7, r0
 80a0b6c:	468e      	mov	lr, r1
 80a0b6e:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
 80a0b70:	461d      	mov	r5, r3
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
    uint8_t lenBuf[4];
    uint8_t llen = 0;
 80a0b72:	2400      	movs	r4, #0
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
 80a0b74:	f005 037f 	and.w	r3, r5, #127	; 0x7f
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 80a0b78:	a902      	add	r1, sp, #8
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
 80a0b7a:	09ed      	lsrs	r5, r5, #7
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 80a0b7c:	4421      	add	r1, r4
    uint16_t len = length;
    do {
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
 80a0b7e:	bf18      	it	ne
 80a0b80:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
        }
        lenBuf[pos++] = digit;
        llen++;
 80a0b84:	3401      	adds	r4, #1
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 80a0b86:	f801 3c04 	strb.w	r3, [r1, #-4]
        llen++;
 80a0b8a:	b2e4      	uxtb	r4, r4
    } while(len > 0);
 80a0b8c:	2d00      	cmp	r5, #0
 80a0b8e:	d1f1      	bne.n	80a0b74 <_ZN4MQTT5writeEhPht+0xc>

    buf[4-llen] = header;
 80a0b90:	f1c4 0304 	rsb	r3, r4, #4
 80a0b94:	18d1      	adds	r1, r2, r3
 80a0b96:	f802 e003 	strb.w	lr, [r2, r3]
    for (int i = 0; i < llen; i++) {
 80a0b9a:	42a5      	cmp	r5, r4
 80a0b9c:	da06      	bge.n	80a0bac <_ZN4MQTT5writeEhPht+0x44>
        buf[5-llen+i] = lenBuf[i];
 80a0b9e:	a801      	add	r0, sp, #4
 80a0ba0:	1b2b      	subs	r3, r5, r4
 80a0ba2:	5c28      	ldrb	r0, [r5, r0]
 80a0ba4:	4413      	add	r3, r2
 80a0ba6:	7158      	strb	r0, [r3, #5]
        lenBuf[pos++] = digit;
        llen++;
    } while(len > 0);

    buf[4-llen] = header;
    for (int i = 0; i < llen; i++) {
 80a0ba8:	3501      	adds	r5, #1
 80a0baa:	e7f6      	b.n	80a0b9a <_ZN4MQTT5writeEhPht+0x32>
        buf[5-llen+i] = lenBuf[i];
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
 80a0bac:	1c72      	adds	r2, r6, #1
 80a0bae:	4422      	add	r2, r4
 80a0bb0:	4638      	mov	r0, r7
 80a0bb2:	f001 fc4a 	bl	80a244a <_ZN9TCPClient5writeEPKhj>
 80a0bb6:	4605      	mov	r5, r0
 80a0bb8:	f000 fb42 	bl	80a1240 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
 80a0bbc:	3401      	adds	r4, #1
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
    }
    rc = _client.write(buf+(4-llen), length+1+llen);

    lastOutActivity = millis();
 80a0bbe:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
 80a0bc0:	4434      	add	r4, r6
 80a0bc2:	b2a8      	uxth	r0, r5
}
 80a0bc4:	1a23      	subs	r3, r4, r0
 80a0bc6:	4258      	negs	r0, r3
 80a0bc8:	4158      	adcs	r0, r3
 80a0bca:	b003      	add	sp, #12
 80a0bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0bce <_ZN4MQTT10disconnectEv>:
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
 80a0bce:	b510      	push	{r4, lr}
 80a0bd0:	4604      	mov	r4, r0
    buffer[0] = MQTTDISCONNECT;
 80a0bd2:	69c3      	ldr	r3, [r0, #28]
 80a0bd4:	22e0      	movs	r2, #224	; 0xe0
 80a0bd6:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0;
 80a0bd8:	69c3      	ldr	r3, [r0, #28]
 80a0bda:	2200      	movs	r2, #0
 80a0bdc:	705a      	strb	r2, [r3, #1]
    _client.write(buffer,2);
 80a0bde:	69c1      	ldr	r1, [r0, #28]
 80a0be0:	2202      	movs	r2, #2
 80a0be2:	f001 fc32 	bl	80a244a <_ZN9TCPClient5writeEPKhj>
    _client.stop();
 80a0be6:	4620      	mov	r0, r4
 80a0be8:	f001 fd54 	bl	80a2694 <_ZN9TCPClient4stopEv>
 80a0bec:	f000 fb28 	bl	80a1240 <HAL_Timer_Get_Milli_Seconds>
    lastInActivity = lastOutActivity = millis();
 80a0bf0:	6260      	str	r0, [r4, #36]	; 0x24
 80a0bf2:	62a0      	str	r0, [r4, #40]	; 0x28
 80a0bf4:	bd10      	pop	{r4, pc}

080a0bf6 <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
 80a0bf6:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
 80a0bf8:	460d      	mov	r5, r1
 80a0bfa:	3302      	adds	r3, #2
 80a0bfc:	b29b      	uxth	r3, r3
 80a0bfe:	1a6c      	subs	r4, r5, r1
    while (*idp && pos < this->maxpacketsize) {
 80a0c00:	f815 6b01 	ldrb.w	r6, [r5], #1
 80a0c04:	b2a4      	uxth	r4, r4
 80a0c06:	b13e      	cbz	r6, 80a0c18 <_ZN4MQTT11writeStringEPKcPht+0x22>
 80a0c08:	f8b0 7054 	ldrh.w	r7, [r0, #84]	; 0x54
 80a0c0c:	429f      	cmp	r7, r3
 80a0c0e:	d903      	bls.n	80a0c18 <_ZN4MQTT11writeStringEPKcPht+0x22>
        buf[pos++] = *idp++;
 80a0c10:	1c5c      	adds	r4, r3, #1
 80a0c12:	54d6      	strb	r6, [r2, r3]
 80a0c14:	b2a3      	uxth	r3, r4

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
    while (*idp && pos < this->maxpacketsize) {
 80a0c16:	e7f2      	b.n	80a0bfe <_ZN4MQTT11writeStringEPKcPht+0x8>
        buf[pos++] = *idp++;
        i++;
    }
    buf[pos-i-2] = (i >> 8);
 80a0c18:	1b19      	subs	r1, r3, r4
 80a0c1a:	440a      	add	r2, r1
 80a0c1c:	1221      	asrs	r1, r4, #8
 80a0c1e:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
 80a0c22:	f802 4c01 	strb.w	r4, [r2, #-1]
    return pos;
}
 80a0c26:	4618      	mov	r0, r3
 80a0c28:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0c2a <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
 80a0c2a:	b538      	push	{r3, r4, r5, lr}
 80a0c2c:	4605      	mov	r5, r0
    bool rc = (int)_client.connected();
 80a0c2e:	f001 fe35 	bl	80a289c <_ZN9TCPClient9connectedEv>
 80a0c32:	2800      	cmp	r0, #0
 80a0c34:	bf14      	ite	ne
 80a0c36:	2401      	movne	r4, #1
 80a0c38:	2400      	moveq	r4, #0
    if (!rc) _client.stop();
 80a0c3a:	d102      	bne.n	80a0c42 <_ZN4MQTT11isConnectedEv+0x18>
 80a0c3c:	4628      	mov	r0, r5
 80a0c3e:	f001 fd29 	bl	80a2694 <_ZN9TCPClient4stopEv>
    return rc;
}
 80a0c42:	4620      	mov	r0, r4
 80a0c44:	bd38      	pop	{r3, r4, r5, pc}
	...

080a0c48 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:

bool MQTT::connect(const char *id, const char *user, const char *pass) {
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
}

bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
 80a0c48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a0c4c:	b087      	sub	sp, #28
 80a0c4e:	4604      	mov	r4, r0
 80a0c50:	4689      	mov	r9, r1
 80a0c52:	4617      	mov	r7, r2
 80a0c54:	461e      	mov	r6, r3
 80a0c56:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    if (!isConnected()) {
 80a0c5a:	f7ff ffe6 	bl	80a0c2a <_ZN4MQTT11isConnectedEv>
 80a0c5e:	4605      	mov	r5, r0
 80a0c60:	2800      	cmp	r0, #0
 80a0c62:	f040 80bd 	bne.w	80a0de0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x198>
        int result = 0;
        if (ip == NULL)
 80a0c66:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80a0c68:	b939      	cbnz	r1, 80a0c7a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x32>
            result = _client.connect(this->domain.c_str(), this->port);
 80a0c6a:	4603      	mov	r3, r0
 80a0c6c:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 80a0c70:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80a0c72:	4620      	mov	r0, r4
 80a0c74:	f001 fc0a 	bl	80a248c <_ZN9TCPClient7connectEPKctm>
 80a0c78:	e009      	b.n	80a0c8e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x46>
        else
            result = _client.connect(this->ip, this->port);
 80a0c7a:	4668      	mov	r0, sp
 80a0c7c:	f001 f88a 	bl	80a1d94 <_ZN9IPAddressC1EPKh>
 80a0c80:	462b      	mov	r3, r5
 80a0c82:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 80a0c86:	4669      	mov	r1, sp
 80a0c88:	4620      	mov	r0, r4
 80a0c8a:	f001 fd5f 	bl	80a274c <_ZN9TCPClient7connectE9IPAddresstm>

        if (result) {
 80a0c8e:	2800      	cmp	r0, #0
 80a0c90:	f000 80a2 	beq.w	80a0dd8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
            nextMsgId = 1;
 80a0c94:	2301      	movs	r3, #1
 80a0c96:	8423      	strh	r3, [r4, #32]
            uint16_t length = 5;

            if (version == MQTT_V311) {
 80a0c98:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80a0c9c:	2b04      	cmp	r3, #4
 80a0c9e:	d115      	bne.n	80a0ccc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x84>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
 80a0ca0:	4b52      	ldr	r3, [pc, #328]	; (80a0dec <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a4>)
 80a0ca2:	6818      	ldr	r0, [r3, #0]
 80a0ca4:	889a      	ldrh	r2, [r3, #4]
 80a0ca6:	9000      	str	r0, [sp, #0]
 80a0ca8:	f8ad 2004 	strh.w	r2, [sp, #4]
 80a0cac:	799b      	ldrb	r3, [r3, #6]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
 80a0cae:	69e2      	ldr	r2, [r4, #28]
 80a0cb0:	9800      	ldr	r0, [sp, #0]
        if (result) {
            nextMsgId = 1;
            uint16_t length = 5;

            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
 80a0cb2:	f88d 3006 	strb.w	r3, [sp, #6]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
 80a0cb6:	f8c2 0005 	str.w	r0, [r2, #5]
 80a0cba:	1d53      	adds	r3, r2, #5
 80a0cbc:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80a0cc0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80a0cc4:	8099      	strh	r1, [r3, #4]
 80a0cc6:	719a      	strb	r2, [r3, #6]
                length+=sizeof(MQTT_HEADER_V311);
 80a0cc8:	230c      	movs	r3, #12
 80a0cca:	e012      	b.n	80a0cf2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            } else {
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
 80a0ccc:	466a      	mov	r2, sp
 80a0cce:	4b48      	ldr	r3, [pc, #288]	; (80a0df0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a8>)
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
 80a0cd0:	f8d4 c01c 	ldr.w	ip, [r4, #28]
            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
                length+=sizeof(MQTT_HEADER_V311);
            } else {
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
 80a0cd4:	6818      	ldr	r0, [r3, #0]
 80a0cd6:	6859      	ldr	r1, [r3, #4]
 80a0cd8:	7a1b      	ldrb	r3, [r3, #8]
 80a0cda:	c203      	stmia	r2!, {r0, r1}
 80a0cdc:	7013      	strb	r3, [r2, #0]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
 80a0cde:	466b      	mov	r3, sp
 80a0ce0:	cb03      	ldmia	r3!, {r0, r1}
 80a0ce2:	f8cc 0005 	str.w	r0, [ip, #5]
 80a0ce6:	f8cc 1009 	str.w	r1, [ip, #9]
 80a0cea:	7813      	ldrb	r3, [r2, #0]
 80a0cec:	f88c 300d 	strb.w	r3, [ip, #13]
                length+=sizeof(MQTT_HEADER_V31);
 80a0cf0:	230e      	movs	r3, #14
            }

            uint8_t v = 0;
            if (willTopic) {
 80a0cf2:	f1b8 0f00 	cmp.w	r8, #0
 80a0cf6:	d00a      	beq.n	80a0d0e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xc6>
                v = 0x06|(willQos<<3)|(willRetain<<5);
 80a0cf8:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 80a0cfc:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 80a0d00:	0152      	lsls	r2, r2, #5
 80a0d02:	f042 0206 	orr.w	r2, r2, #6
 80a0d06:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80a0d0a:	b2d2      	uxtb	r2, r2
 80a0d0c:	e000      	b.n	80a0d10 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xc8>
            } else {
                v = 0x02;
 80a0d0e:	2202      	movs	r2, #2
            }

            if (!cleanSession) {
 80a0d10:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 80a0d14:	b909      	cbnz	r1, 80a0d1a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xd2>
              v = v&0xfd;
 80a0d16:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
            }

            if(user != NULL) {
 80a0d1a:	b12f      	cbz	r7, 80a0d28 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe0>
                v = v|0x80;

                if(pass != NULL) {
 80a0d1c:	b916      	cbnz	r6, 80a0d24 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xdc>
            if (!cleanSession) {
              v = v&0xfd;
            }

            if(user != NULL) {
                v = v|0x80;
 80a0d1e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80a0d22:	e001      	b.n	80a0d28 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe0>

                if(pass != NULL) {
                    v = v|(0x80>>1);
 80a0d24:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
                }
            }

            buffer[length++] = v;
 80a0d28:	69e1      	ldr	r1, [r4, #28]

            buffer[length++] = ((this->keepalive) >> 8);
 80a0d2a:	1c58      	adds	r0, r3, #1
                if(pass != NULL) {
                    v = v|(0x80>>1);
                }
            }

            buffer[length++] = v;
 80a0d2c:	54ca      	strb	r2, [r1, r3]

            buffer[length++] = ((this->keepalive) >> 8);
 80a0d2e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80a0d30:	69e1      	ldr	r1, [r4, #28]
 80a0d32:	1212      	asrs	r2, r2, #8
 80a0d34:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
 80a0d36:	69e1      	ldr	r1, [r4, #28]
 80a0d38:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80a0d3a:	1c9a      	adds	r2, r3, #2
 80a0d3c:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
 80a0d3e:	3303      	adds	r3, #3
 80a0d40:	69e2      	ldr	r2, [r4, #28]
 80a0d42:	4649      	mov	r1, r9
 80a0d44:	4620      	mov	r0, r4
 80a0d46:	f7ff ff56 	bl	80a0bf6 <_ZN4MQTT11writeStringEPKcPht>
            if (willTopic) {
 80a0d4a:	f1b8 0f00 	cmp.w	r8, #0
 80a0d4e:	d00b      	beq.n	80a0d68 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x120>
                length = writeString(willTopic, buffer, length);
 80a0d50:	4603      	mov	r3, r0
 80a0d52:	69e2      	ldr	r2, [r4, #28]
 80a0d54:	4641      	mov	r1, r8
 80a0d56:	4620      	mov	r0, r4
 80a0d58:	f7ff ff4d 	bl	80a0bf6 <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
 80a0d5c:	69e2      	ldr	r2, [r4, #28]
 80a0d5e:	4603      	mov	r3, r0
 80a0d60:	9911      	ldr	r1, [sp, #68]	; 0x44
 80a0d62:	4620      	mov	r0, r4
 80a0d64:	f7ff ff47 	bl	80a0bf6 <_ZN4MQTT11writeStringEPKcPht>
            }

            if(user != NULL) {
 80a0d68:	b167      	cbz	r7, 80a0d84 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13c>
                length = writeString(user,buffer,length);
 80a0d6a:	4603      	mov	r3, r0
 80a0d6c:	69e2      	ldr	r2, [r4, #28]
 80a0d6e:	4639      	mov	r1, r7
 80a0d70:	4620      	mov	r0, r4
 80a0d72:	f7ff ff40 	bl	80a0bf6 <_ZN4MQTT11writeStringEPKcPht>
                if(pass != NULL) {
 80a0d76:	b12e      	cbz	r6, 80a0d84 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13c>
                    length = writeString(pass,buffer,length);
 80a0d78:	4603      	mov	r3, r0
 80a0d7a:	69e2      	ldr	r2, [r4, #28]
 80a0d7c:	4631      	mov	r1, r6
 80a0d7e:	4620      	mov	r0, r4
 80a0d80:	f7ff ff39 	bl	80a0bf6 <_ZN4MQTT11writeStringEPKcPht>
                }
            }

            write(MQTTCONNECT, buffer, length-5);
 80a0d84:	1f43      	subs	r3, r0, #5
 80a0d86:	b29b      	uxth	r3, r3
 80a0d88:	69e2      	ldr	r2, [r4, #28]
 80a0d8a:	2110      	movs	r1, #16
 80a0d8c:	4620      	mov	r0, r4
 80a0d8e:	f7ff feeb 	bl	80a0b68 <_ZN4MQTT5writeEhPht>
 80a0d92:	f000 fa55 	bl	80a1240 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();

            while (!_client.available()) {
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
 80a0d96:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
                    length = writeString(pass,buffer,length);
                }
            }

            write(MQTTCONNECT, buffer, length-5);
            lastInActivity = lastOutActivity = millis();
 80a0d9a:	6260      	str	r0, [r4, #36]	; 0x24
 80a0d9c:	62a0      	str	r0, [r4, #40]	; 0x28

            while (!_client.available()) {
 80a0d9e:	4620      	mov	r0, r4
 80a0da0:	f001 fc3a 	bl	80a2618 <_ZN9TCPClient9availableEv>
 80a0da4:	b940      	cbnz	r0, 80a0db8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x170>
 80a0da6:	f000 fa4b 	bl	80a1240 <HAL_Timer_Get_Milli_Seconds>
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
 80a0daa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80a0dac:	1ac0      	subs	r0, r0, r3
 80a0dae:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80a0db0:	4373      	muls	r3, r6
 80a0db2:	4298      	cmp	r0, r3
 80a0db4:	d9f3      	bls.n	80a0d9e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x156>
 80a0db6:	e00f      	b.n	80a0dd8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
                    _client.stop();
                    return false;
                }
            }
            uint8_t llen;
            uint16_t len = readPacket(&llen);
 80a0db8:	4669      	mov	r1, sp
 80a0dba:	4620      	mov	r0, r4
 80a0dbc:	f7ff fe7c 	bl	80a0ab8 <_ZN4MQTT10readPacketEPh>

            if (len == 4) {
 80a0dc0:	2804      	cmp	r0, #4
 80a0dc2:	d109      	bne.n	80a0dd8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
                if (buffer[3] == CONN_ACCEPT) {
 80a0dc4:	69e3      	ldr	r3, [r4, #28]
 80a0dc6:	78de      	ldrb	r6, [r3, #3]
 80a0dc8:	b936      	cbnz	r6, 80a0dd8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
 80a0dca:	f000 fa39 	bl	80a1240 <HAL_Timer_Get_Milli_Seconds>
                    lastInActivity = millis();
                    pingOutstanding = false;
                    debug_print(" Connect success\n");
                    return true;
 80a0dce:	2501      	movs	r5, #1
            uint8_t llen;
            uint16_t len = readPacket(&llen);

            if (len == 4) {
                if (buffer[3] == CONN_ACCEPT) {
                    lastInActivity = millis();
 80a0dd0:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
 80a0dd2:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
 80a0dd6:	e004      	b.n	80a0de2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x19a>
                    // check EMQTT_CONNACK_RESPONSE code.
                    debug_print(" Connect fail. code = [%d]\n", buffer[3]);
                }
            }
        }
        _client.stop();
 80a0dd8:	4620      	mov	r0, r4
 80a0dda:	f001 fc5b 	bl	80a2694 <_ZN9TCPClient4stopEv>
 80a0dde:	e000      	b.n	80a0de2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x19a>
    }
    return false;
 80a0de0:	2500      	movs	r5, #0
}
 80a0de2:	4628      	mov	r0, r5
 80a0de4:	b007      	add	sp, #28
 80a0de6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a0dea:	bf00      	nop
 80a0dec:	080a48ee 	.word	0x080a48ee
 80a0df0:	080a48f5 	.word	0x080a48f5

080a0df4 <_ZN4MQTT7connectEPKc>:
void MQTT::addQosCallback(void (*qoscallback)(unsigned int)) {
    this->qoscallback = qoscallback;
}


bool MQTT::connect(const char *id) {
 80a0df4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
 80a0df6:	2304      	movs	r3, #4
 80a0df8:	9305      	str	r3, [sp, #20]
 80a0dfa:	2301      	movs	r3, #1
 80a0dfc:	9304      	str	r3, [sp, #16]
 80a0dfe:	2300      	movs	r3, #0
 80a0e00:	9303      	str	r3, [sp, #12]
 80a0e02:	9302      	str	r3, [sp, #8]
 80a0e04:	9301      	str	r3, [sp, #4]
 80a0e06:	9300      	str	r3, [sp, #0]
 80a0e08:	461a      	mov	r2, r3
 80a0e0a:	f7ff ff1d 	bl	80a0c48 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
 80a0e0e:	b007      	add	sp, #28
 80a0e10:	f85d fb04 	ldr.w	pc, [sp], #4

080a0e14 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
 80a0e14:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0e18:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80a0e1a:	4604      	mov	r4, r0
 80a0e1c:	468b      	mov	fp, r1
 80a0e1e:	4691      	mov	r9, r2
 80a0e20:	469a      	mov	sl, r3
 80a0e22:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 80a0e26:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 80a0e2a:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
    if (isConnected()) {
 80a0e2e:	f7ff fefc 	bl	80a0c2a <_ZN4MQTT11isConnectedEv>
 80a0e32:	2800      	cmp	r0, #0
 80a0e34:	d04b      	beq.n	80a0ece <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xba>
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        memset(buffer, 0, this->maxpacketsize);
 80a0e36:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
 80a0e3a:	2100      	movs	r1, #0
 80a0e3c:	69e0      	ldr	r0, [r4, #28]
 80a0e3e:	f003 fbae 	bl	80a459e <memset>

        length = writeString(topic, buffer, length);
 80a0e42:	2305      	movs	r3, #5
 80a0e44:	69e2      	ldr	r2, [r4, #28]
 80a0e46:	4659      	mov	r1, fp
 80a0e48:	4620      	mov	r0, r4
 80a0e4a:	f7ff fed4 	bl	80a0bf6 <_ZN4MQTT11writeStringEPKcPht>

        if (qos == QOS2 || qos == QOS1) {
 80a0e4e:	1e6b      	subs	r3, r5, #1
 80a0e50:	2b01      	cmp	r3, #1
 80a0e52:	d812      	bhi.n	80a0e7a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x66>
            nextMsgId += 1;
 80a0e54:	8c23      	ldrh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 80a0e56:	69e2      	ldr	r2, [r4, #28]
        memset(buffer, 0, this->maxpacketsize);

        length = writeString(topic, buffer, length);

        if (qos == QOS2 || qos == QOS1) {
            nextMsgId += 1;
 80a0e58:	3301      	adds	r3, #1
 80a0e5a:	b29b      	uxth	r3, r3
 80a0e5c:	8423      	strh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 80a0e5e:	121b      	asrs	r3, r3, #8
 80a0e60:	5413      	strb	r3, [r2, r0]
 80a0e62:	1c41      	adds	r1, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
 80a0e64:	69e3      	ldr	r3, [r4, #28]
 80a0e66:	8c22      	ldrh	r2, [r4, #32]

        length = writeString(topic, buffer, length);

        if (qos == QOS2 || qos == QOS1) {
            nextMsgId += 1;
            buffer[length++] = (nextMsgId >> 8);
 80a0e68:	b289      	uxth	r1, r1
            buffer[length++] = (nextMsgId & 0xFF);
 80a0e6a:	3002      	adds	r0, #2
 80a0e6c:	b280      	uxth	r0, r0
 80a0e6e:	545a      	strb	r2, [r3, r1]
            if (messageid != NULL)
 80a0e70:	b11e      	cbz	r6, 80a0e7a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x66>
                *messageid = nextMsgId++;
 80a0e72:	8c23      	ldrh	r3, [r4, #32]
 80a0e74:	1c5a      	adds	r2, r3, #1
 80a0e76:	8422      	strh	r2, [r4, #32]
 80a0e78:	8033      	strh	r3, [r6, #0]

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
 80a0e7a:	2200      	movs	r2, #0
            buffer[length++] = (nextMsgId & 0xFF);
            if (messageid != NULL)
                *messageid = nextMsgId++;
        }

        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
 80a0e7c:	b291      	uxth	r1, r2
 80a0e7e:	1883      	adds	r3, r0, r2
 80a0e80:	458a      	cmp	sl, r1
 80a0e82:	b29b      	uxth	r3, r3
 80a0e84:	d909      	bls.n	80a0e9a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x86>
 80a0e86:	f8b4 6054 	ldrh.w	r6, [r4, #84]	; 0x54
 80a0e8a:	3201      	adds	r2, #1
 80a0e8c:	429e      	cmp	r6, r3
 80a0e8e:	d904      	bls.n	80a0e9a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x86>
            buffer[length++] = payload[i];
 80a0e90:	f819 6001 	ldrb.w	r6, [r9, r1]
 80a0e94:	69e1      	ldr	r1, [r4, #28]
 80a0e96:	54ce      	strb	r6, [r1, r3]
 80a0e98:	e7f0      	b.n	80a0e7c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x68>
        }

        uint8_t header = MQTTPUBLISH;
        if (retain) {
            header |= 1;
 80a0e9a:	f1b8 0f00 	cmp.w	r8, #0
 80a0e9e:	bf0c      	ite	eq
 80a0ea0:	2130      	moveq	r1, #48	; 0x30
 80a0ea2:	2131      	movne	r1, #49	; 0x31
        }

        if (dup) {
 80a0ea4:	b10f      	cbz	r7, 80a0eaa <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            header |= DUP_FLAG_ON_MASK;
 80a0ea6:	f041 0108 	orr.w	r1, r1, #8
        }

        if (qos == QOS2)
 80a0eaa:	2d02      	cmp	r5, #2
 80a0eac:	d102      	bne.n	80a0eb4 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xa0>
            header |= MQTTQOS2_HEADER_MASK;
 80a0eae:	f041 0104 	orr.w	r1, r1, #4
 80a0eb2:	e003      	b.n	80a0ebc <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xa8>
        else if (qos == QOS1)
 80a0eb4:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
 80a0eb6:	bf08      	it	eq
 80a0eb8:	f041 0102 	orreq.w	r1, r1, #2
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
 80a0ebc:	4620      	mov	r0, r4
 80a0ebe:	3b05      	subs	r3, #5
 80a0ec0:	69e2      	ldr	r2, [r4, #28]
 80a0ec2:	b29b      	uxth	r3, r3
    }
    return false;
}
 80a0ec4:	b001      	add	sp, #4
 80a0ec6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        else if (qos == QOS1)
            header |= MQTTQOS1_HEADER_MASK;
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
 80a0eca:	f7ff be4d 	b.w	80a0b68 <_ZN4MQTT5writeEhPht>
    }
    return false;
}
 80a0ece:	b001      	add	sp, #4
 80a0ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a0ed4 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain) {
    return publish(topic, payload, plength, retain, QOS0, NULL);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
 80a0ed4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
 80a0ed6:	9c08      	ldr	r4, [sp, #32]
 80a0ed8:	9403      	str	r4, [sp, #12]
 80a0eda:	2400      	movs	r4, #0
 80a0edc:	9402      	str	r4, [sp, #8]
 80a0ede:	f89d 401c 	ldrb.w	r4, [sp, #28]
 80a0ee2:	9401      	str	r4, [sp, #4]
 80a0ee4:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80a0ee8:	9400      	str	r4, [sp, #0]
 80a0eea:	f7ff ff93 	bl	80a0e14 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
 80a0eee:	b004      	add	sp, #16
 80a0ef0:	bd10      	pop	{r4, pc}

080a0ef2 <_ZN4MQTT7publishEPKcS1_>:
        return true;
    }
    return false;
}

bool MQTT::publish(const char* topic, const char* payload) {
 80a0ef2:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a0ef4:	4605      	mov	r5, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
 80a0ef6:	4610      	mov	r0, r2
        return true;
    }
    return false;
}

bool MQTT::publish(const char* topic, const char* payload) {
 80a0ef8:	460e      	mov	r6, r1
 80a0efa:	4614      	mov	r4, r2
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
 80a0efc:	f003 fbad 	bl	80a465a <strlen>
 80a0f00:	2300      	movs	r3, #0
 80a0f02:	9302      	str	r3, [sp, #8]
 80a0f04:	9301      	str	r3, [sp, #4]
 80a0f06:	9300      	str	r3, [sp, #0]
 80a0f08:	4622      	mov	r2, r4
 80a0f0a:	4603      	mov	r3, r0
 80a0f0c:	4631      	mov	r1, r6
 80a0f0e:	4628      	mov	r0, r5
 80a0f10:	f7ff ffe0 	bl	80a0ed4 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
 80a0f14:	b004      	add	sp, #16
 80a0f16:	bd70      	pop	{r4, r5, r6, pc}

080a0f18 <_ZN4MQTT14publishReleaseEt>:
        return write(header, buffer, length-5);
    }
    return false;
}

bool MQTT::publishRelease(uint16_t messageid) {
 80a0f18:	b538      	push	{r3, r4, r5, lr}
 80a0f1a:	4604      	mov	r4, r0
 80a0f1c:	460d      	mov	r5, r1
    if (isConnected()) {
 80a0f1e:	f7ff fe84 	bl	80a0c2a <_ZN4MQTT11isConnectedEv>
 80a0f22:	b190      	cbz	r0, 80a0f4a <_ZN4MQTT14publishReleaseEt+0x32>
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
 80a0f24:	69e3      	ldr	r3, [r4, #28]
 80a0f26:	2262      	movs	r2, #98	; 0x62
 80a0f28:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
 80a0f2a:	69e3      	ldr	r3, [r4, #28]
 80a0f2c:	2202      	movs	r2, #2
 80a0f2e:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
 80a0f30:	69e3      	ldr	r3, [r4, #28]
 80a0f32:	122a      	asrs	r2, r5, #8
 80a0f34:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
 80a0f36:	69e3      	ldr	r3, [r4, #28]
        return _client.write(buffer, length);
 80a0f38:	2204      	movs	r2, #4
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
        buffer[length++] = 2;
        buffer[length++] = (messageid >> 8);
        buffer[length++] = (messageid & 0xFF);
 80a0f3a:	70dd      	strb	r5, [r3, #3]
        return _client.write(buffer, length);
 80a0f3c:	69e1      	ldr	r1, [r4, #28]
 80a0f3e:	4620      	mov	r0, r4
 80a0f40:	f001 fa83 	bl	80a244a <_ZN9TCPClient5writeEPKhj>
 80a0f44:	3000      	adds	r0, #0
 80a0f46:	bf18      	it	ne
 80a0f48:	2001      	movne	r0, #1
    }
    return false;
}
 80a0f4a:	bd38      	pop	{r3, r4, r5, pc}

080a0f4c <_ZN4MQTT15publishCompleteEt>:

bool MQTT::publishComplete(uint16_t messageid) {
 80a0f4c:	b538      	push	{r3, r4, r5, lr}
 80a0f4e:	4604      	mov	r4, r0
 80a0f50:	460d      	mov	r5, r1
    if (isConnected()) {
 80a0f52:	f7ff fe6a 	bl	80a0c2a <_ZN4MQTT11isConnectedEv>
 80a0f56:	b190      	cbz	r0, 80a0f7e <_ZN4MQTT15publishCompleteEt+0x32>
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
 80a0f58:	69e3      	ldr	r3, [r4, #28]
 80a0f5a:	2272      	movs	r2, #114	; 0x72
 80a0f5c:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
 80a0f5e:	69e3      	ldr	r3, [r4, #28]
 80a0f60:	2202      	movs	r2, #2
 80a0f62:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
 80a0f64:	69e3      	ldr	r3, [r4, #28]
 80a0f66:	122a      	asrs	r2, r5, #8
 80a0f68:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
 80a0f6a:	69e3      	ldr	r3, [r4, #28]
        return _client.write(buffer, length);
 80a0f6c:	2204      	movs	r2, #4
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
        buffer[length++] = 2;
        buffer[length++] = (messageid >> 8);
        buffer[length++] = (messageid & 0xFF);
 80a0f6e:	70dd      	strb	r5, [r3, #3]
        return _client.write(buffer, length);
 80a0f70:	69e1      	ldr	r1, [r4, #28]
 80a0f72:	4620      	mov	r0, r4
 80a0f74:	f001 fa69 	bl	80a244a <_ZN9TCPClient5writeEPKhj>
 80a0f78:	3000      	adds	r0, #0
 80a0f7a:	bf18      	it	ne
 80a0f7c:	2001      	movne	r0, #1
    }
    return false;
}
 80a0f7e:	bd38      	pop	{r3, r4, r5, pc}

080a0f80 <_ZN4MQTT4loopEv>:
    }

    return len;
}

bool MQTT::loop() {
 80a0f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0f84:	b083      	sub	sp, #12
 80a0f86:	af00      	add	r7, sp, #0
 80a0f88:	4604      	mov	r4, r0
    if (isConnected()) {
 80a0f8a:	f7ff fe4e 	bl	80a0c2a <_ZN4MQTT11isConnectedEv>
 80a0f8e:	4681      	mov	r9, r0
 80a0f90:	2800      	cmp	r0, #0
 80a0f92:	f000 80f6 	beq.w	80a1182 <_ZN4MQTT4loopEv+0x202>
 80a0f96:	f000 f953 	bl	80a1240 <HAL_Timer_Get_Milli_Seconds>
        unsigned long t = millis();
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
 80a0f9a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80a0f9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0fa0:	4353      	muls	r3, r2
 80a0fa2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80a0fa4:	4605      	mov	r5, r0
 80a0fa6:	1a82      	subs	r2, r0, r2
 80a0fa8:	429a      	cmp	r2, r3
 80a0faa:	d803      	bhi.n	80a0fb4 <_ZN4MQTT4loopEv+0x34>
 80a0fac:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80a0fae:	1a82      	subs	r2, r0, r2
 80a0fb0:	4293      	cmp	r3, r2
 80a0fb2:	d217      	bcs.n	80a0fe4 <_ZN4MQTT4loopEv+0x64>
            if (pingOutstanding) {
 80a0fb4:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80a0fb8:	b12b      	cbz	r3, 80a0fc6 <_ZN4MQTT4loopEv+0x46>
                _client.stop();
 80a0fba:	4620      	mov	r0, r4
 80a0fbc:	f001 fb6a 	bl	80a2694 <_ZN9TCPClient4stopEv>
                return false;
 80a0fc0:	f04f 0900 	mov.w	r9, #0
 80a0fc4:	e0dd      	b.n	80a1182 <_ZN4MQTT4loopEv+0x202>
            } else {
                buffer[0] = MQTTPINGREQ;
 80a0fc6:	69e2      	ldr	r2, [r4, #28]
 80a0fc8:	21c0      	movs	r1, #192	; 0xc0
 80a0fca:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
 80a0fcc:	69e2      	ldr	r2, [r4, #28]
                _client.write(buffer,2);
 80a0fce:	4620      	mov	r0, r4
            if (pingOutstanding) {
                _client.stop();
                return false;
            } else {
                buffer[0] = MQTTPINGREQ;
                buffer[1] = 0;
 80a0fd0:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
 80a0fd2:	69e1      	ldr	r1, [r4, #28]
 80a0fd4:	2202      	movs	r2, #2
 80a0fd6:	f001 fa38 	bl	80a244a <_ZN9TCPClient5writeEPKhj>
                lastOutActivity = t;
                lastInActivity = t;
                pingOutstanding = true;
 80a0fda:	2301      	movs	r3, #1
                return false;
            } else {
                buffer[0] = MQTTPINGREQ;
                buffer[1] = 0;
                _client.write(buffer,2);
                lastOutActivity = t;
 80a0fdc:	6265      	str	r5, [r4, #36]	; 0x24
                lastInActivity = t;
 80a0fde:	62a5      	str	r5, [r4, #40]	; 0x28
                pingOutstanding = true;
 80a0fe0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
            }
        }
        if (_client.available()) {
 80a0fe4:	4620      	mov	r0, r4
 80a0fe6:	f001 fb17 	bl	80a2618 <_ZN9TCPClient9availableEv>
 80a0fea:	2800      	cmp	r0, #0
 80a0fec:	f000 80c9 	beq.w	80a1182 <_ZN4MQTT4loopEv+0x202>
            uint8_t llen;
            uint16_t len = readPacket(&llen);
 80a0ff0:	1df9      	adds	r1, r7, #7
 80a0ff2:	4620      	mov	r0, r4
 80a0ff4:	f7ff fd60 	bl	80a0ab8 <_ZN4MQTT10readPacketEPh>
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
 80a0ff8:	4602      	mov	r2, r0
 80a0ffa:	2800      	cmp	r0, #0
 80a0ffc:	f000 80c1 	beq.w	80a1182 <_ZN4MQTT4loopEv+0x202>
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
 80a1000:	69e3      	ldr	r3, [r4, #28]
            uint8_t llen;
            uint16_t len = readPacket(&llen);
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
                lastInActivity = t;
 80a1002:	62a5      	str	r5, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
 80a1004:	7818      	ldrb	r0, [r3, #0]
 80a1006:	f000 01f0 	and.w	r1, r0, #240	; 0xf0
                if (type == MQTTPUBLISH) {
 80a100a:	2930      	cmp	r1, #48	; 0x30
 80a100c:	d17d      	bne.n	80a110a <_ZN4MQTT4loopEv+0x18a>
                    if (callback) {
 80a100e:	f8d4 b030 	ldr.w	fp, [r4, #48]	; 0x30
 80a1012:	f1bb 0f00 	cmp.w	fp, #0
 80a1016:	f000 80b4 	beq.w	80a1182 <_ZN4MQTT4loopEv+0x202>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
 80a101a:	f897 c007 	ldrb.w	ip, [r7, #7]
              							_client.write(buffer, 4);
              							lastOutActivity = t;
            						} else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
                        }
 80a101e:	46ea      	mov	sl, sp
            if (len > 0) {
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
 80a1020:	eb03 000c 	add.w	r0, r3, ip
 80a1024:	7881      	ldrb	r1, [r0, #2]
 80a1026:	f890 e001 	ldrb.w	lr, [r0, #1]
 80a102a:	eb01 2e0e 	add.w	lr, r1, lr, lsl #8
 80a102e:	fa1f fe8e 	uxth.w	lr, lr
                        char topic[tl+1];
 80a1032:	f10e 0108 	add.w	r1, lr, #8
 80a1036:	f021 0107 	bic.w	r1, r1, #7
 80a103a:	ebad 0d01 	sub.w	sp, sp, r1
 80a103e:	4668      	mov	r0, sp
 80a1040:	2100      	movs	r1, #0
                        for (uint16_t i=0;i<tl;i++) {
 80a1042:	b28e      	uxth	r6, r1
 80a1044:	45b6      	cmp	lr, r6
 80a1046:	d906      	bls.n	80a1056 <_ZN4MQTT4loopEv+0xd6>
                            topic[i] = buffer[llen+3+i];
 80a1048:	eb0c 0601 	add.w	r6, ip, r1
 80a104c:	441e      	add	r6, r3
 80a104e:	78f6      	ldrb	r6, [r6, #3]
 80a1050:	5446      	strb	r6, [r0, r1]
 80a1052:	3101      	adds	r1, #1
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
                        char topic[tl+1];
                        for (uint16_t i=0;i<tl;i++) {
 80a1054:	e7f5      	b.n	80a1042 <_ZN4MQTT4loopEv+0xc2>
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
 80a1056:	2100      	movs	r1, #0
 80a1058:	f800 100e 	strb.w	r1, [r0, lr]
 80a105c:	781e      	ldrb	r6, [r3, #0]
 80a105e:	f10c 0103 	add.w	r1, ip, #3
 80a1062:	f006 0606 	and.w	r6, r6, #6
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
 80a1066:	2e02      	cmp	r6, #2
 80a1068:	ebcc 0202 	rsb	r2, ip, r2
 80a106c:	d11e      	bne.n	80a10ac <_ZN4MQTT4loopEv+0x12c>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a106e:	4471      	add	r1, lr
 80a1070:	f813 8001 	ldrb.w	r8, [r3, r1]
 80a1074:	4419      	add	r1, r3
 80a1076:	7849      	ldrb	r1, [r1, #1]
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
 80a1078:	ebce 0202 	rsb	r2, lr, r2
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a107c:	eb01 2808 	add.w	r8, r1, r8, lsl #8
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
 80a1080:	f10c 0105 	add.w	r1, ip, #5
 80a1084:	4471      	add	r1, lr
 80a1086:	3a05      	subs	r2, #5
 80a1088:	4419      	add	r1, r3
 80a108a:	47d8      	blx	fp

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
 80a108c:	69e3      	ldr	r3, [r4, #28]
 80a108e:	2240      	movs	r2, #64	; 0x40
 80a1090:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
 80a1092:	69e3      	ldr	r3, [r4, #28]
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a1094:	fa1f f888 	uxth.w	r8, r8
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
                            buffer[1] = 2;
 80a1098:	705e      	strb	r6, [r3, #1]
                            buffer[2] = (msgId >> 8);
 80a109a:	69e3      	ldr	r3, [r4, #28]
 80a109c:	ea4f 2228 	mov.w	r2, r8, asr #8
 80a10a0:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
 80a10a2:	69e3      	ldr	r3, [r4, #28]
                            _client.write(buffer,4);
 80a10a4:	2204      	movs	r2, #4
                            callback(topic,payload,len-llen-3-tl-2);

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
                            buffer[1] = 2;
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
 80a10a6:	f883 8003 	strb.w	r8, [r3, #3]
 80a10aa:	e020      	b.n	80a10ee <_ZN4MQTT4loopEv+0x16e>
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
 80a10ac:	2e04      	cmp	r6, #4
 80a10ae:	d124      	bne.n	80a10fa <_ZN4MQTT4loopEv+0x17a>
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
 80a10b0:	4471      	add	r1, lr
 80a10b2:	f813 8001 	ldrb.w	r8, [r3, r1]
 80a10b6:	4419      	add	r1, r3
 80a10b8:	7849      	ldrb	r1, [r1, #1]
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
 80a10ba:	ebce 0202 	rsb	r2, lr, r2
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
 80a10be:	eb01 2808 	add.w	r8, r1, r8, lsl #8
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
 80a10c2:	f10c 0105 	add.w	r1, ip, #5
 80a10c6:	4471      	add	r1, lr
 80a10c8:	3a05      	subs	r2, #5
 80a10ca:	4419      	add	r1, r3
 80a10cc:	47d8      	blx	fp

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
 80a10ce:	69e3      	ldr	r3, [r4, #28]
 80a10d0:	2250      	movs	r2, #80	; 0x50
 80a10d2:	701a      	strb	r2, [r3, #0]
              							buffer[1] = 2;
 80a10d4:	69e3      	ldr	r3, [r4, #28]
 80a10d6:	2202      	movs	r2, #2
 80a10d8:	705a      	strb	r2, [r3, #1]
              							buffer[2] = (msgId >> 8);
 80a10da:	69e3      	ldr	r3, [r4, #28]
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
 80a10dc:	fa1f f888 	uxth.w	r8, r8
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
              							buffer[1] = 2;
              							buffer[2] = (msgId >> 8);
 80a10e0:	ea4f 2228 	mov.w	r2, r8, asr #8
 80a10e4:	709a      	strb	r2, [r3, #2]
              							buffer[3] = (msgId & 0xFF);
              							_client.write(buffer, 4);
 80a10e6:	4632      	mov	r2, r6
							              callback(topic, payload, len - llen - 3 - tl - 2);

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
              							buffer[1] = 2;
              							buffer[2] = (msgId >> 8);
              							buffer[3] = (msgId & 0xFF);
 80a10e8:	69e3      	ldr	r3, [r4, #28]
 80a10ea:	f883 8003 	strb.w	r8, [r3, #3]
              							_client.write(buffer, 4);
 80a10ee:	69e1      	ldr	r1, [r4, #28]
 80a10f0:	4620      	mov	r0, r4
 80a10f2:	f001 f9aa 	bl	80a244a <_ZN9TCPClient5writeEPKhj>
              							lastOutActivity = t;
 80a10f6:	6265      	str	r5, [r4, #36]	; 0x24
 80a10f8:	e005      	b.n	80a1106 <_ZN4MQTT4loopEv+0x186>
            						} else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
 80a10fa:	3a03      	subs	r2, #3
 80a10fc:	4471      	add	r1, lr
 80a10fe:	ebce 0202 	rsb	r2, lr, r2
 80a1102:	4419      	add	r1, r3
 80a1104:	47d8      	blx	fp
 80a1106:	46d5      	mov	sp, sl
 80a1108:	e03b      	b.n	80a1182 <_ZN4MQTT4loopEv+0x202>
                        }
                    }
                } else if (type == MQTTPUBREC) {
 80a110a:	2950      	cmp	r1, #80	; 0x50
 80a110c:	d108      	bne.n	80a1120 <_ZN4MQTT4loopEv+0x1a0>
                    // check for the situation that QoS2 receive PUBREC, should return PUBREL
                    msgId = (buffer[2] << 8) + buffer[3];
                    this->publishRelease(msgId);
 80a110e:	7899      	ldrb	r1, [r3, #2]
 80a1110:	78db      	ldrb	r3, [r3, #3]
 80a1112:	4620      	mov	r0, r4
 80a1114:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 80a1118:	b289      	uxth	r1, r1
 80a111a:	f7ff fefd 	bl	80a0f18 <_ZN4MQTT14publishReleaseEt>
 80a111e:	e030      	b.n	80a1182 <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPUBACK) {
 80a1120:	2940      	cmp	r1, #64	; 0x40
 80a1122:	d00c      	beq.n	80a113e <_ZN4MQTT4loopEv+0x1be>
                        if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
                            msgId = (buffer[2]<<8)+buffer[3];
                            this->qoscallback(msgId);
                        }
                    }
                } else if (type == MQTTPUBREL) {
 80a1124:	2960      	cmp	r1, #96	; 0x60
 80a1126:	d108      	bne.n	80a113a <_ZN4MQTT4loopEv+0x1ba>
                  msgId = (buffer[2] << 8) + buffer[3];
                  this->publishComplete(msgId);
 80a1128:	7899      	ldrb	r1, [r3, #2]
 80a112a:	78db      	ldrb	r3, [r3, #3]
 80a112c:	4620      	mov	r0, r4
 80a112e:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 80a1132:	b289      	uxth	r1, r1
 80a1134:	f7ff ff0a 	bl	80a0f4c <_ZN4MQTT15publishCompleteEt>
 80a1138:	e023      	b.n	80a1182 <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPUBCOMP) {
 80a113a:	2970      	cmp	r1, #112	; 0x70
 80a113c:	d10d      	bne.n	80a115a <_ZN4MQTT4loopEv+0x1da>
                  if (qoscallback) {
 80a113e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80a1140:	b1f9      	cbz	r1, 80a1182 <_ZN4MQTT4loopEv+0x202>
                      // msgId only present for QOS==0
                      if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
 80a1142:	2a04      	cmp	r2, #4
 80a1144:	d11d      	bne.n	80a1182 <_ZN4MQTT4loopEv+0x202>
 80a1146:	f010 0f06 	tst.w	r0, #6
 80a114a:	d11a      	bne.n	80a1182 <_ZN4MQTT4loopEv+0x202>
                          msgId = (buffer[2]<<8)+buffer[3];
                          this->qoscallback(msgId);
 80a114c:	7898      	ldrb	r0, [r3, #2]
 80a114e:	78db      	ldrb	r3, [r3, #3]
 80a1150:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 80a1154:	b280      	uxth	r0, r0
 80a1156:	4788      	blx	r1
 80a1158:	e013      	b.n	80a1182 <_ZN4MQTT4loopEv+0x202>
                      }
                  }
                } else if (type == MQTTSUBACK) {
 80a115a:	2990      	cmp	r1, #144	; 0x90
 80a115c:	d011      	beq.n	80a1182 <_ZN4MQTT4loopEv+0x202>
                    // if something...
                } else if (type == MQTTPINGREQ) {
 80a115e:	29c0      	cmp	r1, #192	; 0xc0
 80a1160:	d10a      	bne.n	80a1178 <_ZN4MQTT4loopEv+0x1f8>
                    buffer[0] = MQTTPINGRESP;
 80a1162:	22d0      	movs	r2, #208	; 0xd0
 80a1164:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
 80a1166:	69e3      	ldr	r3, [r4, #28]
 80a1168:	2200      	movs	r2, #0
 80a116a:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
 80a116c:	69e1      	ldr	r1, [r4, #28]
 80a116e:	2202      	movs	r2, #2
 80a1170:	4620      	mov	r0, r4
 80a1172:	f001 f96a 	bl	80a244a <_ZN9TCPClient5writeEPKhj>
 80a1176:	e004      	b.n	80a1182 <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPINGRESP) {
 80a1178:	29d0      	cmp	r1, #208	; 0xd0
                    pingOutstanding = false;
 80a117a:	bf04      	itt	eq
 80a117c:	2300      	moveq	r3, #0
 80a117e:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
            }
        }
        return true;
    }
    return false;
}
 80a1182:	4648      	mov	r0, r9
 80a1184:	370c      	adds	r7, #12
 80a1186:	46bd      	mov	sp, r7
 80a1188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a118c <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:

bool MQTT::subscribe(const char* topic) {
    return subscribe(topic, QOS0);
}

bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
 80a118c:	b570      	push	{r4, r5, r6, lr}
 80a118e:	4604      	mov	r4, r0
 80a1190:	460e      	mov	r6, r1
 80a1192:	4615      	mov	r5, r2

    if (isConnected()) {
 80a1194:	f7ff fd49 	bl	80a0c2a <_ZN4MQTT11isConnectedEv>
 80a1198:	b1e8      	cbz	r0, 80a11d6 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x4a>
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        nextMsgId++;
 80a119a:	8c23      	ldrh	r3, [r4, #32]
 80a119c:	3301      	adds	r3, #1
 80a119e:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
 80a11a0:	b903      	cbnz	r3, 80a11a4 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x18>
            nextMsgId = 1;
 80a11a2:	2301      	movs	r3, #1
 80a11a4:	8423      	strh	r3, [r4, #32]
        }
        buffer[length++] = (nextMsgId >> 8);
 80a11a6:	8c23      	ldrh	r3, [r4, #32]
 80a11a8:	69e2      	ldr	r2, [r4, #28]
 80a11aa:	121b      	asrs	r3, r3, #8
 80a11ac:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
 80a11ae:	69e3      	ldr	r3, [r4, #28]
 80a11b0:	8c22      	ldrh	r2, [r4, #32]
        length = writeString(topic, buffer,length);
 80a11b2:	4631      	mov	r1, r6
        nextMsgId++;
        if (nextMsgId == 0) {
            nextMsgId = 1;
        }
        buffer[length++] = (nextMsgId >> 8);
        buffer[length++] = (nextMsgId & 0xFF);
 80a11b4:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
 80a11b6:	69e2      	ldr	r2, [r4, #28]
 80a11b8:	2307      	movs	r3, #7
 80a11ba:	4620      	mov	r0, r4
 80a11bc:	f7ff fd1b 	bl	80a0bf6 <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
 80a11c0:	69e3      	ldr	r3, [r4, #28]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
 80a11c2:	2182      	movs	r1, #130	; 0x82
            nextMsgId = 1;
        }
        buffer[length++] = (nextMsgId >> 8);
        buffer[length++] = (nextMsgId & 0xFF);
        length = writeString(topic, buffer,length);
        buffer[length++] = qos;
 80a11c4:	541d      	strb	r5, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
 80a11c6:	1f03      	subs	r3, r0, #4
 80a11c8:	69e2      	ldr	r2, [r4, #28]
 80a11ca:	4620      	mov	r0, r4
    }
    return false;
}
 80a11cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        }
        buffer[length++] = (nextMsgId >> 8);
        buffer[length++] = (nextMsgId & 0xFF);
        length = writeString(topic, buffer,length);
        buffer[length++] = qos;
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
 80a11d0:	b29b      	uxth	r3, r3
 80a11d2:	f7ff bcc9 	b.w	80a0b68 <_ZN4MQTT5writeEhPht>
    }
    return false;
}
 80a11d6:	bd70      	pop	{r4, r5, r6, pc}

080a11d8 <_ZN4MQTT9subscribeEPKc>:
    lastOutActivity = millis();
    return (rc == 1+llen+length);
}

bool MQTT::subscribe(const char* topic) {
    return subscribe(topic, QOS0);
 80a11d8:	2200      	movs	r2, #0
 80a11da:	f7ff bfd7 	b.w	80a118c <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>

080a11de <_ZN4MQTTD1Ev>:

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
 80a11de:	b510      	push	{r4, lr}
 80a11e0:	4604      	mov	r4, r0
    if (isConnected()) {
 80a11e2:	f7ff fd22 	bl	80a0c2a <_ZN4MQTT11isConnectedEv>
 80a11e6:	b110      	cbz	r0, 80a11ee <_ZN4MQTTD1Ev+0x10>
        disconnect();
 80a11e8:	4620      	mov	r0, r4
 80a11ea:	f7ff fcf0 	bl	80a0bce <_ZN4MQTT10disconnectEv>
    }

    if (buffer != NULL)
 80a11ee:	69e0      	ldr	r0, [r4, #28]
 80a11f0:	b108      	cbz	r0, 80a11f6 <_ZN4MQTTD1Ev+0x18>
      delete[] buffer;
 80a11f2:	f7fe ff58 	bl	80a00a6 <_ZdaPv>

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
 80a11f6:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a11fa:	f000 ffa3 	bl	80a2144 <_ZN6StringD1Ev>
 80a11fe:	4620      	mov	r0, r4
 80a1200:	f7ff fbe6 	bl	80a09d0 <_ZN9TCPClientD1Ev>
        disconnect();
    }

    if (buffer != NULL)
      delete[] buffer;
}
 80a1204:	4620      	mov	r0, r4
 80a1206:	bd10      	pop	{r4, pc}

080a1208 <_GLOBAL__sub_I__ZN4MQTTC2EPctPFvS0_PhjE>:
 80a1208:	f000 b832 	b.w	80a1270 <HAL_Pin_Map>

080a120c <_GLOBAL__sub_I_PollingTimer.cpp>:
 80a120c:	f000 b830 	b.w	80a1270 <HAL_Pin_Map>

080a1210 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a1210:	b508      	push	{r3, lr}
 80a1212:	4b02      	ldr	r3, [pc, #8]	; (80a121c <os_mutex_create+0xc>)
 80a1214:	681b      	ldr	r3, [r3, #0]
 80a1216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1218:	9301      	str	r3, [sp, #4]
 80a121a:	bd08      	pop	{r3, pc}
 80a121c:	080601d0 	.word	0x080601d0

080a1220 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
 80a1220:	b508      	push	{r3, lr}
 80a1222:	4b02      	ldr	r3, [pc, #8]	; (80a122c <HAL_Core_Get_Last_Reset_Info+0xc>)
 80a1224:	681b      	ldr	r3, [r3, #0]
 80a1226:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a1228:	9301      	str	r3, [sp, #4]
 80a122a:	bd08      	pop	{r3, pc}
 80a122c:	080601b8 	.word	0x080601b8

080a1230 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a1230:	b508      	push	{r3, lr}
 80a1232:	4b02      	ldr	r3, [pc, #8]	; (80a123c <HAL_RNG_GetRandomNumber+0xc>)
 80a1234:	681b      	ldr	r3, [r3, #0]
 80a1236:	685b      	ldr	r3, [r3, #4]
 80a1238:	9301      	str	r3, [sp, #4]
 80a123a:	bd08      	pop	{r3, pc}
 80a123c:	0806019c 	.word	0x0806019c

080a1240 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a1240:	b508      	push	{r3, lr}
 80a1242:	4b02      	ldr	r3, [pc, #8]	; (80a124c <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a1244:	681b      	ldr	r3, [r3, #0]
 80a1246:	695b      	ldr	r3, [r3, #20]
 80a1248:	9301      	str	r3, [sp, #4]
 80a124a:	bd08      	pop	{r3, pc}
 80a124c:	0806019c 	.word	0x0806019c

080a1250 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 80a1250:	b508      	push	{r3, lr}
 80a1252:	4b02      	ldr	r3, [pc, #8]	; (80a125c <HAL_RTC_Get_UnixTime+0xc>)
 80a1254:	681b      	ldr	r3, [r3, #0]
 80a1256:	69db      	ldr	r3, [r3, #28]
 80a1258:	9301      	str	r3, [sp, #4]
 80a125a:	bd08      	pop	{r3, pc}
 80a125c:	0806019c 	.word	0x0806019c

080a1260 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
 80a1260:	b508      	push	{r3, lr}
 80a1262:	4b02      	ldr	r3, [pc, #8]	; (80a126c <HAL_RTC_Time_Is_Valid+0xc>)
 80a1264:	681b      	ldr	r3, [r3, #0]
 80a1266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a1268:	9301      	str	r3, [sp, #4]
 80a126a:	bd08      	pop	{r3, pc}
 80a126c:	0806019c 	.word	0x0806019c

080a1270 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 80a1270:	b508      	push	{r3, lr}
 80a1272:	4b02      	ldr	r3, [pc, #8]	; (80a127c <HAL_Pin_Map+0xc>)
 80a1274:	681b      	ldr	r3, [r3, #0]
 80a1276:	681b      	ldr	r3, [r3, #0]
 80a1278:	9301      	str	r3, [sp, #4]
 80a127a:	bd08      	pop	{r3, pc}
 80a127c:	080601b0 	.word	0x080601b0

080a1280 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a1280:	b508      	push	{r3, lr}
 80a1282:	4b02      	ldr	r3, [pc, #8]	; (80a128c <HAL_Validate_Pin_Function+0xc>)
 80a1284:	681b      	ldr	r3, [r3, #0]
 80a1286:	685b      	ldr	r3, [r3, #4]
 80a1288:	9301      	str	r3, [sp, #4]
 80a128a:	bd08      	pop	{r3, pc}
 80a128c:	080601b0 	.word	0x080601b0

080a1290 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a1290:	b508      	push	{r3, lr}
 80a1292:	4b02      	ldr	r3, [pc, #8]	; (80a129c <HAL_Pin_Mode+0xc>)
 80a1294:	681b      	ldr	r3, [r3, #0]
 80a1296:	689b      	ldr	r3, [r3, #8]
 80a1298:	9301      	str	r3, [sp, #4]
 80a129a:	bd08      	pop	{r3, pc}
 80a129c:	080601b0 	.word	0x080601b0

080a12a0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a12a0:	b508      	push	{r3, lr}
 80a12a2:	4b02      	ldr	r3, [pc, #8]	; (80a12ac <HAL_Get_Pin_Mode+0xc>)
 80a12a4:	681b      	ldr	r3, [r3, #0]
 80a12a6:	68db      	ldr	r3, [r3, #12]
 80a12a8:	9301      	str	r3, [sp, #4]
 80a12aa:	bd08      	pop	{r3, pc}
 80a12ac:	080601b0 	.word	0x080601b0

080a12b0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a12b0:	b508      	push	{r3, lr}
 80a12b2:	4b02      	ldr	r3, [pc, #8]	; (80a12bc <HAL_GPIO_Write+0xc>)
 80a12b4:	681b      	ldr	r3, [r3, #0]
 80a12b6:	691b      	ldr	r3, [r3, #16]
 80a12b8:	9301      	str	r3, [sp, #4]
 80a12ba:	bd08      	pop	{r3, pc}
 80a12bc:	080601b0 	.word	0x080601b0

080a12c0 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a12c0:	b508      	push	{r3, lr}
 80a12c2:	4b02      	ldr	r3, [pc, #8]	; (80a12cc <HAL_GPIO_Read+0xc>)
 80a12c4:	681b      	ldr	r3, [r3, #0]
 80a12c6:	695b      	ldr	r3, [r3, #20]
 80a12c8:	9301      	str	r3, [sp, #4]
 80a12ca:	bd08      	pop	{r3, pc}
 80a12cc:	080601b0 	.word	0x080601b0

080a12d0 <HAL_DAC_Write>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
 80a12d0:	b508      	push	{r3, lr}
 80a12d2:	4b02      	ldr	r3, [pc, #8]	; (80a12dc <HAL_DAC_Write+0xc>)
 80a12d4:	681b      	ldr	r3, [r3, #0]
 80a12d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a12d8:	9301      	str	r3, [sp, #4]
 80a12da:	bd08      	pop	{r3, pc}
 80a12dc:	080601b0 	.word	0x080601b0

080a12e0 <HAL_ADC_Read>:
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
 80a12e0:	b508      	push	{r3, lr}
 80a12e2:	4b02      	ldr	r3, [pc, #8]	; (80a12ec <HAL_ADC_Read+0xc>)
 80a12e4:	681b      	ldr	r3, [r3, #0]
 80a12e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a12e8:	9301      	str	r3, [sp, #4]
 80a12ea:	bd08      	pop	{r3, pc}
 80a12ec:	080601b0 	.word	0x080601b0

080a12f0 <HAL_PWM_Write_Ext>:
DYNALIB_FN(25, hal_gpio, HAL_DAC_Get_Resolution, uint8_t(pin_t))
DYNALIB_FN(26, hal_gpio, HAL_DAC_Set_Resolution, void(pin_t, uint8_t))
DYNALIB_FN(27, hal_gpio, HAL_DAC_Enable_Buffer, void(pin_t pin, uint8_t state))
DYNALIB_FN(28, hal_gpio, HAL_PWM_Get_Resolution, uint8_t(uint16_t))
DYNALIB_FN(29, hal_gpio, HAL_PWM_Set_Resolution, void(uint16_t, uint8_t))
DYNALIB_FN(30, hal_gpio, HAL_PWM_Write_Ext, void(uint16_t, uint32_t))
 80a12f0:	b508      	push	{r3, lr}
 80a12f2:	4b02      	ldr	r3, [pc, #8]	; (80a12fc <HAL_PWM_Write_Ext+0xc>)
 80a12f4:	681b      	ldr	r3, [r3, #0]
 80a12f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80a12f8:	9301      	str	r3, [sp, #4]
 80a12fa:	bd08      	pop	{r3, pc}
 80a12fc:	080601b0 	.word	0x080601b0

080a1300 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a1300:	b508      	push	{r3, lr}
 80a1302:	4b02      	ldr	r3, [pc, #8]	; (80a130c <HAL_I2C_Write_Data+0xc>)
 80a1304:	681b      	ldr	r3, [r3, #0]
 80a1306:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a1308:	9301      	str	r3, [sp, #4]
 80a130a:	bd08      	pop	{r3, pc}
 80a130c:	080601ac 	.word	0x080601ac

080a1310 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a1310:	b508      	push	{r3, lr}
 80a1312:	4b02      	ldr	r3, [pc, #8]	; (80a131c <HAL_I2C_Available_Data+0xc>)
 80a1314:	681b      	ldr	r3, [r3, #0]
 80a1316:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a1318:	9301      	str	r3, [sp, #4]
 80a131a:	bd08      	pop	{r3, pc}
 80a131c:	080601ac 	.word	0x080601ac

080a1320 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a1320:	b508      	push	{r3, lr}
 80a1322:	4b02      	ldr	r3, [pc, #8]	; (80a132c <HAL_I2C_Read_Data+0xc>)
 80a1324:	681b      	ldr	r3, [r3, #0]
 80a1326:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a1328:	9301      	str	r3, [sp, #4]
 80a132a:	bd08      	pop	{r3, pc}
 80a132c:	080601ac 	.word	0x080601ac

080a1330 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a1330:	b508      	push	{r3, lr}
 80a1332:	4b02      	ldr	r3, [pc, #8]	; (80a133c <HAL_I2C_Peek_Data+0xc>)
 80a1334:	681b      	ldr	r3, [r3, #0]
 80a1336:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a1338:	9301      	str	r3, [sp, #4]
 80a133a:	bd08      	pop	{r3, pc}
 80a133c:	080601ac 	.word	0x080601ac

080a1340 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a1340:	b508      	push	{r3, lr}
 80a1342:	4b02      	ldr	r3, [pc, #8]	; (80a134c <HAL_I2C_Flush_Data+0xc>)
 80a1344:	681b      	ldr	r3, [r3, #0]
 80a1346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a1348:	9301      	str	r3, [sp, #4]
 80a134a:	bd08      	pop	{r3, pc}
 80a134c:	080601ac 	.word	0x080601ac

080a1350 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a1350:	b508      	push	{r3, lr}
 80a1352:	4b02      	ldr	r3, [pc, #8]	; (80a135c <HAL_I2C_Is_Enabled+0xc>)
 80a1354:	681b      	ldr	r3, [r3, #0]
 80a1356:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a1358:	9301      	str	r3, [sp, #4]
 80a135a:	bd08      	pop	{r3, pc}
 80a135c:	080601ac 	.word	0x080601ac

080a1360 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a1360:	b508      	push	{r3, lr}
 80a1362:	4b03      	ldr	r3, [pc, #12]	; (80a1370 <HAL_I2C_Init+0x10>)
 80a1364:	681b      	ldr	r3, [r3, #0]
 80a1366:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a136a:	9301      	str	r3, [sp, #4]
 80a136c:	bd08      	pop	{r3, pc}
 80a136e:	0000      	.short	0x0000
 80a1370:	080601ac 	.word	0x080601ac

080a1374 <socket_active_status>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
 80a1374:	b508      	push	{r3, lr}
 80a1376:	4b02      	ldr	r3, [pc, #8]	; (80a1380 <socket_active_status+0xc>)
 80a1378:	681b      	ldr	r3, [r3, #0]
 80a137a:	681b      	ldr	r3, [r3, #0]
 80a137c:	9301      	str	r3, [sp, #4]
 80a137e:	bd08      	pop	{r3, pc}
 80a1380:	080601bc 	.word	0x080601bc

080a1384 <socket_handle_valid>:
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a1384:	b508      	push	{r3, lr}
 80a1386:	4b02      	ldr	r3, [pc, #8]	; (80a1390 <socket_handle_valid+0xc>)
 80a1388:	681b      	ldr	r3, [r3, #0]
 80a138a:	685b      	ldr	r3, [r3, #4]
 80a138c:	9301      	str	r3, [sp, #4]
 80a138e:	bd08      	pop	{r3, pc}
 80a1390:	080601bc 	.word	0x080601bc

080a1394 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a1394:	b508      	push	{r3, lr}
 80a1396:	4b02      	ldr	r3, [pc, #8]	; (80a13a0 <socket_create+0xc>)
 80a1398:	681b      	ldr	r3, [r3, #0]
 80a139a:	689b      	ldr	r3, [r3, #8]
 80a139c:	9301      	str	r3, [sp, #4]
 80a139e:	bd08      	pop	{r3, pc}
 80a13a0:	080601bc 	.word	0x080601bc

080a13a4 <socket_connect>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
 80a13a4:	b508      	push	{r3, lr}
 80a13a6:	4b02      	ldr	r3, [pc, #8]	; (80a13b0 <socket_connect+0xc>)
 80a13a8:	681b      	ldr	r3, [r3, #0]
 80a13aa:	68db      	ldr	r3, [r3, #12]
 80a13ac:	9301      	str	r3, [sp, #4]
 80a13ae:	bd08      	pop	{r3, pc}
 80a13b0:	080601bc 	.word	0x080601bc

080a13b4 <socket_receive>:
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
 80a13b4:	b508      	push	{r3, lr}
 80a13b6:	4b02      	ldr	r3, [pc, #8]	; (80a13c0 <socket_receive+0xc>)
 80a13b8:	681b      	ldr	r3, [r3, #0]
 80a13ba:	691b      	ldr	r3, [r3, #16]
 80a13bc:	9301      	str	r3, [sp, #4]
 80a13be:	bd08      	pop	{r3, pc}
 80a13c0:	080601bc 	.word	0x080601bc

080a13c4 <socket_close>:
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a13c4:	b508      	push	{r3, lr}
 80a13c6:	4b02      	ldr	r3, [pc, #8]	; (80a13d0 <socket_close+0xc>)
 80a13c8:	681b      	ldr	r3, [r3, #0]
 80a13ca:	6a1b      	ldr	r3, [r3, #32]
 80a13cc:	9301      	str	r3, [sp, #4]
 80a13ce:	bd08      	pop	{r3, pc}
 80a13d0:	080601bc 	.word	0x080601bc

080a13d4 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a13d4:	b508      	push	{r3, lr}
 80a13d6:	4b02      	ldr	r3, [pc, #8]	; (80a13e0 <socket_handle_invalid+0xc>)
 80a13d8:	681b      	ldr	r3, [r3, #0]
 80a13da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a13dc:	9301      	str	r3, [sp, #4]
 80a13de:	bd08      	pop	{r3, pc}
 80a13e0:	080601bc 	.word	0x080601bc

080a13e4 <socket_send_ex>:
DYNALIB_FN(13, hal_socket, socket_join_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(14, hal_socket, socket_leave_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(15, hal_socket, socket_peer, sock_result_t(sock_handle_t, sock_peer_t*, void*))
DYNALIB_FN(16, hal_socket, socket_shutdown, sock_result_t(sock_handle_t, int))
DYNALIB_FN(17, hal_socket, socket_send_ex, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, system_tick_t, void*))
 80a13e4:	b508      	push	{r3, lr}
 80a13e6:	4b02      	ldr	r3, [pc, #8]	; (80a13f0 <socket_send_ex+0xc>)
 80a13e8:	681b      	ldr	r3, [r3, #0]
 80a13ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a13ec:	9301      	str	r3, [sp, #4]
 80a13ee:	bd08      	pop	{r3, pc}
 80a13f0:	080601bc 	.word	0x080601bc

080a13f4 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a13f4:	b508      	push	{r3, lr}
 80a13f6:	4b02      	ldr	r3, [pc, #8]	; (80a1400 <HAL_SPI_Init+0xc>)
 80a13f8:	681b      	ldr	r3, [r3, #0]
 80a13fa:	69db      	ldr	r3, [r3, #28]
 80a13fc:	9301      	str	r3, [sp, #4]
 80a13fe:	bd08      	pop	{r3, pc}
 80a1400:	080601b4 	.word	0x080601b4

080a1404 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a1404:	b508      	push	{r3, lr}
 80a1406:	4b02      	ldr	r3, [pc, #8]	; (80a1410 <HAL_SPI_Is_Enabled+0xc>)
 80a1408:	681b      	ldr	r3, [r3, #0]
 80a140a:	6a1b      	ldr	r3, [r3, #32]
 80a140c:	9301      	str	r3, [sp, #4]
 80a140e:	bd08      	pop	{r3, pc}
 80a1410:	080601b4 	.word	0x080601b4

080a1414 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a1414:	b508      	push	{r3, lr}
 80a1416:	4b02      	ldr	r3, [pc, #8]	; (80a1420 <HAL_USART_Init+0xc>)
 80a1418:	681b      	ldr	r3, [r3, #0]
 80a141a:	699b      	ldr	r3, [r3, #24]
 80a141c:	9301      	str	r3, [sp, #4]
 80a141e:	bd08      	pop	{r3, pc}
 80a1420:	080601c4 	.word	0x080601c4

080a1424 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a1424:	b508      	push	{r3, lr}
 80a1426:	4b02      	ldr	r3, [pc, #8]	; (80a1430 <HAL_USART_Write_Data+0xc>)
 80a1428:	681b      	ldr	r3, [r3, #0]
 80a142a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a142c:	9301      	str	r3, [sp, #4]
 80a142e:	bd08      	pop	{r3, pc}
 80a1430:	080601c4 	.word	0x080601c4

080a1434 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a1434:	b508      	push	{r3, lr}
 80a1436:	4b02      	ldr	r3, [pc, #8]	; (80a1440 <HAL_USART_Available_Data+0xc>)
 80a1438:	681b      	ldr	r3, [r3, #0]
 80a143a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a143c:	9301      	str	r3, [sp, #4]
 80a143e:	bd08      	pop	{r3, pc}
 80a1440:	080601c4 	.word	0x080601c4

080a1444 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a1444:	b508      	push	{r3, lr}
 80a1446:	4b02      	ldr	r3, [pc, #8]	; (80a1450 <HAL_USART_Read_Data+0xc>)
 80a1448:	681b      	ldr	r3, [r3, #0]
 80a144a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a144c:	9301      	str	r3, [sp, #4]
 80a144e:	bd08      	pop	{r3, pc}
 80a1450:	080601c4 	.word	0x080601c4

080a1454 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a1454:	b508      	push	{r3, lr}
 80a1456:	4b02      	ldr	r3, [pc, #8]	; (80a1460 <HAL_USART_Peek_Data+0xc>)
 80a1458:	681b      	ldr	r3, [r3, #0]
 80a145a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a145c:	9301      	str	r3, [sp, #4]
 80a145e:	bd08      	pop	{r3, pc}
 80a1460:	080601c4 	.word	0x080601c4

080a1464 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a1464:	b508      	push	{r3, lr}
 80a1466:	4b02      	ldr	r3, [pc, #8]	; (80a1470 <HAL_USART_Flush_Data+0xc>)
 80a1468:	681b      	ldr	r3, [r3, #0]
 80a146a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a146c:	9301      	str	r3, [sp, #4]
 80a146e:	bd08      	pop	{r3, pc}
 80a1470:	080601c4 	.word	0x080601c4

080a1474 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a1474:	b508      	push	{r3, lr}
 80a1476:	4b02      	ldr	r3, [pc, #8]	; (80a1480 <HAL_USART_Is_Enabled+0xc>)
 80a1478:	681b      	ldr	r3, [r3, #0]
 80a147a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a147c:	9301      	str	r3, [sp, #4]
 80a147e:	bd08      	pop	{r3, pc}
 80a1480:	080601c4 	.word	0x080601c4

080a1484 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a1484:	b508      	push	{r3, lr}
 80a1486:	4b02      	ldr	r3, [pc, #8]	; (80a1490 <HAL_USART_Available_Data_For_Write+0xc>)
 80a1488:	681b      	ldr	r3, [r3, #0]
 80a148a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a148c:	9301      	str	r3, [sp, #4]
 80a148e:	bd08      	pop	{r3, pc}
 80a1490:	080601c4 	.word	0x080601c4

080a1494 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
 80a1494:	b508      	push	{r3, lr}
 80a1496:	4b02      	ldr	r3, [pc, #8]	; (80a14a0 <HAL_USART_BeginConfig+0xc>)
 80a1498:	681b      	ldr	r3, [r3, #0]
 80a149a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a149c:	9301      	str	r3, [sp, #4]
 80a149e:	bd08      	pop	{r3, pc}
 80a14a0:	080601c4 	.word	0x080601c4

080a14a4 <HAL_USART_Write_NineBitData>:
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, HAL_USART_Write_NineBitData, uint32_t(HAL_USART_Serial serial, uint16_t data))
 80a14a4:	b508      	push	{r3, lr}
 80a14a6:	4b02      	ldr	r3, [pc, #8]	; (80a14b0 <HAL_USART_Write_NineBitData+0xc>)
 80a14a8:	681b      	ldr	r3, [r3, #0]
 80a14aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80a14ac:	9301      	str	r3, [sp, #4]
 80a14ae:	bd08      	pop	{r3, pc}
 80a14b0:	080601c4 	.word	0x080601c4

080a14b4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a14b4:	b508      	push	{r3, lr}
 80a14b6:	4b02      	ldr	r3, [pc, #8]	; (80a14c0 <HAL_USB_USART_Init+0xc>)
 80a14b8:	681b      	ldr	r3, [r3, #0]
 80a14ba:	681b      	ldr	r3, [r3, #0]
 80a14bc:	9301      	str	r3, [sp, #4]
 80a14be:	bd08      	pop	{r3, pc}
 80a14c0:	080601d8 	.word	0x080601d8

080a14c4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a14c4:	b508      	push	{r3, lr}
 80a14c6:	4b02      	ldr	r3, [pc, #8]	; (80a14d0 <HAL_USB_USART_Available_Data+0xc>)
 80a14c8:	681b      	ldr	r3, [r3, #0]
 80a14ca:	691b      	ldr	r3, [r3, #16]
 80a14cc:	9301      	str	r3, [sp, #4]
 80a14ce:	bd08      	pop	{r3, pc}
 80a14d0:	080601d8 	.word	0x080601d8

080a14d4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a14d4:	b508      	push	{r3, lr}
 80a14d6:	4b02      	ldr	r3, [pc, #8]	; (80a14e0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a14d8:	681b      	ldr	r3, [r3, #0]
 80a14da:	695b      	ldr	r3, [r3, #20]
 80a14dc:	9301      	str	r3, [sp, #4]
 80a14de:	bd08      	pop	{r3, pc}
 80a14e0:	080601d8 	.word	0x080601d8

080a14e4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a14e4:	b508      	push	{r3, lr}
 80a14e6:	4b02      	ldr	r3, [pc, #8]	; (80a14f0 <HAL_USB_USART_Receive_Data+0xc>)
 80a14e8:	681b      	ldr	r3, [r3, #0]
 80a14ea:	699b      	ldr	r3, [r3, #24]
 80a14ec:	9301      	str	r3, [sp, #4]
 80a14ee:	bd08      	pop	{r3, pc}
 80a14f0:	080601d8 	.word	0x080601d8

080a14f4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a14f4:	b508      	push	{r3, lr}
 80a14f6:	4b02      	ldr	r3, [pc, #8]	; (80a1500 <HAL_USB_USART_Send_Data+0xc>)
 80a14f8:	681b      	ldr	r3, [r3, #0]
 80a14fa:	69db      	ldr	r3, [r3, #28]
 80a14fc:	9301      	str	r3, [sp, #4]
 80a14fe:	bd08      	pop	{r3, pc}
 80a1500:	080601d8 	.word	0x080601d8

080a1504 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a1504:	b508      	push	{r3, lr}
 80a1506:	4b02      	ldr	r3, [pc, #8]	; (80a1510 <HAL_USB_USART_Flush_Data+0xc>)
 80a1508:	681b      	ldr	r3, [r3, #0]
 80a150a:	6a1b      	ldr	r3, [r3, #32]
 80a150c:	9301      	str	r3, [sp, #4]
 80a150e:	bd08      	pop	{r3, pc}
 80a1510:	080601d8 	.word	0x080601d8

080a1514 <HAL_NET_SetNetWatchDog>:

DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, void(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
 80a1514:	b508      	push	{r3, lr}
 80a1516:	4b02      	ldr	r3, [pc, #8]	; (80a1520 <HAL_NET_SetNetWatchDog+0xc>)
 80a1518:	681b      	ldr	r3, [r3, #0]
 80a151a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a151c:	9301      	str	r3, [sp, #4]
 80a151e:	bd08      	pop	{r3, pc}
 80a1520:	080601c0 	.word	0x080601c0

080a1524 <inet_gethostbyname>:
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a1524:	b508      	push	{r3, lr}
 80a1526:	4b02      	ldr	r3, [pc, #8]	; (80a1530 <inet_gethostbyname+0xc>)
 80a1528:	681b      	ldr	r3, [r3, #0]
 80a152a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a152c:	9301      	str	r3, [sp, #4]
 80a152e:	bd08      	pop	{r3, pc}
 80a1530:	080601c0 	.word	0x080601c0

080a1534 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 80a1534:	b508      	push	{r3, lr}
 80a1536:	4b02      	ldr	r3, [pc, #8]	; (80a1540 <log_message+0xc>)
 80a1538:	681b      	ldr	r3, [r3, #0]
 80a153a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80a153c:	9301      	str	r3, [sp, #4]
 80a153e:	bd08      	pop	{r3, pc}
 80a1540:	080201a8 	.word	0x080201a8

080a1544 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80a1544:	b508      	push	{r3, lr}
 80a1546:	4b02      	ldr	r3, [pc, #8]	; (80a1550 <system_mode+0xc>)
 80a1548:	681b      	ldr	r3, [r3, #0]
 80a154a:	681b      	ldr	r3, [r3, #0]
 80a154c:	9301      	str	r3, [sp, #4]
 80a154e:	bd08      	pop	{r3, pc}
 80a1550:	080601a4 	.word	0x080601a4

080a1554 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a1554:	b508      	push	{r3, lr}
 80a1556:	4b02      	ldr	r3, [pc, #8]	; (80a1560 <set_system_mode+0xc>)
 80a1558:	681b      	ldr	r3, [r3, #0]
 80a155a:	685b      	ldr	r3, [r3, #4]
 80a155c:	9301      	str	r3, [sp, #4]
 80a155e:	bd08      	pop	{r3, pc}
 80a1560:	080601a4 	.word	0x080601a4

080a1564 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a1564:	b508      	push	{r3, lr}
 80a1566:	4b02      	ldr	r3, [pc, #8]	; (80a1570 <system_delay_ms+0xc>)
 80a1568:	681b      	ldr	r3, [r3, #0]
 80a156a:	695b      	ldr	r3, [r3, #20]
 80a156c:	9301      	str	r3, [sp, #4]
 80a156e:	bd08      	pop	{r3, pc}
 80a1570:	080601a4 	.word	0x080601a4

080a1574 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a1574:	b508      	push	{r3, lr}
 80a1576:	4b02      	ldr	r3, [pc, #8]	; (80a1580 <application_thread_current+0xc>)
 80a1578:	681b      	ldr	r3, [r3, #0]
 80a157a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a157c:	9301      	str	r3, [sp, #4]
 80a157e:	bd08      	pop	{r3, pc}
 80a1580:	080601a4 	.word	0x080601a4

080a1584 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a1584:	b508      	push	{r3, lr}
 80a1586:	4b02      	ldr	r3, [pc, #8]	; (80a1590 <application_thread_invoke+0xc>)
 80a1588:	681b      	ldr	r3, [r3, #0]
 80a158a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a158c:	9301      	str	r3, [sp, #4]
 80a158e:	bd08      	pop	{r3, pc}
 80a1590:	080601a4 	.word	0x080601a4

080a1594 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80a1594:	b508      	push	{r3, lr}
 80a1596:	4b02      	ldr	r3, [pc, #8]	; (80a15a0 <system_thread_get_state+0xc>)
 80a1598:	681b      	ldr	r3, [r3, #0]
 80a159a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a159c:	9301      	str	r3, [sp, #4]
 80a159e:	bd08      	pop	{r3, pc}
 80a15a0:	080601a4 	.word	0x080601a4

080a15a4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a15a4:	b508      	push	{r3, lr}
 80a15a6:	4b03      	ldr	r3, [pc, #12]	; (80a15b4 <system_ctrl_set_app_request_handler+0x10>)
 80a15a8:	681b      	ldr	r3, [r3, #0]
 80a15aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a15ae:	9301      	str	r3, [sp, #4]
 80a15b0:	bd08      	pop	{r3, pc}
 80a15b2:	0000      	.short	0x0000
 80a15b4:	080601a4 	.word	0x080601a4

080a15b8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a15b8:	b508      	push	{r3, lr}
 80a15ba:	4b03      	ldr	r3, [pc, #12]	; (80a15c8 <system_ctrl_set_result+0x10>)
 80a15bc:	681b      	ldr	r3, [r3, #0]
 80a15be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a15c2:	9301      	str	r3, [sp, #4]
 80a15c4:	bd08      	pop	{r3, pc}
 80a15c6:	0000      	.short	0x0000
 80a15c8:	080601a4 	.word	0x080601a4

080a15cc <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 80a15cc:	b508      	push	{r3, lr}
 80a15ce:	4b02      	ldr	r3, [pc, #8]	; (80a15d8 <spark_variable+0xc>)
 80a15d0:	681b      	ldr	r3, [r3, #0]
 80a15d2:	681b      	ldr	r3, [r3, #0]
 80a15d4:	9301      	str	r3, [sp, #4]
 80a15d6:	bd08      	pop	{r3, pc}
 80a15d8:	080601cc 	.word	0x080601cc

080a15dc <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 80a15dc:	b508      	push	{r3, lr}
 80a15de:	4b02      	ldr	r3, [pc, #8]	; (80a15e8 <spark_function+0xc>)
 80a15e0:	681b      	ldr	r3, [r3, #0]
 80a15e2:	685b      	ldr	r3, [r3, #4]
 80a15e4:	9301      	str	r3, [sp, #4]
 80a15e6:	bd08      	pop	{r3, pc}
 80a15e8:	080601cc 	.word	0x080601cc

080a15ec <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a15ec:	b508      	push	{r3, lr}
 80a15ee:	4b02      	ldr	r3, [pc, #8]	; (80a15f8 <spark_process+0xc>)
 80a15f0:	681b      	ldr	r3, [r3, #0]
 80a15f2:	689b      	ldr	r3, [r3, #8]
 80a15f4:	9301      	str	r3, [sp, #4]
 80a15f6:	bd08      	pop	{r3, pc}
 80a15f8:	080601cc 	.word	0x080601cc

080a15fc <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a15fc:	b508      	push	{r3, lr}
 80a15fe:	4b02      	ldr	r3, [pc, #8]	; (80a1608 <spark_cloud_flag_connected+0xc>)
 80a1600:	681b      	ldr	r3, [r3, #0]
 80a1602:	695b      	ldr	r3, [r3, #20]
 80a1604:	9301      	str	r3, [sp, #4]
 80a1606:	bd08      	pop	{r3, pc}
 80a1608:	080601cc 	.word	0x080601cc

080a160c <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a160c:	b508      	push	{r3, lr}
 80a160e:	4b02      	ldr	r3, [pc, #8]	; (80a1618 <spark_send_event+0xc>)
 80a1610:	681b      	ldr	r3, [r3, #0]
 80a1612:	6a1b      	ldr	r3, [r3, #32]
 80a1614:	9301      	str	r3, [sp, #4]
 80a1616:	bd08      	pop	{r3, pc}
 80a1618:	080601cc 	.word	0x080601cc

080a161c <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 80a161c:	b508      	push	{r3, lr}
 80a161e:	4b02      	ldr	r3, [pc, #8]	; (80a1628 <spark_sync_time_pending+0xc>)
 80a1620:	681b      	ldr	r3, [r3, #0]
 80a1622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1624:	9301      	str	r3, [sp, #4]
 80a1626:	bd08      	pop	{r3, pc}
 80a1628:	080601cc 	.word	0x080601cc

080a162c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a162c:	b508      	push	{r3, lr}
 80a162e:	4b02      	ldr	r3, [pc, #8]	; (80a1638 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a1630:	681b      	ldr	r3, [r3, #0]
 80a1632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1634:	9301      	str	r3, [sp, #4]
 80a1636:	bd08      	pop	{r3, pc}
 80a1638:	080601cc 	.word	0x080601cc

080a163c <network_ready>:

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a163c:	b508      	push	{r3, lr}
 80a163e:	4b02      	ldr	r3, [pc, #8]	; (80a1648 <network_ready+0xc>)
 80a1640:	681b      	ldr	r3, [r3, #0]
 80a1642:	691b      	ldr	r3, [r3, #16]
 80a1644:	9301      	str	r3, [sp, #4]
 80a1646:	bd08      	pop	{r3, pc}
 80a1648:	080601c8 	.word	0x080601c8

080a164c <malloc>:

#include "dynalib.h"

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a164c:	b508      	push	{r3, lr}
 80a164e:	4b02      	ldr	r3, [pc, #8]	; (80a1658 <malloc+0xc>)
 80a1650:	681b      	ldr	r3, [r3, #0]
 80a1652:	681b      	ldr	r3, [r3, #0]
 80a1654:	9301      	str	r3, [sp, #4]
 80a1656:	bd08      	pop	{r3, pc}
 80a1658:	080601a0 	.word	0x080601a0

080a165c <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a165c:	b508      	push	{r3, lr}
 80a165e:	4b02      	ldr	r3, [pc, #8]	; (80a1668 <free+0xc>)
 80a1660:	681b      	ldr	r3, [r3, #0]
 80a1662:	685b      	ldr	r3, [r3, #4]
 80a1664:	9301      	str	r3, [sp, #4]
 80a1666:	bd08      	pop	{r3, pc}
 80a1668:	080601a0 	.word	0x080601a0

080a166c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a166c:	b508      	push	{r3, lr}
 80a166e:	4b02      	ldr	r3, [pc, #8]	; (80a1678 <realloc+0xc>)
 80a1670:	681b      	ldr	r3, [r3, #0]
 80a1672:	689b      	ldr	r3, [r3, #8]
 80a1674:	9301      	str	r3, [sp, #4]
 80a1676:	bd08      	pop	{r3, pc}
 80a1678:	080601a0 	.word	0x080601a0

080a167c <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a167c:	b508      	push	{r3, lr}
 80a167e:	4b02      	ldr	r3, [pc, #8]	; (80a1688 <abort+0xc>)
 80a1680:	681b      	ldr	r3, [r3, #0]
 80a1682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1684:	9301      	str	r3, [sp, #4]
 80a1686:	bd08      	pop	{r3, pc}
 80a1688:	080601a0 	.word	0x080601a0

080a168c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a168c:	b508      	push	{r3, lr}
 80a168e:	4b02      	ldr	r3, [pc, #8]	; (80a1698 <_malloc_r+0xc>)
 80a1690:	681b      	ldr	r3, [r3, #0]
 80a1692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1694:	9301      	str	r3, [sp, #4]
 80a1696:	bd08      	pop	{r3, pc}
 80a1698:	080601a0 	.word	0x080601a0

080a169c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a169c:	2100      	movs	r1, #0
 80a169e:	f7ff bf61 	b.w	80a1564 <system_delay_ms>

080a16a2 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a16a2:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a16a4:	6883      	ldr	r3, [r0, #8]
 80a16a6:	4604      	mov	r4, r0
 80a16a8:	b90b      	cbnz	r3, 80a16ae <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a16aa:	f001 fce6 	bl	80a307a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a16ae:	68c3      	ldr	r3, [r0, #12]
 80a16b0:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80a16b2:	68a3      	ldr	r3, [r4, #8]
 80a16b4:	b11b      	cbz	r3, 80a16be <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a16b6:	2203      	movs	r2, #3
 80a16b8:	4621      	mov	r1, r4
 80a16ba:	4620      	mov	r0, r4
 80a16bc:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a16be:	4620      	mov	r0, r4
}
 80a16c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a16c4:	f7fe bced 	b.w	80a00a2 <_ZdlPv>

080a16c8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a16c8:	4770      	bx	lr

080a16ca <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 80a16ca:	2000      	movs	r0, #0
 80a16cc:	4770      	bx	lr

080a16ce <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a16ce:	b510      	push	{r4, lr}
 80a16d0:	4604      	mov	r4, r0
 80a16d2:	f7fe fce6 	bl	80a00a2 <_ZdlPv>
 80a16d6:	4620      	mov	r0, r4
 80a16d8:	bd10      	pop	{r4, pc}

080a16da <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 80a16da:	b508      	push	{r3, lr}
      { delete this; }
 80a16dc:	b108      	cbz	r0, 80a16e2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 80a16de:	f7ff fff6 	bl	80a16ce <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a16e2:	bd08      	pop	{r3, pc}

080a16e4 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a16e4:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a16e6:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a16e8:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a16ea:	b113      	cbz	r3, 80a16f2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a16ec:	2203      	movs	r2, #3
 80a16ee:	4601      	mov	r1, r0
 80a16f0:	4798      	blx	r3
    }
 80a16f2:	4620      	mov	r0, r4
 80a16f4:	bd10      	pop	{r4, pc}

080a16f6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 80a16f6:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a16f8:	68c4      	ldr	r4, [r0, #12]
 80a16fa:	b1d4      	cbz	r4, 80a1732 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x3c>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 80a16fc:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a16fe:	2b02      	cmp	r3, #2
 80a1700:	d102      	bne.n	80a1708 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a1702:	68e0      	ldr	r0, [r4, #12]
 80a1704:	f7ff ffaa 	bl	80a165c <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 80a1708:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 80a170a:	b12d      	cbz	r5, 80a1718 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x22>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a170c:	4628      	mov	r0, r5
 80a170e:	f7ff ffe9 	bl	80a16e4 <_ZNSt14_Function_baseD1Ev>
 80a1712:	4628      	mov	r0, r5
 80a1714:	f7fe fcc5 	bl	80a00a2 <_ZdlPv>
 80a1718:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a171a:	b12d      	cbz	r5, 80a1728 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x32>
 80a171c:	4628      	mov	r0, r5
 80a171e:	f7ff ffe1 	bl	80a16e4 <_ZNSt14_Function_baseD1Ev>
 80a1722:	4628      	mov	r0, r5
 80a1724:	f7fe fcbd 	bl	80a00a2 <_ZdlPv>
 80a1728:	4620      	mov	r0, r4
 80a172a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a172e:	f7fe bcb8 	b.w	80a00a2 <_ZdlPv>
 80a1732:	bd38      	pop	{r3, r4, r5, pc}

080a1734 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}
#endif
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 80a1734:	b510      	push	{r4, lr}
 80a1736:	b088      	sub	sp, #32
 80a1738:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a173a:	4668      	mov	r0, sp
 80a173c:	f000 fd49 	bl	80a21d2 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 80a1740:	4669      	mov	r1, sp
 80a1742:	a804      	add	r0, sp, #16
 80a1744:	f000 fd67 	bl	80a2216 <_ZN6StringC1ERKS_>
 80a1748:	a804      	add	r0, sp, #16
 80a174a:	47a0      	blx	r4
 80a174c:	4604      	mov	r4, r0
 80a174e:	a804      	add	r0, sp, #16
 80a1750:	f000 fcf8 	bl	80a2144 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a1754:	4668      	mov	r0, sp
 80a1756:	f000 fcf5 	bl	80a2144 <_ZN6StringD1Ev>
    return (*fn)(p);
}
 80a175a:	4620      	mov	r0, r4
 80a175c:	b008      	add	sp, #32
 80a175e:	bd10      	pop	{r4, pc}

080a1760 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 80a1760:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1762:	4607      	mov	r7, r0
 80a1764:	460e      	mov	r6, r1
 80a1766:	4615      	mov	r5, r2
 80a1768:	b085      	sub	sp, #20
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
 80a176a:	2410      	movs	r4, #16
 80a176c:	4622      	mov	r2, r4
 80a176e:	2100      	movs	r1, #0
 80a1770:	4668      	mov	r0, sp
 80a1772:	f002 ff14 	bl	80a459e <memset>
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a1776:	2200      	movs	r2, #0
 80a1778:	4669      	mov	r1, sp
 80a177a:	4610      	mov	r0, r2

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
    desc.size = sizeof(desc);
 80a177c:	f8ad 4000 	strh.w	r4, [sp]
    desc.fn = fn;
 80a1780:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
 80a1782:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
 80a1784:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a1786:	f7ff ff29 	bl	80a15dc <spark_function>
}
 80a178a:	b005      	add	sp, #20
 80a178c:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a178e <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 80a178e:	b513      	push	{r0, r1, r4, lr}
 80a1790:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a1792:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 80a1796:	2300      	movs	r3, #0
 80a1798:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a179a:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a179c:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a179e:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a17a0:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a17a2:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a17a4:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a17a6:	f7fe fe17 	bl	80a03d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a17aa:	4620      	mov	r0, r4
 80a17ac:	b002      	add	sp, #8
 80a17ae:	bd10      	pop	{r4, pc}

080a17b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80a17b0:	680b      	ldr	r3, [r1, #0]
 80a17b2:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80a17b4:	b113      	cbz	r3, 80a17bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80a17b6:	685a      	ldr	r2, [r3, #4]
 80a17b8:	3201      	adds	r2, #1
 80a17ba:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 80a17bc:	4770      	bx	lr

080a17be <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a17be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a17c0:	460c      	mov	r4, r1
 80a17c2:	4606      	mov	r6, r0
 80a17c4:	460f      	mov	r7, r1
 80a17c6:	f854 3b04 	ldr.w	r3, [r4], #4
 80a17ca:	ad02      	add	r5, sp, #8
 80a17cc:	f845 3d08 	str.w	r3, [r5, #-8]!
 80a17d0:	4621      	mov	r1, r4
 80a17d2:	a801      	add	r0, sp, #4
 80a17d4:	f7ff ffec 	bl	80a17b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 80a17d8:	4629      	mov	r1, r5
 80a17da:	4630      	mov	r0, r6
 80a17dc:	f7ff ffd7 	bl	80a178e <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a17e0:	a801      	add	r0, sp, #4
 80a17e2:	f7fe fdf9 	bl	80a03d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a17e6:	4620      	mov	r0, r4
 80a17e8:	f7fe fdf6 	bl	80a03d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 80a17ec:	4638      	mov	r0, r7
 80a17ee:	f7fe fc58 	bl	80a00a2 <_ZdlPv>
        return p;
    }
 80a17f2:	4630      	mov	r0, r6
 80a17f4:	b003      	add	sp, #12
 80a17f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a17f8 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 80a17f8:	b513      	push	{r0, r1, r4, lr}
 80a17fa:	460b      	mov	r3, r1
 80a17fc:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a17fe:	c803      	ldmia	r0, {r0, r1}
 80a1800:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a1804:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a1808:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a180c:	e89d 0003 	ldmia.w	sp, {r0, r1}
 80a1810:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a1814:	b002      	add	sp, #8
 80a1816:	bd10      	pop	{r4, pc}

080a1818 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1818:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a181a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a181c:	b90a      	cbnz	r2, 80a1822 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a181e:	f001 fc2c 	bl	80a307a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1822:	68c3      	ldr	r3, [r0, #12]
    }
 80a1824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1828:	4718      	bx	r3

080a182a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a182a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a182c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a182e:	f100 0110 	add.w	r1, r0, #16
 80a1832:	f7ff fff1 	bl	80a1818 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a1836:	bd08      	pop	{r3, pc}

080a1838 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1838:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a183a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a183c:	b90a      	cbnz	r2, 80a1842 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a183e:	f001 fc1c 	bl	80a307a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1842:	68c3      	ldr	r3, [r0, #12]
    }
 80a1844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1848:	4718      	bx	r3

080a184a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a184a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a184c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a184e:	f100 0110 	add.w	r1, r0, #16
 80a1852:	f7ff fff1 	bl	80a1838 <_ZNKSt8functionIFvRKbEEclES1_>
 80a1856:	bd08      	pop	{r3, pc}

080a1858 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a1858:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a185a:	2300      	movs	r3, #0
 80a185c:	6083      	str	r3, [r0, #8]
 80a185e:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a1860:	4604      	mov	r4, r0
 80a1862:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a1864:	b12b      	cbz	r3, 80a1872 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a1866:	2202      	movs	r2, #2
 80a1868:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a186a:	68eb      	ldr	r3, [r5, #12]
 80a186c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a186e:	68ab      	ldr	r3, [r5, #8]
 80a1870:	60a3      	str	r3, [r4, #8]
	}
    }
 80a1872:	4620      	mov	r0, r4
 80a1874:	bd38      	pop	{r3, r4, r5, pc}
	...

080a1878 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 80a1878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
 80a187c:	f64f 739c 	movw	r3, #65436	; 0xff9c
 80a1880:	6804      	ldr	r4, [r0, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a1882:	f04f 0002 	mov.w	r0, #2
 80a1886:	b086      	sub	sp, #24
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a1888:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a188c:	808b      	strh	r3, [r1, #4]
 80a188e:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a1890:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a1892:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1896:	600b      	str	r3, [r1, #0]
 80a1898:	e8d4 1f4f 	ldrexb	r1, [r4]
 80a189c:	4299      	cmp	r1, r3
 80a189e:	d103      	bne.n	80a18a8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
 80a18a0:	e8c4 0f45 	strexb	r5, r0, [r4]
 80a18a4:	2d00      	cmp	r5, #0
 80a18a6:	d1f7      	bne.n	80a1898 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 80a18a8:	d002      	beq.n	80a18b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
 80a18aa:	f88d 1000 	strb.w	r1, [sp]
 80a18ae:	e06b      	b.n	80a1988 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 80a18b0:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a18b4:	bf1c      	itt	ne
 80a18b6:	60e7      	strne	r7, [r4, #12]
 80a18b8:	8222      	strhne	r2, [r4, #16]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a18ba:	f3bf 8f5f 	dmb	sy
      __b = _GLIBCXX_MOVE(__tmp);
 80a18be:	bf18      	it	ne
 80a18c0:	461f      	movne	r7, r3
 80a18c2:	2301      	movs	r3, #1
 80a18c4:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a18c6:	f3bf 8f5f 	dmb	sy
 80a18ca:	f104 0308 	add.w	r3, r4, #8
 80a18ce:	2000      	movs	r0, #0
 80a18d0:	e853 6f00 	ldrex	r6, [r3]
 80a18d4:	e843 0200 	strex	r2, r0, [r3]
 80a18d8:	2a00      	cmp	r2, #0
 80a18da:	d1f9      	bne.n	80a18d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x58>
 80a18dc:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a18e0:	2e00      	cmp	r6, #0
 80a18e2:	d051      	beq.n	80a1988 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a18e4:	f7ff fe46 	bl	80a1574 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a18e8:	b120      	cbz	r0, 80a18f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7c>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a18ea:	4629      	mov	r1, r5
 80a18ec:	4630      	mov	r0, r6
 80a18ee:	f7ff ff93 	bl	80a1818 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a18f2:	e043      	b.n	80a197c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a18f4:	4631      	mov	r1, r6
 80a18f6:	4668      	mov	r0, sp
 80a18f8:	f7ff ffae 	bl	80a1858 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a18fc:	68e0      	ldr	r0, [r4, #12]
 80a18fe:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a1902:	b108      	cbz	r0, 80a1908 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x90>
 80a1904:	f002 fe8e 	bl	80a4624 <strdup>
 80a1908:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a190a:	2010      	movs	r0, #16
 80a190c:	f8ad 5014 	strh.w	r5, [sp, #20]
 80a1910:	f7fe fbc3 	bl	80a009a <_Znwj>
 80a1914:	4605      	mov	r5, r0
 80a1916:	b330      	cbz	r0, 80a1966 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xee>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1918:	f04f 0800 	mov.w	r8, #0
 80a191c:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1920:	2018      	movs	r0, #24
 80a1922:	f7fe fbba 	bl	80a009a <_Znwj>
 80a1926:	4604      	mov	r4, r0
 80a1928:	b1c0      	cbz	r0, 80a195c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe4>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a192a:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a192e:	4601      	mov	r1, r0
 80a1930:	4668      	mov	r0, sp
 80a1932:	f7ff ff61 	bl	80a17f8 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1936:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
 80a1938:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a193a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a193c:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a193e:	9202      	str	r2, [sp, #8]
 80a1940:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1942:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a1944:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80a1948:	9203      	str	r2, [sp, #12]
 80a194a:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
 80a194c:	f64f 739c 	movw	r3, #65436	; 0xff9c
 80a1950:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a1954:	9b04      	ldr	r3, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1956:	f8cd 8010 	str.w	r8, [sp, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a195a:	6123      	str	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a195c:	4b0d      	ldr	r3, [pc, #52]	; (80a1994 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x11c>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a195e:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a1960:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a1962:	4b0d      	ldr	r3, [pc, #52]	; (80a1998 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
 80a1964:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a1966:	9804      	ldr	r0, [sp, #16]
 80a1968:	f7ff fe78 	bl	80a165c <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a196c:	4668      	mov	r0, sp
 80a196e:	f7ff feb9 	bl	80a16e4 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a1972:	2200      	movs	r2, #0
 80a1974:	4629      	mov	r1, r5
 80a1976:	4809      	ldr	r0, [pc, #36]	; (80a199c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
 80a1978:	f7ff fe04 	bl	80a1584 <application_thread_invoke>
 80a197c:	4630      	mov	r0, r6
 80a197e:	f7ff feb1 	bl	80a16e4 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a1982:	4630      	mov	r0, r6
 80a1984:	f7fe fb8d 	bl	80a00a2 <_ZdlPv>
 80a1988:	4638      	mov	r0, r7
 80a198a:	f7ff fe67 	bl	80a165c <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
 80a198e:	b006      	add	sp, #24
 80a1990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a1994:	080a182b 	.word	0x080a182b
 80a1998:	080a1a89 	.word	0x080a1a89
 80a199c:	080a16a3 	.word	0x080a16a3

080a19a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a19a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a19a4:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a19a6:	ad07      	add	r5, sp, #28
 80a19a8:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a19ac:	4606      	mov	r6, r0
 80a19ae:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a19b0:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a19b2:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a19b4:	460f      	mov	r7, r1
 80a19b6:	4690      	mov	r8, r2
 80a19b8:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a19bc:	f8c5 b004 	str.w	fp, [r5, #4]
 80a19c0:	f8c5 b008 	str.w	fp, [r5, #8]
 80a19c4:	9307      	str	r3, [sp, #28]
 80a19c6:	f7fe fb68 	bl	80a009a <_Znwj>
 80a19ca:	4604      	mov	r4, r0
 80a19cc:	b138      	cbz	r0, 80a19de <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a19ce:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a19d2:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a19d6:	f8c0 b004 	str.w	fp, [r0, #4]
 80a19da:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a19de:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a19e0:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 80a19e2:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a19e4:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a19e6:	f7fe fb58 	bl	80a009a <_Znwj>
 80a19ea:	b128      	cbz	r0, 80a19f8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a19ec:	2301      	movs	r3, #1
 80a19ee:	6043      	str	r3, [r0, #4]
 80a19f0:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 80a19f2:	4b23      	ldr	r3, [pc, #140]	; (80a1a80 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
 80a19f4:	60c4      	str	r4, [r0, #12]
 80a19f6:	6003      	str	r3, [r0, #0]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 80a19f8:	4b22      	ldr	r3, [pc, #136]	; (80a1a84 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a19fa:	9004      	str	r0, [sp, #16]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a19fc:	2008      	movs	r0, #8
 80a19fe:	9308      	str	r3, [sp, #32]
 80a1a00:	f7fe fb4b 	bl	80a009a <_Znwj>
 80a1a04:	4604      	mov	r4, r0
 80a1a06:	b128      	cbz	r0, 80a1a14 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1a08:	9b03      	ldr	r3, [sp, #12]
 80a1a0a:	a904      	add	r1, sp, #16
 80a1a0c:	f840 3b04 	str.w	r3, [r0], #4
 80a1a10:	f7ff fece 	bl	80a17b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a1a14:	9500      	str	r5, [sp, #0]
 80a1a16:	fa5f f38a 	uxtb.w	r3, sl
 80a1a1a:	464a      	mov	r2, r9
 80a1a1c:	4641      	mov	r1, r8
 80a1a1e:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 80a1a20:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a1a22:	f7ff fdf3 	bl	80a160c <spark_send_event>
 80a1a26:	b9b8      	cbnz	r0, 80a1a58 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 80a1a28:	9b03      	ldr	r3, [sp, #12]
 80a1a2a:	785b      	ldrb	r3, [r3, #1]
 80a1a2c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a1a30:	b993      	cbnz	r3, 80a1a58 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a1a32:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 80a1a36:	a905      	add	r1, sp, #20
 80a1a38:	a803      	add	r0, sp, #12
 80a1a3a:	9205      	str	r2, [sp, #20]
 80a1a3c:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a1a40:	f7ff ff1a 	bl	80a1878 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a1a44:	9805      	ldr	r0, [sp, #20]
 80a1a46:	f7ff fe09 	bl	80a165c <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a1a4a:	a805      	add	r0, sp, #20
 80a1a4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a1a4e:	f7ff feb6 	bl	80a17be <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a1a52:	a806      	add	r0, sp, #24
 80a1a54:	f7fe fcc0 	bl	80a03d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1a58:	9b03      	ldr	r3, [sp, #12]
 80a1a5a:	a904      	add	r1, sp, #16
 80a1a5c:	a806      	add	r0, sp, #24
 80a1a5e:	9305      	str	r3, [sp, #20]
 80a1a60:	f7ff fea6 	bl	80a17b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 80a1a64:	a905      	add	r1, sp, #20
 80a1a66:	4630      	mov	r0, r6
 80a1a68:	f7ff fe91 	bl	80a178e <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a1a6c:	a806      	add	r0, sp, #24
 80a1a6e:	f7fe fcb3 	bl	80a03d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1a72:	a804      	add	r0, sp, #16
 80a1a74:	f7fe fcb0 	bl	80a03d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 80a1a78:	4630      	mov	r0, r6
 80a1a7a:	b00b      	add	sp, #44	; 0x2c
 80a1a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1a80:	080a4908 	.word	0x080a4908
 80a1a84:	080a1bf1 	.word	0x080a1bf1

080a1a88 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a1a88:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a1a8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1a8c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a1a8e:	d006      	beq.n	80a1a9e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 80a1a90:	2a03      	cmp	r2, #3
 80a1a92:	d017      	beq.n	80a1ac4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 80a1a94:	2a01      	cmp	r2, #1
 80a1a96:	d120      	bne.n	80a1ada <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a1a98:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a1a9a:	6003      	str	r3, [r0, #0]
	      break;
 80a1a9c:	e01d      	b.n	80a1ada <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a1a9e:	2018      	movs	r0, #24
 80a1aa0:	680e      	ldr	r6, [r1, #0]
 80a1aa2:	f7fe fafa 	bl	80a009a <_Znwj>
 80a1aa6:	4605      	mov	r5, r0
 80a1aa8:	b150      	cbz	r0, 80a1ac0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a1aaa:	4631      	mov	r1, r6
 80a1aac:	f7ff fed4 	bl	80a1858 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a1ab0:	6930      	ldr	r0, [r6, #16]
 80a1ab2:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a1ab6:	b108      	cbz	r0, 80a1abc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 80a1ab8:	f002 fdb4 	bl	80a4624 <strdup>
 80a1abc:	6128      	str	r0, [r5, #16]
 80a1abe:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a1ac0:	6025      	str	r5, [r4, #0]
 80a1ac2:	e00a      	b.n	80a1ada <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a1ac4:	6804      	ldr	r4, [r0, #0]
 80a1ac6:	b144      	cbz	r4, 80a1ada <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a1ac8:	6920      	ldr	r0, [r4, #16]
 80a1aca:	f7ff fdc7 	bl	80a165c <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1ace:	4620      	mov	r0, r4
 80a1ad0:	f7ff fe08 	bl	80a16e4 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a1ad4:	4620      	mov	r0, r4
 80a1ad6:	f7fe fae4 	bl	80a00a2 <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a1ada:	2000      	movs	r0, #0
 80a1adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1ade <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a1ade:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1ae0:	2300      	movs	r3, #0
 80a1ae2:	6083      	str	r3, [r0, #8]
 80a1ae4:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a1ae6:	4604      	mov	r4, r0
 80a1ae8:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a1aea:	b12b      	cbz	r3, 80a1af8 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a1aec:	2202      	movs	r2, #2
 80a1aee:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a1af0:	68eb      	ldr	r3, [r5, #12]
 80a1af2:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a1af4:	68ab      	ldr	r3, [r5, #8]
 80a1af6:	60a3      	str	r3, [r4, #8]
	}
    }
 80a1af8:	4620      	mov	r0, r4
 80a1afa:	bd38      	pop	{r3, r4, r5, pc}

080a1afc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a1afc:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a1afe:	b570      	push	{r4, r5, r6, lr}
 80a1b00:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a1b02:	d006      	beq.n	80a1b12 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 80a1b04:	2a03      	cmp	r2, #3
 80a1b06:	d011      	beq.n	80a1b2c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 80a1b08:	2a01      	cmp	r2, #1
 80a1b0a:	d117      	bne.n	80a1b3c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a1b0c:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a1b0e:	6003      	str	r3, [r0, #0]
	      break;
 80a1b10:	e014      	b.n	80a1b3c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a1b12:	2014      	movs	r0, #20
 80a1b14:	680e      	ldr	r6, [r1, #0]
 80a1b16:	f7fe fac0 	bl	80a009a <_Znwj>
 80a1b1a:	4605      	mov	r5, r0
 80a1b1c:	b120      	cbz	r0, 80a1b28 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a1b1e:	4631      	mov	r1, r6
 80a1b20:	f7ff ffdd 	bl	80a1ade <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a1b24:	7c33      	ldrb	r3, [r6, #16]
 80a1b26:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a1b28:	6025      	str	r5, [r4, #0]
 80a1b2a:	e007      	b.n	80a1b3c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a1b2c:	6804      	ldr	r4, [r0, #0]
 80a1b2e:	b12c      	cbz	r4, 80a1b3c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1b30:	4620      	mov	r0, r4
 80a1b32:	f7ff fdd7 	bl	80a16e4 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a1b36:	4620      	mov	r0, r4
 80a1b38:	f7fe fab3 	bl	80a00a2 <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a1b3c:	2000      	movs	r0, #0
 80a1b3e:	bd70      	pop	{r4, r5, r6, pc}

080a1b40 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 80a1b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1b42:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a1b44:	f3bf 8f5f 	dmb	sy
 80a1b48:	b087      	sub	sp, #28
 80a1b4a:	2300      	movs	r3, #0
 80a1b4c:	e850 6f00 	ldrex	r6, [r0]
 80a1b50:	e840 3200 	strex	r2, r3, [r0]
 80a1b54:	2a00      	cmp	r2, #0
 80a1b56:	d1f9      	bne.n	80a1b4c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 80a1b58:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a1b5c:	2e00      	cmp	r6, #0
 80a1b5e:	d03e      	beq.n	80a1bde <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x9e>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a1b60:	4618      	mov	r0, r3
 80a1b62:	f7ff fd07 	bl	80a1574 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a1b66:	4607      	mov	r7, r0
 80a1b68:	b120      	cbz	r0, 80a1b74 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a1b6a:	4621      	mov	r1, r4
 80a1b6c:	4630      	mov	r0, r6
 80a1b6e:	f7ff fe63 	bl	80a1838 <_ZNKSt8functionIFvRKbEEclES1_>
 80a1b72:	e02e      	b.n	80a1bd2 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a1b74:	4631      	mov	r1, r6
 80a1b76:	a801      	add	r0, sp, #4
 80a1b78:	f7ff ffb1 	bl	80a1ade <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a1b7c:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a1b7e:	2010      	movs	r0, #16
 80a1b80:	f88d 3014 	strb.w	r3, [sp, #20]
 80a1b84:	f7fe fa89 	bl	80a009a <_Znwj>
 80a1b88:	4605      	mov	r5, r0
 80a1b8a:	b1d0      	cbz	r0, 80a1bc2 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1b8c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1b8e:	2014      	movs	r0, #20
 80a1b90:	f7fe fa83 	bl	80a009a <_Znwj>
 80a1b94:	4604      	mov	r4, r0
 80a1b96:	b178      	cbz	r0, 80a1bb8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1b98:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a1b9a:	4601      	mov	r1, r0
 80a1b9c:	a801      	add	r0, sp, #4
 80a1b9e:	f7ff fe2b 	bl	80a17f8 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1ba2:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a1ba4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1ba6:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1ba8:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a1baa:	9203      	str	r2, [sp, #12]
 80a1bac:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1bae:	60e3      	str	r3, [r4, #12]
 80a1bb0:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a1bb4:	9204      	str	r2, [sp, #16]
 80a1bb6:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a1bb8:	4b0a      	ldr	r3, [pc, #40]	; (80a1be4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1bba:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a1bbc:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a1bbe:	4b0a      	ldr	r3, [pc, #40]	; (80a1be8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 80a1bc0:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1bc2:	a801      	add	r0, sp, #4
 80a1bc4:	f7ff fd8e 	bl	80a16e4 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a1bc8:	2200      	movs	r2, #0
 80a1bca:	4629      	mov	r1, r5
 80a1bcc:	4807      	ldr	r0, [pc, #28]	; (80a1bec <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 80a1bce:	f7ff fcd9 	bl	80a1584 <application_thread_invoke>
 80a1bd2:	4630      	mov	r0, r6
 80a1bd4:	f7ff fd86 	bl	80a16e4 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a1bd8:	4630      	mov	r0, r6
 80a1bda:	f7fe fa62 	bl	80a00a2 <_ZdlPv>
        }
    }
 80a1bde:	b007      	add	sp, #28
 80a1be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1be2:	bf00      	nop
 80a1be4:	080a184b 	.word	0x080a184b
 80a1be8:	080a1afd 	.word	0x080a1afd
 80a1bec:	080a16a3 	.word	0x080a16a3

080a1bf0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a1bf0:	b530      	push	{r4, r5, lr}
 80a1bf2:	4604      	mov	r4, r0
 80a1bf4:	b085      	sub	sp, #20
 80a1bf6:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a1bf8:	4668      	mov	r0, sp
 80a1bfa:	4611      	mov	r1, r2
 80a1bfc:	f7ff fddf 	bl	80a17be <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a1c00:	b17c      	cbz	r4, 80a1c22 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a1c02:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a1c04:	4628      	mov	r0, r5
 80a1c06:	b10d      	cbz	r5, 80a1c0c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 80a1c08:	f002 fd0c 	bl	80a4624 <strdup>
 80a1c0c:	9002      	str	r0, [sp, #8]
 80a1c0e:	a902      	add	r1, sp, #8
 80a1c10:	4668      	mov	r0, sp
 80a1c12:	f8ad 400c 	strh.w	r4, [sp, #12]
 80a1c16:	f7ff fe2f 	bl	80a1878 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a1c1a:	9802      	ldr	r0, [sp, #8]
 80a1c1c:	f7ff fd1e 	bl	80a165c <free>
 80a1c20:	e01d      	b.n	80a1c5e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a1c22:	f04f 0201 	mov.w	r2, #1
 80a1c26:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a1c28:	f88d 4008 	strb.w	r4, [sp, #8]
 80a1c2c:	e8d0 3f4f 	ldrexb	r3, [r0]
 80a1c30:	42a3      	cmp	r3, r4
 80a1c32:	d103      	bne.n	80a1c3c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 80a1c34:	e8c0 2f41 	strexb	r1, r2, [r0]
 80a1c38:	2900      	cmp	r1, #0
 80a1c3a:	d1f7      	bne.n	80a1c2c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 80a1c3c:	d002      	beq.n	80a1c44 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 80a1c3e:	f88d 3008 	strb.w	r3, [sp, #8]
 80a1c42:	e00c      	b.n	80a1c5e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 80a1c44:	f110 010c 	adds.w	r1, r0, #12
 80a1c48:	f04f 0301 	mov.w	r3, #1
 80a1c4c:	bf18      	it	ne
 80a1c4e:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a1c50:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 80a1c54:	3004      	adds	r0, #4
 80a1c56:	f800 3c03 	strb.w	r3, [r0, #-3]
 80a1c5a:	f7ff ff71 	bl	80a1b40 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 80a1c5e:	a801      	add	r0, sp, #4
 80a1c60:	f7fe fbba 	bl	80a03d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 80a1c64:	b005      	add	sp, #20
 80a1c66:	bd30      	pop	{r4, r5, pc}

080a1c68 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a1c68:	4770      	bx	lr

080a1c6a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a1c6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1c6c:	4606      	mov	r6, r0
 80a1c6e:	4615      	mov	r5, r2
 80a1c70:	460c      	mov	r4, r1
 80a1c72:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1c74:	42bc      	cmp	r4, r7
 80a1c76:	d006      	beq.n	80a1c86 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a1c78:	6833      	ldr	r3, [r6, #0]
 80a1c7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a1c7e:	689b      	ldr	r3, [r3, #8]
 80a1c80:	4630      	mov	r0, r6
 80a1c82:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a1c84:	e7f6      	b.n	80a1c74 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a1c86:	4628      	mov	r0, r5
 80a1c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1c8a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a1c8a:	2200      	movs	r2, #0
 80a1c8c:	7c00      	ldrb	r0, [r0, #16]
 80a1c8e:	f7ff bb37 	b.w	80a1300 <HAL_I2C_Write_Data>

080a1c92 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a1c92:	2100      	movs	r1, #0
 80a1c94:	7c00      	ldrb	r0, [r0, #16]
 80a1c96:	f7ff bb3b 	b.w	80a1310 <HAL_I2C_Available_Data>

080a1c9a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a1c9a:	2100      	movs	r1, #0
 80a1c9c:	7c00      	ldrb	r0, [r0, #16]
 80a1c9e:	f7ff bb3f 	b.w	80a1320 <HAL_I2C_Read_Data>

080a1ca2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a1ca2:	2100      	movs	r1, #0
 80a1ca4:	7c00      	ldrb	r0, [r0, #16]
 80a1ca6:	f7ff bb43 	b.w	80a1330 <HAL_I2C_Peek_Data>

080a1caa <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a1caa:	2100      	movs	r1, #0
 80a1cac:	7c00      	ldrb	r0, [r0, #16]
 80a1cae:	f7ff bb47 	b.w	80a1340 <HAL_I2C_Flush_Data>

080a1cb2 <_ZN7TwoWireD0Ev>:
 80a1cb2:	b510      	push	{r4, lr}
 80a1cb4:	4604      	mov	r4, r0
 80a1cb6:	f7fe f9f4 	bl	80a00a2 <_ZdlPv>
 80a1cba:	4620      	mov	r0, r4
 80a1cbc:	bd10      	pop	{r4, pc}
	...

080a1cc0 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a1cc0:	b510      	push	{r4, lr}
 80a1cc2:	4604      	mov	r4, r0
 80a1cc4:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a1cc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1cca:	60a3      	str	r3, [r4, #8]
 80a1ccc:	4b04      	ldr	r3, [pc, #16]	; (80a1ce0 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1cce:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a1cd0:	7420      	strb	r0, [r4, #16]
 80a1cd2:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a1cd4:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a1cd6:	f7ff fb43 	bl	80a1360 <HAL_I2C_Init>

}
 80a1cda:	4620      	mov	r0, r4
 80a1cdc:	bd10      	pop	{r4, pc}
 80a1cde:	bf00      	nop
 80a1ce0:	080a4924 	.word	0x080a4924

080a1ce4 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a1ce4:	2100      	movs	r1, #0
 80a1ce6:	7c00      	ldrb	r0, [r0, #16]
 80a1ce8:	f7ff bb32 	b.w	80a1350 <HAL_I2C_Is_Enabled>

080a1cec <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a1cec:	4770      	bx	lr

080a1cee <_ZN9IPAddressD0Ev>:
 80a1cee:	b510      	push	{r4, lr}
 80a1cf0:	4604      	mov	r4, r0
 80a1cf2:	f7fe f9d6 	bl	80a00a2 <_ZdlPv>
 80a1cf6:	4620      	mov	r0, r4
 80a1cf8:	bd10      	pop	{r4, pc}

080a1cfa <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a1cfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1cfc:	460f      	mov	r7, r1
 80a1cfe:	f100 0608 	add.w	r6, r0, #8
 80a1d02:	1d05      	adds	r5, r0, #4
 80a1d04:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1d06:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a1d0a:	220a      	movs	r2, #10
 80a1d0c:	4638      	mov	r0, r7
 80a1d0e:	f000 f8aa 	bl	80a1e66 <_ZN5Print5printEhi>
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1d12:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1d14:	4404      	add	r4, r0
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1d16:	d007      	beq.n	80a1d28 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a1d18:	2c00      	cmp	r4, #0
 80a1d1a:	d0f4      	beq.n	80a1d06 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a1d1c:	212e      	movs	r1, #46	; 0x2e
 80a1d1e:	4638      	mov	r0, r7
 80a1d20:	f000 f874 	bl	80a1e0c <_ZN5Print5printEc>
 80a1d24:	4404      	add	r4, r0
 80a1d26:	e7ee      	b.n	80a1d06 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a1d28:	4620      	mov	r0, r4
 80a1d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1d2c <_ZN9IPAddressC1Ev>:
#include "spark_wiring_ipaddress.h"
#include "spark_wiring_print.h"
#include "spark_wiring_platform.h"
#include "string.h"

IPAddress::IPAddress()
 80a1d2c:	b510      	push	{r4, lr}
 80a1d2e:	4604      	mov	r4, r0
 80a1d30:	4b04      	ldr	r3, [pc, #16]	; (80a1d44 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a1d32:	2211      	movs	r2, #17
 80a1d34:	f840 3b04 	str.w	r3, [r0], #4
 80a1d38:	2100      	movs	r1, #0
 80a1d3a:	f002 fc30 	bl	80a459e <memset>
{
    clear();
}
 80a1d3e:	4620      	mov	r0, r4
 80a1d40:	bd10      	pop	{r4, pc}
 80a1d42:	bf00      	nop
 80a1d44:	080a494c 	.word	0x080a494c

080a1d48 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a1d48:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a1d4a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a1d4e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a1d52:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a1d56:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a1d5a:	2304      	movs	r3, #4
 80a1d5c:	6041      	str	r1, [r0, #4]
 80a1d5e:	7503      	strb	r3, [r0, #20]
 80a1d60:	bd10      	pop	{r4, pc}
	...

080a1d64 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a1d64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1d66:	4d04      	ldr	r5, [pc, #16]	; (80a1d78 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a1d68:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a1d6a:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a1d6e:	9500      	str	r5, [sp, #0]
 80a1d70:	f7ff ffea 	bl	80a1d48 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1d74:	b003      	add	sp, #12
 80a1d76:	bd30      	pop	{r4, r5, pc}
 80a1d78:	080a494c 	.word	0x080a494c

080a1d7c <_ZN9IPAddressaSEPKh>:
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
 80a1d7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
 80a1d7e:	780d      	ldrb	r5, [r1, #0]
 80a1d80:	788b      	ldrb	r3, [r1, #2]
 80a1d82:	784a      	ldrb	r2, [r1, #1]
 80a1d84:	78c9      	ldrb	r1, [r1, #3]
 80a1d86:	9100      	str	r1, [sp, #0]
 80a1d88:	4629      	mov	r1, r5
 80a1d8a:	f7ff ffdd 	bl	80a1d48 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
 80a1d8e:	b003      	add	sp, #12
 80a1d90:	bd30      	pop	{r4, r5, pc}
	...

080a1d94 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(uint32_t address)
{
    *this = address;
}

IPAddress::IPAddress(const uint8_t* address)
 80a1d94:	b510      	push	{r4, lr}
 80a1d96:	4604      	mov	r4, r0
 80a1d98:	4b02      	ldr	r3, [pc, #8]	; (80a1da4 <_ZN9IPAddressC1EPKh+0x10>)
 80a1d9a:	6003      	str	r3, [r0, #0]
{
    *this = address;
 80a1d9c:	f7ff ffee 	bl	80a1d7c <_ZN9IPAddressaSEPKh>
}
 80a1da0:	4620      	mov	r0, r4
 80a1da2:	bd10      	pop	{r4, pc}
 80a1da4:	080a494c 	.word	0x080a494c

080a1da8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a1da8:	4a01      	ldr	r2, [pc, #4]	; (80a1db0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a1daa:	4b02      	ldr	r3, [pc, #8]	; (80a1db4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a1dac:	601a      	str	r2, [r3, #0]
 80a1dae:	4770      	bx	lr
 80a1db0:	080a4a11 	.word	0x080a4a11
 80a1db4:	20000410 	.word	0x20000410

080a1db8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a1db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1dba:	4606      	mov	r6, r0
 80a1dbc:	460d      	mov	r5, r1
 80a1dbe:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a1dc0:	2400      	movs	r4, #0
  while (size--) {
 80a1dc2:	42bd      	cmp	r5, r7
 80a1dc4:	d00c      	beq.n	80a1de0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a1dc6:	6833      	ldr	r3, [r6, #0]
 80a1dc8:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a1dcc:	689b      	ldr	r3, [r3, #8]
 80a1dce:	4630      	mov	r0, r6
 80a1dd0:	4798      	blx	r3
     if (chunk>=0)
 80a1dd2:	2800      	cmp	r0, #0
 80a1dd4:	db01      	blt.n	80a1dda <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a1dd6:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a1dd8:	e7f3      	b.n	80a1dc2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a1dda:	2c00      	cmp	r4, #0
 80a1ddc:	bf08      	it	eq
 80a1dde:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a1de0:	4620      	mov	r0, r4
 80a1de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1de4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a1de4:	b570      	push	{r4, r5, r6, lr}
 80a1de6:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a1de8:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a1dea:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a1dec:	b149      	cbz	r1, 80a1e02 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a1dee:	f002 fc34 	bl	80a465a <strlen>
 80a1df2:	682b      	ldr	r3, [r5, #0]
 80a1df4:	4602      	mov	r2, r0
 80a1df6:	4621      	mov	r1, r4
 80a1df8:	4628      	mov	r0, r5
    }
 80a1dfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a1dfe:	68db      	ldr	r3, [r3, #12]
 80a1e00:	4718      	bx	r3
    }
 80a1e02:	bd70      	pop	{r4, r5, r6, pc}

080a1e04 <_ZN5Print5printEPKc>:
 80a1e04:	b508      	push	{r3, lr}
 80a1e06:	f7ff ffed 	bl	80a1de4 <_ZN5Print5writeEPKc>
 80a1e0a:	bd08      	pop	{r3, pc}

080a1e0c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a1e0c:	6803      	ldr	r3, [r0, #0]
 80a1e0e:	689b      	ldr	r3, [r3, #8]
 80a1e10:	4718      	bx	r3

080a1e12 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a1e12:	2a01      	cmp	r2, #1
 80a1e14:	bf98      	it	ls
 80a1e16:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a1e18:	b530      	push	{r4, r5, lr}
 80a1e1a:	460b      	mov	r3, r1
 80a1e1c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a1e1e:	2100      	movs	r1, #0
 80a1e20:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a1e24:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a1e28:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a1e2c:	fb05 3312 	mls	r3, r5, r2, r3
 80a1e30:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1e32:	2b09      	cmp	r3, #9
 80a1e34:	bf94      	ite	ls
 80a1e36:	3330      	addls	r3, #48	; 0x30
 80a1e38:	3337      	addhi	r3, #55	; 0x37
 80a1e3a:	b2db      	uxtb	r3, r3
 80a1e3c:	4621      	mov	r1, r4
 80a1e3e:	f804 3901 	strb.w	r3, [r4], #-1
 80a1e42:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a1e44:	2d00      	cmp	r5, #0
 80a1e46:	d1ef      	bne.n	80a1e28 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a1e48:	f7ff ffcc 	bl	80a1de4 <_ZN5Print5writeEPKc>
}
 80a1e4c:	b00b      	add	sp, #44	; 0x2c
 80a1e4e:	bd30      	pop	{r4, r5, pc}

080a1e50 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a1e50:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a1e52:	b922      	cbnz	r2, 80a1e5e <_ZN5Print5printEmi+0xe>
 80a1e54:	6803      	ldr	r3, [r0, #0]
 80a1e56:	b2c9      	uxtb	r1, r1
 80a1e58:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a1e5a:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a1e5c:	4718      	bx	r3
  else return printNumber(n, base);
 80a1e5e:	b2d2      	uxtb	r2, r2
}
 80a1e60:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a1e62:	f7ff bfd6 	b.w	80a1e12 <_ZN5Print11printNumberEmh>

080a1e66 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a1e66:	f7ff bff3 	b.w	80a1e50 <_ZN5Print5printEmi>

080a1e6a <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 80a1e6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1e6e:	4607      	mov	r7, r0
 80a1e70:	460e      	mov	r6, r1
  if (base == 0) {
 80a1e72:	4615      	mov	r5, r2
 80a1e74:	b92a      	cbnz	r2, 80a1e82 <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a1e76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 80a1e7a:	6803      	ldr	r3, [r0, #0]
 80a1e7c:	b2c9      	uxtb	r1, r1
 80a1e7e:	689b      	ldr	r3, [r3, #8]
 80a1e80:	4718      	bx	r3
  } else if (base == 10) {
 80a1e82:	2a0a      	cmp	r2, #10
 80a1e84:	d102      	bne.n	80a1e8c <_ZN5Print5printEli+0x22>
    if (n < 0) {
 80a1e86:	2900      	cmp	r1, #0
 80a1e88:	da01      	bge.n	80a1e8e <_ZN5Print5printEli+0x24>
 80a1e8a:	e004      	b.n	80a1e96 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a1e8c:	b2d2      	uxtb	r2, r2
  }
}
 80a1e8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a1e92:	f7ff bfbe 	b.w	80a1e12 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a1e96:	212d      	movs	r1, #45	; 0x2d
 80a1e98:	f7ff ffb8 	bl	80a1e0c <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 80a1e9c:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a1e9e:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 80a1ea0:	4271      	negs	r1, r6
 80a1ea2:	4638      	mov	r0, r7
 80a1ea4:	f7ff ffb5 	bl	80a1e12 <_ZN5Print11printNumberEmh>
 80a1ea8:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a1eaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080a1eb0 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a1eb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a1eb4:	4619      	mov	r1, r3

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a1eb6:	4680      	mov	r8, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a1eb8:	4610      	mov	r0, r2

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a1eba:	4617      	mov	r7, r2
 80a1ebc:	461e      	mov	r6, r3
 80a1ebe:	f89d 5020 	ldrb.w	r5, [sp, #32]
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a1ec2:	f001 fe77 	bl	80a3bb4 <__aeabi_dcmpun>
 80a1ec6:	b108      	cbz	r0, 80a1ecc <_ZN5Print10printFloatEdh+0x1c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1ec8:	4947      	ldr	r1, [pc, #284]	; (80a1fe8 <_ZN5Print10printFloatEdh+0x138>)
 80a1eca:	e012      	b.n	80a1ef2 <_ZN5Print10printFloatEdh+0x42>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a1ecc:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 80a1ed0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a1ed4:	4b45      	ldr	r3, [pc, #276]	; (80a1fec <_ZN5Print10printFloatEdh+0x13c>)
 80a1ed6:	4638      	mov	r0, r7
 80a1ed8:	4621      	mov	r1, r4
 80a1eda:	f001 fe6b 	bl	80a3bb4 <__aeabi_dcmpun>
 80a1ede:	b968      	cbnz	r0, 80a1efc <_ZN5Print10printFloatEdh+0x4c>
 80a1ee0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80a1ee4:	4b41      	ldr	r3, [pc, #260]	; (80a1fec <_ZN5Print10printFloatEdh+0x13c>)
 80a1ee6:	4638      	mov	r0, r7
 80a1ee8:	4621      	mov	r1, r4
 80a1eea:	f001 fe45 	bl	80a3b78 <__aeabi_dcmple>
 80a1eee:	b928      	cbnz	r0, 80a1efc <_ZN5Print10printFloatEdh+0x4c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1ef0:	493f      	ldr	r1, [pc, #252]	; (80a1ff0 <_ZN5Print10printFloatEdh+0x140>)
 80a1ef2:	4640      	mov	r0, r8
 80a1ef4:	f7ff ff76 	bl	80a1de4 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a1ef8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80a1efc:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a1f00:	4b3c      	ldr	r3, [pc, #240]	; (80a1ff4 <_ZN5Print10printFloatEdh+0x144>)
 80a1f02:	4638      	mov	r0, r7
 80a1f04:	4631      	mov	r1, r6
 80a1f06:	f001 fe4b 	bl	80a3ba0 <__aeabi_dcmpgt>
 80a1f0a:	b108      	cbz	r0, 80a1f10 <_ZN5Print10printFloatEdh+0x60>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1f0c:	493a      	ldr	r1, [pc, #232]	; (80a1ff8 <_ZN5Print10printFloatEdh+0x148>)
 80a1f0e:	e7f0      	b.n	80a1ef2 <_ZN5Print10printFloatEdh+0x42>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 80a1f10:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a1f14:	4b39      	ldr	r3, [pc, #228]	; (80a1ffc <_ZN5Print10printFloatEdh+0x14c>)
 80a1f16:	4638      	mov	r0, r7
 80a1f18:	4631      	mov	r1, r6
 80a1f1a:	f001 fe23 	bl	80a3b64 <__aeabi_dcmplt>
 80a1f1e:	2800      	cmp	r0, #0
 80a1f20:	d1f4      	bne.n	80a1f0c <_ZN5Print10printFloatEdh+0x5c>

  // Handle negative numbers
  if (number < 0.0)
 80a1f22:	2200      	movs	r2, #0
 80a1f24:	2300      	movs	r3, #0
 80a1f26:	4638      	mov	r0, r7
 80a1f28:	4631      	mov	r1, r6
 80a1f2a:	f001 fe1b 	bl	80a3b64 <__aeabi_dcmplt>
 80a1f2e:	b138      	cbz	r0, 80a1f40 <_ZN5Print10printFloatEdh+0x90>
  {
     n += print('-');
 80a1f30:	212d      	movs	r1, #45	; 0x2d
 80a1f32:	4640      	mov	r0, r8
 80a1f34:	f7ff ff6a 	bl	80a1e0c <_ZN5Print5printEc>
     number = -number;
 80a1f38:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
 80a1f3c:	4604      	mov	r4, r0
 80a1f3e:	e000      	b.n	80a1f42 <_ZN5Print10printFloatEdh+0x92>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a1f40:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a1f42:	492f      	ldr	r1, [pc, #188]	; (80a2000 <_ZN5Print10printFloatEdh+0x150>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a1f44:	f04f 0900 	mov.w	r9, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a1f48:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
 80a1f4a:	fa5f f389 	uxtb.w	r3, r9
 80a1f4e:	429d      	cmp	r5, r3
 80a1f50:	d906      	bls.n	80a1f60 <_ZN5Print10printFloatEdh+0xb0>
    rounding /= 10.0;
 80a1f52:	2200      	movs	r2, #0
 80a1f54:	4b2b      	ldr	r3, [pc, #172]	; (80a2004 <_ZN5Print10printFloatEdh+0x154>)
 80a1f56:	f001 fcbd 	bl	80a38d4 <__aeabi_ddiv>
 80a1f5a:	f109 0901 	add.w	r9, r9, #1
 80a1f5e:	e7f4      	b.n	80a1f4a <_ZN5Print10printFloatEdh+0x9a>

  number += rounding;
 80a1f60:	463a      	mov	r2, r7
 80a1f62:	4633      	mov	r3, r6
 80a1f64:	f001 f9da 	bl	80a331c <__adddf3>
 80a1f68:	460f      	mov	r7, r1
 80a1f6a:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a1f6c:	f001 fe60 	bl	80a3c30 <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a1f70:	220a      	movs	r2, #10
 80a1f72:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a1f74:	4681      	mov	r9, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a1f76:	4640      	mov	r0, r8
 80a1f78:	f7ff ff4b 	bl	80a1e12 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a1f7c:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
 80a1f7e:	b37d      	cbz	r5, 80a1fe0 <_ZN5Print10printFloatEdh+0x130>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
 80a1f80:	4648      	mov	r0, r9
 80a1f82:	f001 fb07 	bl	80a3594 <__aeabi_ui2d>
 80a1f86:	4602      	mov	r2, r0
 80a1f88:	460b      	mov	r3, r1
 80a1f8a:	4630      	mov	r0, r6
 80a1f8c:	4639      	mov	r1, r7
 80a1f8e:	f001 f9c3 	bl	80a3318 <__aeabi_dsub>
 80a1f92:	4606      	mov	r6, r0
 80a1f94:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1f96:	4640      	mov	r0, r8
 80a1f98:	491b      	ldr	r1, [pc, #108]	; (80a2008 <_ZN5Print10printFloatEdh+0x158>)
 80a1f9a:	f7ff ff23 	bl	80a1de4 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
 80a1f9e:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
 80a1fa0:	4b18      	ldr	r3, [pc, #96]	; (80a2004 <_ZN5Print10printFloatEdh+0x154>)
 80a1fa2:	2200      	movs	r2, #0
 80a1fa4:	4630      	mov	r0, r6
 80a1fa6:	4639      	mov	r1, r7
 80a1fa8:	f001 fb6a 	bl	80a3680 <__aeabi_dmul>
 80a1fac:	460f      	mov	r7, r1
 80a1fae:	4606      	mov	r6, r0
    int toPrint = int(remainder);
 80a1fb0:	f001 fe16 	bl	80a3be0 <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a1fb4:	220a      	movs	r2, #10
 80a1fb6:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
 80a1fb8:	4681      	mov	r9, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a1fba:	4640      	mov	r0, r8
 80a1fbc:	f7ff ff55 	bl	80a1e6a <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
 80a1fc0:	4404      	add	r4, r0
    remainder -= toPrint;
 80a1fc2:	4648      	mov	r0, r9
 80a1fc4:	f001 faf6 	bl	80a35b4 <__aeabi_i2d>
 80a1fc8:	4602      	mov	r2, r0
 80a1fca:	460b      	mov	r3, r1
 80a1fcc:	4630      	mov	r0, r6
 80a1fce:	4639      	mov	r1, r7
 80a1fd0:	f001 f9a2 	bl	80a3318 <__aeabi_dsub>
 80a1fd4:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a1fd6:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
 80a1fda:	4606      	mov	r6, r0
 80a1fdc:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a1fde:	d1df      	bne.n	80a1fa0 <_ZN5Print10printFloatEdh+0xf0>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a1fe0:	4620      	mov	r0, r4
 80a1fe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a1fe6:	bf00      	nop
 80a1fe8:	080a4a3a 	.word	0x080a4a3a
 80a1fec:	7fefffff 	.word	0x7fefffff
 80a1ff0:	080a4a44 	.word	0x080a4a44
 80a1ff4:	41efffff 	.word	0x41efffff
 80a1ff8:	080a4a3e 	.word	0x080a4a3e
 80a1ffc:	c1efffff 	.word	0xc1efffff
 80a2000:	3fe00000 	.word	0x3fe00000
 80a2004:	40240000 	.word	0x40240000
 80a2008:	080a4a42 	.word	0x080a4a42

080a200c <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a200c:	f89d 1000 	ldrb.w	r1, [sp]
 80a2010:	9100      	str	r1, [sp, #0]
 80a2012:	f7ff bf4d 	b.w	80a1eb0 <_ZN5Print10printFloatEdh>

080a2016 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a2016:	b510      	push	{r4, lr}
 80a2018:	4604      	mov	r4, r0
 80a201a:	f7ff fb63 	bl	80a16e4 <_ZNSt14_Function_baseD1Ev>
 80a201e:	4620      	mov	r0, r4
 80a2020:	bd10      	pop	{r4, pc}
	...

080a2024 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2024:	4803      	ldr	r0, [pc, #12]	; (80a2034 <_GLOBAL__sub_I_RGB+0x10>)
 80a2026:	2300      	movs	r3, #0
 80a2028:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a202a:	4a03      	ldr	r2, [pc, #12]	; (80a2038 <_GLOBAL__sub_I_RGB+0x14>)
 80a202c:	4903      	ldr	r1, [pc, #12]	; (80a203c <_GLOBAL__sub_I_RGB+0x18>)
 80a202e:	f001 b81f 	b.w	80a3070 <__aeabi_atexit>
 80a2032:	bf00      	nop
 80a2034:	20000414 	.word	0x20000414
 80a2038:	20000370 	.word	0x20000370
 80a203c:	080a2017 	.word	0x080a2017

080a2040 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a2040:	4770      	bx	lr

080a2042 <_ZN8SPIClassD0Ev>:
 80a2042:	b510      	push	{r4, lr}
 80a2044:	4604      	mov	r4, r0
 80a2046:	f7fe f82c 	bl	80a00a2 <_ZdlPv>
 80a204a:	4620      	mov	r0, r4
 80a204c:	bd10      	pop	{r4, pc}
	...

080a2050 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a2050:	b570      	push	{r4, r5, r6, lr}
 80a2052:	4604      	mov	r4, r0
 80a2054:	460e      	mov	r6, r1
 80a2056:	4b07      	ldr	r3, [pc, #28]	; (80a2074 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a2058:	2500      	movs	r5, #0
 80a205a:	6003      	str	r3, [r0, #0]
 80a205c:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a2060:	f7ff f8d6 	bl	80a1210 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a2064:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a2066:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a2068:	f7ff f9c4 	bl	80a13f4 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a206c:	60a5      	str	r5, [r4, #8]
}
 80a206e:	4620      	mov	r0, r4
 80a2070:	bd70      	pop	{r4, r5, r6, pc}
 80a2072:	bf00      	nop
 80a2074:	080a4a50 	.word	0x080a4a50

080a2078 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a2078:	7900      	ldrb	r0, [r0, #4]
 80a207a:	f7ff b9c3 	b.w	80a1404 <HAL_SPI_Is_Enabled>
	...

080a2080 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
 80a2080:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a2084:	4680      	mov	r8, r0
 80a2086:	460d      	mov	r5, r1
 80a2088:	4617      	mov	r7, r2
 80a208a:	461e      	mov	r6, r3
    bool negative = val<0;
    if (negative) {
 80a208c:	2200      	movs	r2, #0
 80a208e:	2300      	movs	r3, #0
 80a2090:	4640      	mov	r0, r8
 80a2092:	4629      	mov	r1, r5
 80a2094:	f001 fd66 	bl	80a3b64 <__aeabi_dcmplt>
 80a2098:	b120      	cbz	r0, 80a20a4 <_Z4dtoadhPc+0x24>
        val = -val;
        *sout++ = '-';
 80a209a:	232d      	movs	r3, #45	; 0x2d
 80a209c:	7033      	strb	r3, [r6, #0]
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
    bool negative = val<0;
    if (negative) {
        val = -val;
 80a209e:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
        *sout++ = '-';
 80a20a2:	3601      	adds	r6, #1
 80a20a4:	2300      	movs	r3, #0
    }
    long scale = 1;
 80a20a6:	2401      	movs	r4, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
 80a20a8:	220a      	movs	r2, #10
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
 80a20aa:	b2d9      	uxtb	r1, r3
 80a20ac:	428f      	cmp	r7, r1
 80a20ae:	d902      	bls.n	80a20b6 <_Z4dtoadhPc+0x36>
        scale *= 10;
 80a20b0:	4354      	muls	r4, r2
 80a20b2:	3301      	adds	r3, #1
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
 80a20b4:	e7f9      	b.n	80a20aa <_Z4dtoadhPc+0x2a>
        scale *= 10;
    val *= scale;   // capture all the significant digits
 80a20b6:	4620      	mov	r0, r4
 80a20b8:	f001 fa7c 	bl	80a35b4 <__aeabi_i2d>
 80a20bc:	4642      	mov	r2, r8
 80a20be:	462b      	mov	r3, r5
 80a20c0:	f001 fade 	bl	80a3680 <__aeabi_dmul>
 80a20c4:	4682      	mov	sl, r0
 80a20c6:	468b      	mov	fp, r1
    uint64_t fixed = uint64_t(val);
 80a20c8:	f002 f898 	bl	80a41fc <__aeabi_d2ulz>
 80a20cc:	4680      	mov	r8, r0
 80a20ce:	4689      	mov	r9, r1
    if ((val-fixed)>=0.5)    // round last digit
 80a20d0:	f001 faa0 	bl	80a3614 <__aeabi_ul2d>
 80a20d4:	4602      	mov	r2, r0
 80a20d6:	460b      	mov	r3, r1
 80a20d8:	4650      	mov	r0, sl
 80a20da:	4659      	mov	r1, fp
 80a20dc:	f001 f91c 	bl	80a3318 <__aeabi_dsub>
 80a20e0:	2200      	movs	r2, #0
 80a20e2:	4b17      	ldr	r3, [pc, #92]	; (80a2140 <_Z4dtoadhPc+0xc0>)
 80a20e4:	f001 fd52 	bl	80a3b8c <__aeabi_dcmpge>
 80a20e8:	b118      	cbz	r0, 80a20f2 <_Z4dtoadhPc+0x72>
        fixed++;
 80a20ea:	f118 0801 	adds.w	r8, r8, #1
 80a20ee:	f149 0900 	adc.w	r9, r9, #0

    unsigned long first = (unsigned long)(fixed / scale);
 80a20f2:	17e5      	asrs	r5, r4, #31
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
 80a20f4:	4622      	mov	r2, r4
 80a20f6:	462b      	mov	r3, r5
 80a20f8:	4640      	mov	r0, r8
 80a20fa:	4649      	mov	r1, r9
 80a20fc:	f002 f866 	bl	80a41cc <__aeabi_uldivmod>
 80a2100:	2301      	movs	r3, #1
 80a2102:	220a      	movs	r2, #10
 80a2104:	4631      	mov	r1, r6
 80a2106:	f000 fdc8 	bl	80a2c9a <ultoa>
    if (prec) {
 80a210a:	b1af      	cbz	r7, 80a2138 <_Z4dtoadhPc+0xb8>
        sout += strlen(sout);
 80a210c:	4630      	mov	r0, r6
 80a210e:	f002 faa4 	bl	80a465a <strlen>
        *sout++ = '.';
 80a2112:	232e      	movs	r3, #46	; 0x2e
 80a2114:	5433      	strb	r3, [r6, r0]
        ultoa(second, sout, 10, prec);
 80a2116:	3001      	adds	r0, #1
 80a2118:	4406      	add	r6, r0
 80a211a:	4622      	mov	r2, r4
 80a211c:	462b      	mov	r3, r5
 80a211e:	4640      	mov	r0, r8
 80a2120:	4649      	mov	r1, r9
 80a2122:	f002 f853 	bl	80a41cc <__aeabi_uldivmod>
 80a2126:	463b      	mov	r3, r7
 80a2128:	4610      	mov	r0, r2
 80a212a:	4631      	mov	r1, r6
 80a212c:	220a      	movs	r2, #10
    }
}
 80a212e:	b001      	add	sp, #4
 80a2130:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    ultoa(first, sout, 10, 1);
    if (prec) {
        sout += strlen(sout);
        *sout++ = '.';
        ultoa(second, sout, 10, prec);
 80a2134:	f000 bdb1 	b.w	80a2c9a <ultoa>
    }
}
 80a2138:	b001      	add	sp, #4
 80a213a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a213e:	bf00      	nop
 80a2140:	3fe00000 	.word	0x3fe00000

080a2144 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a2144:	b510      	push	{r4, lr}
 80a2146:	4604      	mov	r4, r0
{
	free(buffer);
 80a2148:	6800      	ldr	r0, [r0, #0]
 80a214a:	f7ff fa87 	bl	80a165c <free>
}
 80a214e:	4620      	mov	r0, r4
 80a2150:	bd10      	pop	{r4, pc}

080a2152 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a2152:	b510      	push	{r4, lr}
 80a2154:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a2156:	6800      	ldr	r0, [r0, #0]
 80a2158:	b108      	cbz	r0, 80a215e <_ZN6String10invalidateEv+0xc>
 80a215a:	f7ff fa7f 	bl	80a165c <free>
	buffer = NULL;
 80a215e:	2300      	movs	r3, #0
 80a2160:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a2162:	60a3      	str	r3, [r4, #8]
 80a2164:	6063      	str	r3, [r4, #4]
 80a2166:	bd10      	pop	{r4, pc}

080a2168 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a2168:	b538      	push	{r3, r4, r5, lr}
 80a216a:	4604      	mov	r4, r0
 80a216c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a216e:	6800      	ldr	r0, [r0, #0]
 80a2170:	3101      	adds	r1, #1
 80a2172:	f7ff fa7b 	bl	80a166c <realloc>
	if (newbuffer) {
 80a2176:	b110      	cbz	r0, 80a217e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a2178:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a217c:	2001      	movs	r0, #1
	}
	return 0;
}
 80a217e:	bd38      	pop	{r3, r4, r5, pc}

080a2180 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a2180:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a2182:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a2184:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a2186:	b113      	cbz	r3, 80a218e <_ZN6String7reserveEj+0xe>
 80a2188:	6843      	ldr	r3, [r0, #4]
 80a218a:	428b      	cmp	r3, r1
 80a218c:	d207      	bcs.n	80a219e <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a218e:	4620      	mov	r0, r4
 80a2190:	f7ff ffea 	bl	80a2168 <_ZN6String12changeBufferEj>
 80a2194:	b120      	cbz	r0, 80a21a0 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a2196:	68a3      	ldr	r3, [r4, #8]
 80a2198:	b90b      	cbnz	r3, 80a219e <_ZN6String7reserveEj+0x1e>
 80a219a:	6822      	ldr	r2, [r4, #0]
 80a219c:	7013      	strb	r3, [r2, #0]
 80a219e:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a21a0:	bd10      	pop	{r4, pc}

080a21a2 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a21a2:	b570      	push	{r4, r5, r6, lr}
 80a21a4:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a21a6:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a21a8:	4604      	mov	r4, r0
 80a21aa:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a21ac:	f7ff ffe8 	bl	80a2180 <_ZN6String7reserveEj>
 80a21b0:	b918      	cbnz	r0, 80a21ba <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a21b2:	4620      	mov	r0, r4
 80a21b4:	f7ff ffcd 	bl	80a2152 <_ZN6String10invalidateEv>
		return *this;
 80a21b8:	e009      	b.n	80a21ce <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a21ba:	462a      	mov	r2, r5
 80a21bc:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a21be:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a21c0:	6820      	ldr	r0, [r4, #0]
 80a21c2:	f002 f9e1 	bl	80a4588 <memcpy>
	buffer[len] = 0;
 80a21c6:	6822      	ldr	r2, [r4, #0]
 80a21c8:	68a3      	ldr	r3, [r4, #8]
 80a21ca:	2100      	movs	r1, #0
 80a21cc:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a21ce:	4620      	mov	r0, r4
 80a21d0:	bd70      	pop	{r4, r5, r6, pc}

080a21d2 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a21d2:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a21d4:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a21d6:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a21d8:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a21da:	6043      	str	r3, [r0, #4]
	len = 0;
 80a21dc:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a21de:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a21e0:	460d      	mov	r5, r1
 80a21e2:	b139      	cbz	r1, 80a21f4 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a21e4:	4608      	mov	r0, r1
 80a21e6:	f002 fa38 	bl	80a465a <strlen>
 80a21ea:	4629      	mov	r1, r5
 80a21ec:	4602      	mov	r2, r0
 80a21ee:	4620      	mov	r0, r4
 80a21f0:	f7ff ffd7 	bl	80a21a2 <_ZN6String4copyEPKcj>
}
 80a21f4:	4620      	mov	r0, r4
 80a21f6:	bd38      	pop	{r3, r4, r5, pc}

080a21f8 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a21f8:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 80a21fa:	b510      	push	{r4, lr}
 80a21fc:	460b      	mov	r3, r1
 80a21fe:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a2200:	d007      	beq.n	80a2212 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a2202:	6809      	ldr	r1, [r1, #0]
 80a2204:	b119      	cbz	r1, 80a220e <_ZN6StringaSERKS_+0x16>
 80a2206:	689a      	ldr	r2, [r3, #8]
 80a2208:	f7ff ffcb 	bl	80a21a2 <_ZN6String4copyEPKcj>
 80a220c:	e001      	b.n	80a2212 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 80a220e:	f7ff ffa0 	bl	80a2152 <_ZN6String10invalidateEv>

	return *this;
}
 80a2212:	4620      	mov	r0, r4
 80a2214:	bd10      	pop	{r4, pc}

080a2216 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 80a2216:	b510      	push	{r4, lr}
 80a2218:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a221a:	2300      	movs	r3, #0
 80a221c:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a221e:	6043      	str	r3, [r0, #4]
	len = 0;
 80a2220:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a2222:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 80a2224:	f7ff ffe8 	bl	80a21f8 <_ZN6StringaSERKS_>
}
 80a2228:	4620      	mov	r0, r4
 80a222a:	bd10      	pop	{r4, pc}

080a222c <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a222c:	b538      	push	{r3, r4, r5, lr}
 80a222e:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a2230:	460c      	mov	r4, r1
 80a2232:	b141      	cbz	r1, 80a2246 <_ZN6StringaSEPKc+0x1a>
 80a2234:	4608      	mov	r0, r1
 80a2236:	f002 fa10 	bl	80a465a <strlen>
 80a223a:	4621      	mov	r1, r4
 80a223c:	4602      	mov	r2, r0
 80a223e:	4628      	mov	r0, r5
 80a2240:	f7ff ffaf 	bl	80a21a2 <_ZN6String4copyEPKcj>
 80a2244:	e001      	b.n	80a224a <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 80a2246:	f7ff ff84 	bl	80a2152 <_ZN6String10invalidateEv>

	return *this;
}
 80a224a:	4628      	mov	r0, r5
 80a224c:	bd38      	pop	{r3, r4, r5, pc}

080a224e <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 80a224e:	b510      	push	{r4, lr}
 80a2250:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a2252:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 80a2254:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a2256:	6023      	str	r3, [r4, #0]
	capacity = 0;
 80a2258:	6063      	str	r3, [r4, #4]
	len = 0;
 80a225a:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a225c:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 80a225e:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
 80a2260:	a901      	add	r1, sp, #4
 80a2262:	f000 fd42 	bl	80a2cea <itoa>
	*this = buf;
 80a2266:	a901      	add	r1, sp, #4
 80a2268:	4620      	mov	r0, r4
 80a226a:	f7ff ffdf 	bl	80a222c <_ZN6StringaSEPKc>
}
 80a226e:	4620      	mov	r0, r4
 80a2270:	b00a      	add	sp, #40	; 0x28
 80a2272:	bd10      	pop	{r4, pc}

080a2274 <_ZN6StringC1Elh>:
	char buf[33];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
 80a2274:	b510      	push	{r4, lr}
 80a2276:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a2278:	2300      	movs	r3, #0
	char buf[33];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
 80a227a:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a227c:	6023      	str	r3, [r4, #0]
	capacity = 0;
 80a227e:	6063      	str	r3, [r4, #4]
	len = 0;
 80a2280:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a2282:	7323      	strb	r3, [r4, #12]
	char buf[33];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
 80a2284:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	ltoa(value, buf, base);
 80a2286:	a901      	add	r1, sp, #4
 80a2288:	f000 fcc9 	bl	80a2c1e <ltoa>
	*this = buf;
 80a228c:	a901      	add	r1, sp, #4
 80a228e:	4620      	mov	r0, r4
 80a2290:	f7ff ffcc 	bl	80a222c <_ZN6StringaSEPKc>
}
 80a2294:	4620      	mov	r0, r4
 80a2296:	b00a      	add	sp, #40	; 0x28
 80a2298:	bd10      	pop	{r4, pc}

080a229a <_ZN6StringC1Efi>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
 80a229a:	b530      	push	{r4, r5, lr}
 80a229c:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a229e:	2300      	movs	r3, #0
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
 80a22a0:	b08b      	sub	sp, #44	; 0x2c
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a22a2:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a22a4:	6043      	str	r3, [r0, #4]
	len = 0;
 80a22a6:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a22a8:	7303      	strb	r3, [r0, #12]

String::String(float value, int decimalPlaces)
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
 80a22aa:	b2d5      	uxtb	r5, r2
 80a22ac:	4608      	mov	r0, r1
 80a22ae:	f001 f993 	bl	80a35d8 <__aeabi_f2d>
 80a22b2:	ab01      	add	r3, sp, #4
 80a22b4:	462a      	mov	r2, r5
 80a22b6:	f7ff fee3 	bl	80a2080 <_Z4dtoadhPc>
        *this = buf;
 80a22ba:	a901      	add	r1, sp, #4
 80a22bc:	4620      	mov	r0, r4
 80a22be:	f7ff ffb5 	bl	80a222c <_ZN6StringaSEPKc>
}
 80a22c2:	4620      	mov	r0, r4
 80a22c4:	b00b      	add	sp, #44	; 0x2c
 80a22c6:	bd30      	pop	{r4, r5, pc}

080a22c8 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 80a22c8:	b570      	push	{r4, r5, r6, lr}
 80a22ca:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 80a22cc:	460e      	mov	r6, r1
 80a22ce:	b909      	cbnz	r1, 80a22d4 <_ZN6String6concatEPKcj+0xc>
 80a22d0:	2000      	movs	r0, #0
 80a22d2:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 80a22d4:	b16a      	cbz	r2, 80a22f2 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
 80a22d6:	6883      	ldr	r3, [r0, #8]
 80a22d8:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
 80a22da:	4629      	mov	r1, r5
 80a22dc:	f7ff ff50 	bl	80a2180 <_ZN6String7reserveEj>
 80a22e0:	2800      	cmp	r0, #0
 80a22e2:	d0f5      	beq.n	80a22d0 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 80a22e4:	6820      	ldr	r0, [r4, #0]
 80a22e6:	68a3      	ldr	r3, [r4, #8]
 80a22e8:	4631      	mov	r1, r6
 80a22ea:	4418      	add	r0, r3
 80a22ec:	f002 f992 	bl	80a4614 <strcpy>
	len = newlen;
 80a22f0:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
 80a22f2:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 80a22f4:	bd70      	pop	{r4, r5, r6, pc}

080a22f6 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80a22f6:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a22f8:	688a      	ldr	r2, [r1, #8]
 80a22fa:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80a22fc:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a22fe:	f7ff ffe3 	bl	80a22c8 <_ZN6String6concatEPKcj>
 80a2302:	b910      	cbnz	r0, 80a230a <_ZplRK15StringSumHelperRK6String+0x14>
 80a2304:	4620      	mov	r0, r4
 80a2306:	f7ff ff24 	bl	80a2152 <_ZN6String10invalidateEv>
	return a;
}
 80a230a:	4620      	mov	r0, r4
 80a230c:	bd10      	pop	{r4, pc}

080a230e <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a230e:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a2310:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a2312:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a2314:	b912      	cbnz	r2, 80a231c <_ZNK6String6equalsEPKc+0xe>
 80a2316:	b919      	cbnz	r1, 80a2320 <_ZNK6String6equalsEPKc+0x12>
 80a2318:	2001      	movs	r0, #1
 80a231a:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 80a231c:	b911      	cbnz	r1, 80a2324 <_ZNK6String6equalsEPKc+0x16>
 80a231e:	6803      	ldr	r3, [r0, #0]
 80a2320:	7818      	ldrb	r0, [r3, #0]
 80a2322:	e002      	b.n	80a232a <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 80a2324:	6800      	ldr	r0, [r0, #0]
 80a2326:	f002 f96b 	bl	80a4600 <strcmp>
 80a232a:	fab0 f080 	clz	r0, r0
 80a232e:	0940      	lsrs	r0, r0, #5
}
 80a2330:	bd08      	pop	{r3, pc}

080a2332 <_ZNK6String10startsWithERKS_j>:
	if (len < s2.len) return 0;
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
 80a2332:	b510      	push	{r4, lr}
 80a2334:	4614      	mov	r4, r2
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
 80a2336:	6883      	ldr	r3, [r0, #8]
 80a2338:	688a      	ldr	r2, [r1, #8]
 80a233a:	1a9b      	subs	r3, r3, r2
 80a233c:	42a3      	cmp	r3, r4
 80a233e:	d30a      	bcc.n	80a2356 <_ZNK6String10startsWithERKS_j+0x24>
 80a2340:	6800      	ldr	r0, [r0, #0]
 80a2342:	b158      	cbz	r0, 80a235c <_ZNK6String10startsWithERKS_j+0x2a>
 80a2344:	6809      	ldr	r1, [r1, #0]
 80a2346:	b141      	cbz	r1, 80a235a <_ZNK6String10startsWithERKS_j+0x28>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
 80a2348:	4420      	add	r0, r4
 80a234a:	f002 f98e 	bl	80a466a <strncmp>
 80a234e:	fab0 f080 	clz	r0, r0
 80a2352:	0940      	lsrs	r0, r0, #5
 80a2354:	bd10      	pop	{r4, pc}
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
 80a2356:	2000      	movs	r0, #0
 80a2358:	bd10      	pop	{r4, pc}
 80a235a:	4608      	mov	r0, r1
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}
 80a235c:	bd10      	pop	{r4, pc}

080a235e <_ZNK6String10startsWithERKS_>:
	return 1;
}

unsigned char String::startsWith( const String &s2 ) const
{
	if (len < s2.len) return 0;
 80a235e:	6882      	ldr	r2, [r0, #8]
 80a2360:	688b      	ldr	r3, [r1, #8]
 80a2362:	429a      	cmp	r2, r3
 80a2364:	d302      	bcc.n	80a236c <_ZNK6String10startsWithERKS_+0xe>
	return startsWith(s2, 0);
 80a2366:	2200      	movs	r2, #0
 80a2368:	f7ff bfe3 	b.w	80a2332 <_ZNK6String10startsWithERKS_j>
}
 80a236c:	2000      	movs	r0, #0
 80a236e:	4770      	bx	lr

080a2370 <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
 80a2370:	6883      	ldr	r3, [r0, #8]
 80a2372:	428b      	cmp	r3, r1
 80a2374:	d903      	bls.n	80a237e <_ZNK6StringixEj+0xe>
 80a2376:	6800      	ldr	r0, [r0, #0]
 80a2378:	b110      	cbz	r0, 80a2380 <_ZNK6StringixEj+0x10>
	return buffer[index];
 80a237a:	5c40      	ldrb	r0, [r0, r1]
 80a237c:	4770      	bx	lr
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
 80a237e:	2000      	movs	r0, #0
	return buffer[index];
}
 80a2380:	4770      	bx	lr

080a2382 <_ZNK6String6charAtEj>:
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
 80a2382:	f7ff bff5 	b.w	80a2370 <_ZNK6StringixEj>
	...

080a2388 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 80a2388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a238c:	461c      	mov	r4, r3
	if (left > right) {
 80a238e:	429a      	cmp	r2, r3
 80a2390:	bf88      	it	hi
 80a2392:	4613      	movhi	r3, r2
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 80a2394:	460e      	mov	r6, r1
 80a2396:	4615      	mov	r5, r2
	if (left > right) {
 80a2398:	bf88      	it	hi
 80a239a:	4625      	movhi	r5, r4
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 80a239c:	490d      	ldr	r1, [pc, #52]	; (80a23d4 <_ZNK6String9substringEjj+0x4c>)
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
 80a239e:	bf88      	it	hi
 80a23a0:	461c      	movhi	r4, r3
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 80a23a2:	4607      	mov	r7, r0
	if (left > right) {
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 80a23a4:	f7ff ff15 	bl	80a21d2 <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
 80a23a8:	68b1      	ldr	r1, [r6, #8]
 80a23aa:	428d      	cmp	r5, r1
 80a23ac:	d80f      	bhi.n	80a23ce <_ZNK6String9substringEjj+0x46>
 80a23ae:	428c      	cmp	r4, r1
 80a23b0:	bf28      	it	cs
 80a23b2:	460c      	movcs	r4, r1
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
 80a23b4:	6833      	ldr	r3, [r6, #0]
	buffer[right] = '\0';
 80a23b6:	2200      	movs	r2, #0
		left = temp;
	}
	String out;
	if (left > len) return out;
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
 80a23b8:	f813 8004 	ldrb.w	r8, [r3, r4]
	buffer[right] = '\0';
 80a23bc:	551a      	strb	r2, [r3, r4]
	out = buffer + left;  // pointer arithmetic
 80a23be:	6831      	ldr	r1, [r6, #0]
 80a23c0:	4638      	mov	r0, r7
 80a23c2:	4429      	add	r1, r5
 80a23c4:	f7ff ff32 	bl	80a222c <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
 80a23c8:	6833      	ldr	r3, [r6, #0]
 80a23ca:	f803 8004 	strb.w	r8, [r3, r4]
	return out;
}
 80a23ce:	4638      	mov	r0, r7
 80a23d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a23d4:	080a496c 	.word	0x080a496c

080a23d8 <_ZNK6String9substringEj>:
	}
	return found;
}

String String::substring( unsigned int left ) const
{
 80a23d8:	b510      	push	{r4, lr}
 80a23da:	4604      	mov	r4, r0
	return substring(left, len);
 80a23dc:	688b      	ldr	r3, [r1, #8]
 80a23de:	f7ff ffd3 	bl	80a2388 <_ZNK6String9substringEjj>
}
 80a23e2:	4620      	mov	r0, r4
 80a23e4:	bd10      	pop	{r4, pc}

080a23e6 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
 80a23e6:	6800      	ldr	r0, [r0, #0]
 80a23e8:	b108      	cbz	r0, 80a23ee <_ZNK6String5toIntEv+0x8>
 80a23ea:	f002 b8a7 	b.w	80a453c <atol>
	return 0;
}
 80a23ee:	4770      	bx	lr

080a23f0 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a23f0:	f64f 739c 	movw	r3, #65436	; 0xff9c
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
}
 80a23f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a23f6:	4c0d      	ldr	r4, [pc, #52]	; (80a242c <_GLOBAL__sub_I_System+0x3c>)
 80a23f8:	2500      	movs	r5, #0
 80a23fa:	8063      	strh	r3, [r4, #2]
 80a23fc:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a2400:	4628      	mov	r0, r5
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a2402:	80a3      	strh	r3, [r4, #4]
 80a2404:	7025      	strb	r5, [r4, #0]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a2406:	f7ff f8a5 	bl	80a1554 <set_system_mode>
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
 80a240a:	a802      	add	r0, sp, #8
 80a240c:	f840 5d04 	str.w	r5, [r0, #-4]!
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 80a2410:	462a      	mov	r2, r5
 80a2412:	4629      	mov	r1, r5
 80a2414:	f7fe ff04 	bl	80a1220 <HAL_Core_Get_Last_Reset_Info>
        return reason;
 80a2418:	9b01      	ldr	r3, [sp, #4]
class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
        if (resetReason() == RESET_REASON_POWER_MANAGEMENT) {
 80a241a:	2b1e      	cmp	r3, #30
 80a241c:	d104      	bne.n	80a2428 <_GLOBAL__sub_I_System+0x38>
            // Woken up from standby mode
            sleepResult_ = SleepResult(WAKEUP_REASON_PIN_OR_RTC, SYSTEM_ERROR_NONE, WKP);
 80a241e:	2303      	movs	r3, #3
 80a2420:	7023      	strb	r3, [r4, #0]
 80a2422:	2311      	movs	r3, #17
 80a2424:	8065      	strh	r5, [r4, #2]
 80a2426:	80a3      	strh	r3, [r4, #4]
 80a2428:	b003      	add	sp, #12
 80a242a:	bd30      	pop	{r4, r5, pc}
 80a242c:	20000424 	.word	0x20000424

080a2430 <_ZN9TCPClient5writeEh>:
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a2430:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a2432:	ac02      	add	r4, sp, #8
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a2434:	6803      	ldr	r3, [r0, #0]
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a2436:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a243a:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80a243c:	2201      	movs	r2, #1
 80a243e:	f247 5330 	movw	r3, #30000	; 0x7530
 80a2442:	4621      	mov	r1, r4
 80a2444:	47a8      	blx	r5
}
 80a2446:	b003      	add	sp, #12
 80a2448:	bd30      	pop	{r4, r5, pc}

080a244a <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
 80a244a:	b410      	push	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a244c:	6803      	ldr	r3, [r0, #0]
 80a244e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a2450:	f247 5330 	movw	r3, #30000	; 0x7530
 80a2454:	46a4      	mov	ip, r4
}
 80a2456:	bc10      	pop	{r4}
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a2458:	4760      	bx	ip

080a245a <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a245a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a245c:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
 80a245e:	6803      	ldr	r3, [r0, #0]
{
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a2460:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
 80a2464:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80a2466:	4621      	mov	r1, r4
 80a2468:	4613      	mov	r3, r2
 80a246a:	2201      	movs	r2, #1
 80a246c:	47a8      	blx	r5
}
 80a246e:	b003      	add	sp, #12
 80a2470:	bd30      	pop	{r4, r5, pc}

080a2472 <_ZN9TCPClient5flushEv>:
  d_->offset = 0;
  d_->total = 0;
}

void TCPClient::flush()
{
 80a2472:	4770      	bx	lr

080a2474 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 80a2474:	4770      	bx	lr

080a2476 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
 80a2476:	2000      	movs	r0, #0
 80a2478:	4770      	bx	lr

080a247a <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 80a247a:	b510      	push	{r4, lr}
 80a247c:	4604      	mov	r4, r0
 80a247e:	f7fd fe10 	bl	80a00a2 <_ZdlPv>
 80a2482:	4620      	mov	r0, r4
 80a2484:	bd10      	pop	{r4, pc}

080a2486 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 80a2486:	f7fd be0c 	b.w	80a00a2 <_ZdlPv>
	...

080a248c <_ZN9TCPClient7connectEPKctm>:
{
  flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a248c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a2490:	461f      	mov	r7, r3
    stop();
 80a2492:	6803      	ldr	r3, [r0, #0]
{
  flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a2494:	b08f      	sub	sp, #60	; 0x3c
    stop();
 80a2496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
  flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a2498:	4606      	mov	r6, r0
 80a249a:	460c      	mov	r4, r1
 80a249c:	4690      	mov	r8, r2
    stop();
 80a249e:	4798      	blx	r3
      int rv = 0;
      if(Network.ready())
 80a24a0:	4b13      	ldr	r3, [pc, #76]	; (80a24f0 <_ZN9TCPClient7connectEPKctm+0x64>)
 80a24a2:	6818      	ldr	r0, [r3, #0]
 80a24a4:	6803      	ldr	r3, [r0, #0]
 80a24a6:	681b      	ldr	r3, [r3, #0]
 80a24a8:	4798      	blx	r3
 80a24aa:	b1f0      	cbz	r0, 80a24ea <_ZN9TCPClient7connectEPKctm+0x5e>
      {
        IPAddress ip_addr;
 80a24ac:	a802      	add	r0, sp, #8
 80a24ae:	f7ff fc3d 	bl	80a1d2c <_ZN9IPAddressC1Ev>

        if((rv = inet_gethostbyname(host, strlen(host), ip_addr, nif, NULL)) == 0)
 80a24b2:	4620      	mov	r0, r4
 80a24b4:	f002 f8d1 	bl	80a465a <strlen>
 80a24b8:	2300      	movs	r3, #0
 80a24ba:	9300      	str	r3, [sp, #0]
 80a24bc:	b281      	uxth	r1, r0
 80a24be:	463b      	mov	r3, r7
 80a24c0:	aa03      	add	r2, sp, #12
 80a24c2:	4620      	mov	r0, r4
 80a24c4:	f7ff f82e 	bl	80a1524 <inet_gethostbyname>
 80a24c8:	b978      	cbnz	r0, 80a24ea <_ZN9TCPClient7connectEPKctm+0x5e>
        {
                return connect(ip_addr, port, nif);
 80a24ca:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a24cc:	ad09      	add	r5, sp, #36	; 0x24
 80a24ce:	f8d3 9020 	ldr.w	r9, [r3, #32]
 80a24d2:	4b08      	ldr	r3, [pc, #32]	; (80a24f4 <_ZN9TCPClient7connectEPKctm+0x68>)
 80a24d4:	ac03      	add	r4, sp, #12
 80a24d6:	9308      	str	r3, [sp, #32]
 80a24d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a24da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a24dc:	6823      	ldr	r3, [r4, #0]
 80a24de:	4642      	mov	r2, r8
 80a24e0:	702b      	strb	r3, [r5, #0]
 80a24e2:	a908      	add	r1, sp, #32
 80a24e4:	463b      	mov	r3, r7
 80a24e6:	4630      	mov	r0, r6
 80a24e8:	47c8      	blx	r9
        }
        else
            DEBUG("unable to get IP for hostname");
      }
      return rv;
}
 80a24ea:	b00f      	add	sp, #60	; 0x3c
 80a24ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a24f0:	080a4b70 	.word	0x080a4b70
 80a24f4:	080a494c 	.word	0x080a494c

080a24f8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.30>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
 80a24f8:	b510      	push	{r4, lr}
 80a24fa:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
 80a24fc:	6803      	ldr	r3, [r0, #0]
 80a24fe:	689b      	ldr	r3, [r3, #8]
 80a2500:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a2502:	68a3      	ldr	r3, [r4, #8]
 80a2504:	3b01      	subs	r3, #1
 80a2506:	60a3      	str	r3, [r4, #8]
 80a2508:	b92b      	cbnz	r3, 80a2516 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.30+0x1e>
            _M_destroy();
 80a250a:	6823      	ldr	r3, [r4, #0]
 80a250c:	4620      	mov	r0, r4
        }
    }
 80a250e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
 80a2512:	68db      	ldr	r3, [r3, #12]
 80a2514:	4718      	bx	r3
 80a2516:	bd10      	pop	{r4, pc}

080a2518 <_ZN9TCPClient8remoteIPEv>:
{
   return (status()!=0);
}

IPAddress TCPClient::remoteIP()
{
 80a2518:	b570      	push	{r4, r5, r6, lr}
 80a251a:	4604      	mov	r4, r0
 80a251c:	4606      	mov	r6, r0
 80a251e:	694d      	ldr	r5, [r1, #20]
 80a2520:	4b04      	ldr	r3, [pc, #16]	; (80a2534 <_ZN9TCPClient8remoteIPEv+0x1c>)
 80a2522:	358c      	adds	r5, #140	; 0x8c
 80a2524:	f844 3b04 	str.w	r3, [r4], #4
 80a2528:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a252a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a252c:	682b      	ldr	r3, [r5, #0]
    return d_->remoteIP;
}
 80a252e:	4630      	mov	r0, r6
 80a2530:	7023      	strb	r3, [r4, #0]
 80a2532:	bd70      	pop	{r4, r5, r6, pc}
 80a2534:	080a494c 	.word	0x080a494c

080a2538 <_ZN9TCPClient4peekEv>:
        }
        return read;
}

int TCPClient::peek()
{
 80a2538:	b510      	push	{r4, lr}
 80a253a:	6943      	ldr	r3, [r0, #20]
 80a253c:	4604      	mov	r4, r0
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a253e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a2542:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a2546:	429a      	cmp	r2, r3
 80a2548:	d005      	beq.n	80a2556 <_ZN9TCPClient4peekEv+0x1e>
 80a254a:	6962      	ldr	r2, [r4, #20]
 80a254c:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a2550:	4413      	add	r3, r2
 80a2552:	7918      	ldrb	r0, [r3, #4]
 80a2554:	bd10      	pop	{r4, pc}
 80a2556:	6803      	ldr	r3, [r0, #0]
 80a2558:	691b      	ldr	r3, [r3, #16]
 80a255a:	4798      	blx	r3
 80a255c:	2800      	cmp	r0, #0
 80a255e:	d1f4      	bne.n	80a254a <_ZN9TCPClient4peekEv+0x12>
 80a2560:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a2564:	bd10      	pop	{r4, pc}

080a2566 <_ZN9TCPClient4readEv>:
    avail = bufferCount();
    return avail;
}

int TCPClient::read()
{
 80a2566:	b510      	push	{r4, lr}
 80a2568:	6943      	ldr	r3, [r0, #20]
 80a256a:	4604      	mov	r4, r0
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a256c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a2570:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a2574:	429a      	cmp	r2, r3
 80a2576:	d008      	beq.n	80a258a <_ZN9TCPClient4readEv+0x24>
 80a2578:	6962      	ldr	r2, [r4, #20]
 80a257a:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a257e:	1c59      	adds	r1, r3, #1
 80a2580:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
 80a2584:	4413      	add	r3, r2
 80a2586:	7918      	ldrb	r0, [r3, #4]
 80a2588:	bd10      	pop	{r4, pc}
 80a258a:	6803      	ldr	r3, [r0, #0]
 80a258c:	691b      	ldr	r3, [r3, #16]
 80a258e:	4798      	blx	r3
 80a2590:	2800      	cmp	r0, #0
 80a2592:	d1f1      	bne.n	80a2578 <_ZN9TCPClient4readEv+0x12>
 80a2594:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80a2598:	bd10      	pop	{r4, pc}

080a259a <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
 80a259a:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
 80a259c:	6904      	ldr	r4, [r0, #16]
                offset(0),
                total(0) {
        }

        ~Data() {
            if (socket_handle_valid(sock)) {
 80a259e:	6820      	ldr	r0, [r4, #0]
 80a25a0:	f7fe fef0 	bl	80a1384 <socket_handle_valid>
 80a25a4:	b110      	cbz	r0, 80a25ac <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x12>
                socket_close(sock);
 80a25a6:	6820      	ldr	r0, [r4, #0]
 80a25a8:	f7fe ff0c 	bl	80a13c4 <socket_close>
 80a25ac:	4620      	mov	r0, r4
 80a25ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a25b2:	f7fd bd76 	b.w	80a00a2 <_ZdlPv>

080a25b6 <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a25b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a25b8:	6943      	ldr	r3, [r0, #20]
 80a25ba:	4617      	mov	r7, r2
        int read = -1;
        if (bufferCount() || available())
 80a25bc:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a25c0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a25c4:	4605      	mov	r5, r0
        int read = -1;
        if (bufferCount() || available())
 80a25c6:	429a      	cmp	r2, r3
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a25c8:	460e      	mov	r6, r1
        int read = -1;
        if (bufferCount() || available())
 80a25ca:	d106      	bne.n	80a25da <_ZN9TCPClient4readEPhj+0x24>
 80a25cc:	6803      	ldr	r3, [r0, #0]
 80a25ce:	691b      	ldr	r3, [r3, #16]
 80a25d0:	4798      	blx	r3
 80a25d2:	b910      	cbnz	r0, 80a25da <_ZN9TCPClient4readEPhj+0x24>
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
 80a25d4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80a25d8:	e014      	b.n	80a2604 <_ZN9TCPClient4readEPhj+0x4e>
 80a25da:	6969      	ldr	r1, [r5, #20]
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a25dc:	4630      	mov	r0, r6
    return ret;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 80a25de:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 80a25e2:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a25e6:	4419      	add	r1, r3
    return ret;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 80a25e8:	1ae4      	subs	r4, r4, r3
int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
 80a25ea:	42bc      	cmp	r4, r7
 80a25ec:	bf28      	it	cs
 80a25ee:	463c      	movcs	r4, r7
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a25f0:	3104      	adds	r1, #4
 80a25f2:	4622      	mov	r2, r4
 80a25f4:	f001 ffc8 	bl	80a4588 <memcpy>
 80a25f8:	696a      	ldr	r2, [r5, #20]
          d_->offset += read;
 80a25fa:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a25fe:	4423      	add	r3, r4
 80a2600:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
        }
        return read;
}
 80a2604:	4620      	mov	r0, r4
 80a2606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2608 <_ZN9TCPClient12flush_bufferEv>:
{
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer()
{
 80a2608:	6942      	ldr	r2, [r0, #20]
  d_->offset = 0;
 80a260a:	2300      	movs	r3, #0
 80a260c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 80a2610:	6942      	ldr	r2, [r0, #20]
  d_->total = 0;
 80a2612:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
 80a2616:	4770      	bx	lr

080a2618 <_ZN9TCPClient9availableEv>:
{
  return d_->total - d_->offset;
}

int TCPClient::available()
{
 80a2618:	b538      	push	{r3, r4, r5, lr}
 80a261a:	6942      	ldr	r2, [r0, #20]
 80a261c:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
 80a261e:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a2622:	b11b      	cbz	r3, 80a262c <_ZN9TCPClient9availableEv+0x14>
 80a2624:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 80a2628:	429a      	cmp	r2, r3
 80a262a:	d00b      	beq.n	80a2644 <_ZN9TCPClient9availableEv+0x2c>
    }


    static NetworkClass& from(network_interface_t nif) {
        // hard-code for now until multiple-networks are implemented.
        return Network;
 80a262c:	4b18      	ldr	r3, [pc, #96]	; (80a2690 <_ZN9TCPClient9availableEv+0x78>)
 80a262e:	6818      	ldr	r0, [r3, #0]
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 80a2630:	6803      	ldr	r3, [r0, #0]
 80a2632:	681b      	ldr	r3, [r3, #0]
 80a2634:	4798      	blx	r3
 80a2636:	b318      	cbz	r0, 80a2680 <_ZN9TCPClient9availableEv+0x68>
 80a2638:	6963      	ldr	r3, [r4, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a263a:	6818      	ldr	r0, [r3, #0]
 80a263c:	f7fe fea2 	bl	80a1384 <socket_handle_valid>
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 80a2640:	b918      	cbnz	r0, 80a264a <_ZN9TCPClient9availableEv+0x32>
 80a2642:	e01d      	b.n	80a2680 <_ZN9TCPClient9availableEv+0x68>
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
 80a2644:	f7ff ffe0 	bl	80a2608 <_ZN9TCPClient12flush_bufferEv>
 80a2648:	e7f0      	b.n	80a262c <_ZN9TCPClient9availableEv+0x14>
 80a264a:	6960      	ldr	r0, [r4, #20]
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
    {
        // Have room
        if ( d_->total < arraySize(d_->buffer))
 80a264c:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
 80a2650:	297f      	cmp	r1, #127	; 0x7f
 80a2652:	d815      	bhi.n	80a2680 <_ZN9TCPClient9availableEv+0x68>
        {
            int ret = socket_receive(d_->sock, d_->buffer + d_->total , arraySize(d_->buffer)-d_->total, 0);
 80a2654:	1d05      	adds	r5, r0, #4
 80a2656:	f1c1 0280 	rsb	r2, r1, #128	; 0x80
 80a265a:	2300      	movs	r3, #0
 80a265c:	4429      	add	r1, r5
 80a265e:	6800      	ldr	r0, [r0, #0]
 80a2660:	f7fe fea8 	bl	80a13b4 <socket_receive>
            if (ret > 0)
 80a2664:	2800      	cmp	r0, #0
 80a2666:	dd0b      	ble.n	80a2680 <_ZN9TCPClient9availableEv+0x68>
 80a2668:	6963      	ldr	r3, [r4, #20]
            {
                DEBUG("recv(=%d)",ret);
                if (d_->total == 0) d_->offset = 0;
 80a266a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a266e:	b90a      	cbnz	r2, 80a2674 <_ZN9TCPClient9availableEv+0x5c>
 80a2670:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80a2674:	6962      	ldr	r2, [r4, #20]
                d_->total += ret;
 80a2676:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a267a:	4418      	add	r0, r3
 80a267c:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
 80a2680:	6962      	ldr	r2, [r4, #20]
            }
        } // Have Space
    } // WiFi.ready() && isOpen(d_->sock)
    avail = bufferCount();
    return avail;
 80a2682:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a2686:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
 80a268a:	1a18      	subs	r0, r3, r0
}
 80a268c:	bd38      	pop	{r3, r4, r5, pc}
 80a268e:	bf00      	nop
 80a2690:	080a4b70 	.word	0x080a4b70

080a2694 <_ZN9TCPClient4stopEv>:
{
}


void TCPClient::stop()
{
 80a2694:	b538      	push	{r3, r4, r5, lr}
  // This log line pollutes the log too much
  // DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 80a2696:	6943      	ldr	r3, [r0, #20]
{
}


void TCPClient::stop()
{
 80a2698:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a269a:	6818      	ldr	r0, [r3, #0]
 80a269c:	f7fe fe72 	bl	80a1384 <socket_handle_valid>
void TCPClient::stop()
{
  // This log line pollutes the log too much
  // DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 80a26a0:	b118      	cbz	r0, 80a26aa <_ZN9TCPClient4stopEv+0x16>
      socket_close(d_->sock);
 80a26a2:	6963      	ldr	r3, [r4, #20]
 80a26a4:	6818      	ldr	r0, [r3, #0]
 80a26a6:	f7fe fe8d 	bl	80a13c4 <socket_close>
 80a26aa:	6965      	ldr	r5, [r4, #20]
  d_->sock = socket_handle_invalid();
 80a26ac:	f7fe fe92 	bl	80a13d4 <socket_handle_invalid>
 80a26b0:	6028      	str	r0, [r5, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a26b2:	6960      	ldr	r0, [r4, #20]
 80a26b4:	2211      	movs	r2, #17
 80a26b6:	2100      	movs	r1, #0
 80a26b8:	308c      	adds	r0, #140	; 0x8c
 80a26ba:	f001 ff70 	bl	80a459e <memset>
  d_->remoteIP.clear();
  flush_buffer();
 80a26be:	4620      	mov	r0, r4
}
 80a26c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  if (isOpen(d_->sock))
      socket_close(d_->sock);
  d_->sock = socket_handle_invalid();
  d_->remoteIP.clear();
  flush_buffer();
 80a26c4:	f7ff bfa0 	b.w	80a2608 <_ZN9TCPClient12flush_bufferEv>

080a26c8 <_ZN9TCPClientC1Em>:

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 80a26c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a26ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a26ce:	6083      	str	r3, [r0, #8]
        d_(std::make_shared<Data>(sock))
 80a26d0:	4b17      	ldr	r3, [pc, #92]	; (80a2730 <_ZN9TCPClientC1Em+0x68>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a26d2:	2600      	movs	r6, #0
 80a26d4:	6046      	str	r6, [r0, #4]
 80a26d6:	6003      	str	r3, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
 80a26d8:	6146      	str	r6, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
 80a26da:	6186      	str	r6, [r0, #24]

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 80a26dc:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a26de:	20a0      	movs	r0, #160	; 0xa0
 80a26e0:	460f      	mov	r7, r1
 80a26e2:	f7fd fcda 	bl	80a009a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80a26e6:	4605      	mov	r5, r0
 80a26e8:	b138      	cbz	r0, 80a26fa <_ZN9TCPClientC1Em+0x32>
        IPAddress remoteIP;

        explicit Data(sock_handle_t sock) :
                sock(sock),
                offset(0),
                total(0) {
 80a26ea:	6007      	str	r7, [r0, #0]
 80a26ec:	f8a0 6084 	strh.w	r6, [r0, #132]	; 0x84
 80a26f0:	f8a0 6086 	strh.w	r6, [r0, #134]	; 0x86
 80a26f4:	3088      	adds	r0, #136	; 0x88
 80a26f6:	f7ff fb19 	bl	80a1d2c <_ZN9IPAddressC1Ev>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a26fa:	2014      	movs	r0, #20
 80a26fc:	f7fd fccd 	bl	80a009a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 80a2700:	4603      	mov	r3, r0
 80a2702:	b128      	cbz	r0, 80a2710 <_ZN9TCPClientC1Em+0x48>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a2704:	2201      	movs	r2, #1
 80a2706:	6042      	str	r2, [r0, #4]
 80a2708:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 80a270a:	4a0a      	ldr	r2, [pc, #40]	; (80a2734 <_ZN9TCPClientC1Em+0x6c>)
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
 80a270c:	6105      	str	r5, [r0, #16]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 80a270e:	6002      	str	r2, [r0, #0]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a2710:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
 80a2712:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a2714:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a2716:	b128      	cbz	r0, 80a2724 <_ZN9TCPClientC1Em+0x5c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a2718:	6843      	ldr	r3, [r0, #4]
 80a271a:	3b01      	subs	r3, #1
 80a271c:	6043      	str	r3, [r0, #4]
 80a271e:	b90b      	cbnz	r3, 80a2724 <_ZN9TCPClientC1Em+0x5c>
 80a2720:	f7ff feea 	bl	80a24f8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.30>
        d_(std::make_shared<Data>(sock))
{
  flush_buffer();
 80a2724:	4620      	mov	r0, r4
 80a2726:	f7ff ff6f 	bl	80a2608 <_ZN9TCPClient12flush_bufferEv>
}
 80a272a:	4620      	mov	r0, r4
 80a272c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a272e:	bf00      	nop
 80a2730:	080a4a7c 	.word	0x080a4a7c
 80a2734:	080a4a60 	.word	0x080a4a60

080a2738 <_ZN9TCPClientC1Ev>:
static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
}

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
 80a2738:	b510      	push	{r4, lr}
 80a273a:	4604      	mov	r4, r0
 80a273c:	f7fe fe4a 	bl	80a13d4 <socket_handle_invalid>
 80a2740:	4601      	mov	r1, r0
 80a2742:	4620      	mov	r0, r4
 80a2744:	f7ff ffc0 	bl	80a26c8 <_ZN9TCPClientC1Em>
{
}
 80a2748:	4620      	mov	r0, r4
 80a274a:	bd10      	pop	{r4, pc}

080a274c <_ZN9TCPClient7connectE9IPAddresstm>:
      }
      return rv;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a274c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2750:	4698      	mov	r8, r3
    stop();
 80a2752:	6803      	ldr	r3, [r0, #0]
      }
      return rv;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a2754:	b08a      	sub	sp, #40	; 0x28
    stop();
 80a2756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      }
      return rv;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a2758:	4606      	mov	r6, r0
 80a275a:	460c      	mov	r4, r1
 80a275c:	4615      	mov	r5, r2
    stop();
 80a275e:	4798      	blx	r3
 80a2760:	4b2f      	ldr	r3, [pc, #188]	; (80a2820 <_ZN9TCPClient7connectE9IPAddresstm+0xd4>)
 80a2762:	6818      	ldr	r0, [r3, #0]
        int connected = 0;
        if(Network.from(nif).ready())
 80a2764:	6803      	ldr	r3, [r0, #0]
 80a2766:	681b      	ldr	r3, [r3, #0]
 80a2768:	4798      	blx	r3
 80a276a:	2800      	cmp	r0, #0
 80a276c:	d055      	beq.n	80a281a <_ZN9TCPClient7connectE9IPAddresstm+0xce>
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a276e:	462b      	mov	r3, r5
 80a2770:	2206      	movs	r2, #6
 80a2772:	2101      	movs	r1, #1
 80a2774:	f8cd 8000 	str.w	r8, [sp]
 80a2778:	2002      	movs	r0, #2
 80a277a:	6977      	ldr	r7, [r6, #20]
 80a277c:	f7fe fe0a 	bl	80a1394 <socket_create>
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a2780:	2320      	movs	r3, #32
    stop();
        int connected = 0;
        if(Network.from(nif).ready())
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a2782:	6038      	str	r0, [r7, #0]
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a2784:	9302      	str	r3, [sp, #8]
 80a2786:	2700      	movs	r7, #0
 80a2788:	6973      	ldr	r3, [r6, #20]
 80a278a:	9703      	str	r7, [sp, #12]
 80a278c:	681b      	ldr	r3, [r3, #0]
 80a278e:	2001      	movs	r0, #1
 80a2790:	9301      	str	r3, [sp, #4]
 80a2792:	4b24      	ldr	r3, [pc, #144]	; (80a2824 <_ZN9TCPClient7connectE9IPAddresstm+0xd8>)
 80a2794:	aa02      	add	r2, sp, #8
 80a2796:	9300      	str	r3, [sp, #0]
 80a2798:	4923      	ldr	r1, [pc, #140]	; (80a2828 <_ZN9TCPClient7connectE9IPAddresstm+0xdc>)
 80a279a:	463b      	mov	r3, r7
 80a279c:	f7fe feca 	bl	80a1534 <log_message>

          if (socket_handle_valid(d_->sock))
 80a27a0:	6973      	ldr	r3, [r6, #20]
 80a27a2:	6818      	ldr	r0, [r3, #0]
 80a27a4:	f7fe fdee 	bl	80a1384 <socket_handle_valid>
 80a27a8:	2800      	cmp	r0, #0
 80a27aa:	d036      	beq.n	80a281a <_ZN9TCPClient7connectE9IPAddresstm+0xce>
          {
            flush_buffer();
 80a27ac:	4630      	mov	r0, r6
 80a27ae:	f7ff ff2b 	bl	80a2608 <_ZN9TCPClient12flush_bufferEv>

            tSocketAddr.sa_family = AF_INET;
 80a27b2:	2302      	movs	r3, #2
 80a27b4:	f8ad 3008 	strh.w	r3, [sp, #8]

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a27b8:	0a2b      	lsrs	r3, r5, #8
 80a27ba:	f88d 300a 	strb.w	r3, [sp, #10]
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a27be:	79e3      	ldrb	r3, [r4, #7]
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a27c0:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a27c4:	f88d 300c 	strb.w	r3, [sp, #12]
            tSocketAddr.sa_data[3] = ip[1];
 80a27c8:	79a3      	ldrb	r3, [r4, #6]
            flush_buffer();

            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);
 80a27ca:	f88d 500b 	strb.w	r5, [sp, #11]

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
            tSocketAddr.sa_data[3] = ip[1];
 80a27ce:	f88d 300d 	strb.w	r3, [sp, #13]
            tSocketAddr.sa_data[4] = ip[2];
 80a27d2:	7963      	ldrb	r3, [r4, #5]
 80a27d4:	f88d 300e 	strb.w	r3, [sp, #14]
            tSocketAddr.sa_data[5] = ip[3];
 80a27d8:	f814 3f04 	ldrb.w	r3, [r4, #4]!
 80a27dc:	f88d 300f 	strb.w	r3, [sp, #15]


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a27e0:	f7fe fe98 	bl	80a1514 <HAL_NET_SetNetWatchDog>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a27e4:	6973      	ldr	r3, [r6, #20]
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a27e6:	4605      	mov	r5, r0
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a27e8:	2210      	movs	r2, #16
 80a27ea:	a902      	add	r1, sp, #8
 80a27ec:	6818      	ldr	r0, [r3, #0]
 80a27ee:	f7fe fdd9 	bl	80a13a4 <socket_connect>
 80a27f2:	4680      	mov	r8, r0
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
 80a27f4:	4628      	mov	r0, r5
 80a27f6:	f7fe fe8d 	bl	80a1514 <HAL_NET_SetNetWatchDog>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a27fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a27fc:	6975      	ldr	r5, [r6, #20]
 80a27fe:	358c      	adds	r5, #140	; 0x8c
 80a2800:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a2802:	6823      	ldr	r3, [r4, #0]
 80a2804:	702b      	strb	r3, [r5, #0]
            d_->remoteIP = ip;
            if(!connected)
 80a2806:	f1b8 0f00 	cmp.w	r8, #0
 80a280a:	d005      	beq.n	80a2818 <_ZN9TCPClient7connectE9IPAddresstm+0xcc>
            {
                stop();
 80a280c:	6833      	ldr	r3, [r6, #0]
 80a280e:	4630      	mov	r0, r6
 80a2810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a2812:	4798      	blx	r3
 80a2814:	4638      	mov	r0, r7
 80a2816:	e000      	b.n	80a281a <_ZN9TCPClient7connectE9IPAddresstm+0xce>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
            d_->remoteIP = ip;
            if(!connected)
 80a2818:	2001      	movs	r0, #1
                stop();
            }
          }
        }
        return connected;
}
 80a281a:	b00a      	add	sp, #40	; 0x28
 80a281c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a2820:	080a4b70 	.word	0x080a4b70
 80a2824:	080a4ac7 	.word	0x080a4ac7
 80a2828:	080a4ac0 	.word	0x080a4ac0

080a282c <_ZN9TCPClient6statusEv>:
  }
  return rv;
}

uint8_t TCPClient::status()
{
 80a282c:	b510      	push	{r4, lr}
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a282e:	6943      	ldr	r3, [r0, #20]
  }
  return rv;
}

uint8_t TCPClient::status()
{
 80a2830:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a2832:	6818      	ldr	r0, [r3, #0]
 80a2834:	f7fe fda6 	bl	80a1384 <socket_handle_valid>
  return rv;
}

uint8_t TCPClient::status()
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a2838:	b908      	cbnz	r0, 80a283e <_ZN9TCPClient6statusEv+0x12>
 80a283a:	2000      	movs	r0, #0
 80a283c:	bd10      	pop	{r4, pc}
 80a283e:	4b07      	ldr	r3, [pc, #28]	; (80a285c <_ZN9TCPClient6statusEv+0x30>)
 80a2840:	6818      	ldr	r0, [r3, #0]
 80a2842:	6803      	ldr	r3, [r0, #0]
 80a2844:	681b      	ldr	r3, [r3, #0]
 80a2846:	4798      	blx	r3
 80a2848:	2800      	cmp	r0, #0
 80a284a:	d0f6      	beq.n	80a283a <_ZN9TCPClient6statusEv+0xe>
 80a284c:	6963      	ldr	r3, [r4, #20]
 80a284e:	6818      	ldr	r0, [r3, #0]
 80a2850:	f7fe fd90 	bl	80a1374 <socket_active_status>
 80a2854:	fab0 f080 	clz	r0, r0
 80a2858:	0940      	lsrs	r0, r0, #5
}
 80a285a:	bd10      	pop	{r4, pc}
 80a285c:	080a4b70 	.word	0x080a4b70

080a2860 <_ZN9TCPClient5writeEPKhjm>:
{
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout)
{
 80a2860:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
 80a2864:	2500      	movs	r5, #0
 80a2866:	6045      	str	r5, [r0, #4]
 80a2868:	4604      	mov	r4, r0
 80a286a:	460e      	mov	r6, r1
 80a286c:	4617      	mov	r7, r2
 80a286e:	4698      	mov	r8, r3
    clearWriteError();
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a2870:	f7ff ffdc 	bl	80a282c <_ZN9TCPClient6statusEv>
 80a2874:	b160      	cbz	r0, 80a2890 <_ZN9TCPClient5writeEPKhjm+0x30>
 80a2876:	6960      	ldr	r0, [r4, #20]
 80a2878:	9501      	str	r5, [sp, #4]
 80a287a:	f8cd 8000 	str.w	r8, [sp]
 80a287e:	462b      	mov	r3, r5
 80a2880:	463a      	mov	r2, r7
 80a2882:	4631      	mov	r1, r6
 80a2884:	6800      	ldr	r0, [r0, #0]
 80a2886:	f7fe fdad 	bl	80a13e4 <socket_send_ex>
    if (ret < 0) {
 80a288a:	2800      	cmp	r0, #0
 80a288c:	da03      	bge.n	80a2896 <_ZN9TCPClient5writeEPKhjm+0x36>
 80a288e:	e001      	b.n	80a2894 <_ZN9TCPClient5writeEPKhjm+0x34>
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout)
{
    clearWriteError();
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a2890:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a2894:	6060      	str	r0, [r4, #4]

    /*
     * FIXME: We should not be returning negative numbers here
     */
    return ret;
}
 80a2896:	b002      	add	sp, #8
 80a2898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a289c <_ZN9TCPClient9connectedEv>:
  d_->remoteIP.clear();
  flush_buffer();
}

uint8_t TCPClient::connected()
{
 80a289c:	b538      	push	{r3, r4, r5, lr}
 80a289e:	4604      	mov	r4, r0
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 80a28a0:	f7ff ffc4 	bl	80a282c <_ZN9TCPClient6statusEv>
 80a28a4:	bb00      	cbnz	r0, 80a28e8 <_ZN9TCPClient9connectedEv+0x4c>
 80a28a6:	6963      	ldr	r3, [r4, #20]
 80a28a8:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 80a28ac:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a28b0:	4291      	cmp	r1, r2
 80a28b2:	d119      	bne.n	80a28e8 <_ZN9TCPClient9connectedEv+0x4c>

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a28b4:	6818      	ldr	r0, [r3, #0]
 80a28b6:	f7fe fd65 	bl	80a1384 <socket_handle_valid>
uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a28ba:	b128      	cbz	r0, 80a28c8 <_ZN9TCPClient9connectedEv+0x2c>
 80a28bc:	6963      	ldr	r3, [r4, #20]
 80a28be:	6818      	ldr	r0, [r3, #0]
 80a28c0:	f7fe fd58 	bl	80a1374 <socket_active_status>
 80a28c4:	2801      	cmp	r0, #1
 80a28c6:	d001      	beq.n	80a28cc <_ZN9TCPClient9connectedEv+0x30>
}

uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 80a28c8:	2500      	movs	r5, #0
 80a28ca:	e00e      	b.n	80a28ea <_ZN9TCPClient9connectedEv+0x4e>
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
    {
      rv = available(); // Try CC3000
 80a28cc:	6823      	ldr	r3, [r4, #0]
 80a28ce:	4620      	mov	r0, r4
 80a28d0:	691b      	ldr	r3, [r3, #16]
 80a28d2:	4798      	blx	r3
 80a28d4:	2800      	cmp	r0, #0
 80a28d6:	bf14      	ite	ne
 80a28d8:	2501      	movne	r5, #1
 80a28da:	2500      	moveq	r5, #0
      if (!rv) {        // No more Data and CLOSE_WAIT
 80a28dc:	d105      	bne.n	80a28ea <_ZN9TCPClient9connectedEv+0x4e>
          DEBUG("caling Stop No more Data and in CLOSE_WAIT");
          stop();       // Close our side
 80a28de:	6823      	ldr	r3, [r4, #0]
 80a28e0:	4620      	mov	r0, r4
 80a28e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a28e4:	4798      	blx	r3
 80a28e6:	e000      	b.n	80a28ea <_ZN9TCPClient9connectedEv+0x4e>
 80a28e8:	2501      	movs	r5, #1
      }
  }
  return rv;
}
 80a28ea:	4628      	mov	r0, r5
 80a28ec:	bd38      	pop	{r3, r4, r5, pc}

080a28ee <_ZN9TCPClientcvbEv>:
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
}

TCPClient::operator bool()
{
 80a28ee:	b508      	push	{r3, lr}
   return (status()!=0);
 80a28f0:	f7ff ff9c 	bl	80a282c <_ZN9TCPClient6statusEv>
}
 80a28f4:	3000      	adds	r0, #0
 80a28f6:	bf18      	it	ne
 80a28f8:	2001      	movne	r0, #1
 80a28fa:	bd08      	pop	{r3, pc}

080a28fc <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
 80a28fc:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 80a28fe:	2000      	movs	r0, #0
 80a2900:	f7fe fe8c 	bl	80a161c <spark_sync_time_pending>
 80a2904:	b128      	cbz	r0, 80a2912 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a2906:	f7fe fe79 	bl	80a15fc <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 80a290a:	f080 0001 	eor.w	r0, r0, #1
 80a290e:	b2c0      	uxtb	r0, r0
 80a2910:	bd08      	pop	{r3, pc}
 80a2912:	2001      	movs	r0, #1
    }
 80a2914:	bd08      	pop	{r3, pc}

080a2916 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 80a2916:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
 80a2918:	2000      	movs	r0, #0
 80a291a:	f7fe fca1 	bl	80a1260 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
 80a291e:	4604      	mov	r4, r0
 80a2920:	b968      	cbnz	r0, 80a293e <_ZN9TimeClass7isValidEv+0x28>
        }
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80a2922:	f7fe fe0f 	bl	80a1544 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80a2926:	2801      	cmp	r0, #1
 80a2928:	d10b      	bne.n	80a2942 <_ZN9TimeClass7isValidEv+0x2c>
 80a292a:	4620      	mov	r0, r4
 80a292c:	f7fe fe32 	bl	80a1594 <system_thread_get_state>
 80a2930:	b938      	cbnz	r0, 80a2942 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
 80a2932:	f7ff ffe3 	bl	80a28fc <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a2936:	b930      	cbnz	r0, 80a2946 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
 80a2938:	f7fe fe58 	bl	80a15ec <spark_process>
 80a293c:	e7f9      	b.n	80a2932 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
 80a293e:	2001      	movs	r0, #1
 80a2940:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
 80a2942:	2000      	movs	r0, #0
 80a2944:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
 80a2946:	f7ff ffd9 	bl	80a28fc <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
 80a294a:	2000      	movs	r0, #0
 80a294c:	f7fe fc88 	bl	80a1260 <HAL_RTC_Time_Is_Valid>
 80a2950:	3000      	adds	r0, #0
 80a2952:	bf18      	it	ne
 80a2954:	2001      	movne	r0, #1
    }
    return rtcstate;
}
 80a2956:	bd10      	pop	{r4, pc}

080a2958 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
 80a2958:	b508      	push	{r3, lr}
    (void)isValid();
 80a295a:	f7ff ffdc 	bl	80a2916 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
 80a295e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
 80a2962:	f7fe bc75 	b.w	80a1250 <HAL_RTC_Get_UnixTime>
	...

080a2968 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a2968:	4b02      	ldr	r3, [pc, #8]	; (80a2974 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a296a:	681a      	ldr	r2, [r3, #0]
 80a296c:	4b02      	ldr	r3, [pc, #8]	; (80a2978 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a296e:	601a      	str	r2, [r3, #0]
 80a2970:	4770      	bx	lr
 80a2972:	bf00      	nop
 80a2974:	20000304 	.word	0x20000304
 80a2978:	2000042c 	.word	0x2000042c

080a297c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a297c:	4770      	bx	lr

080a297e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a297e:	7441      	strb	r1, [r0, #17]
 80a2980:	4770      	bx	lr

080a2982 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 80a2982:	7c00      	ldrb	r0, [r0, #16]
 80a2984:	f7fe bd7e 	b.w	80a1484 <HAL_USART_Available_Data_For_Write>

080a2988 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 80a2988:	7c00      	ldrb	r0, [r0, #16]
 80a298a:	f7fe bd53 	b.w	80a1434 <HAL_USART_Available_Data>

080a298e <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 80a298e:	7c00      	ldrb	r0, [r0, #16]
 80a2990:	f7fe bd60 	b.w	80a1454 <HAL_USART_Peek_Data>

080a2994 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 80a2994:	7c00      	ldrb	r0, [r0, #16]
 80a2996:	f7fe bd55 	b.w	80a1444 <HAL_USART_Read_Data>

080a299a <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a299a:	7c00      	ldrb	r0, [r0, #16]
 80a299c:	f7fe bd62 	b.w	80a1464 <HAL_USART_Flush_Data>

080a29a0 <_ZN11USARTSerialD0Ev>:
 80a29a0:	b510      	push	{r4, lr}
 80a29a2:	4604      	mov	r4, r0
 80a29a4:	f7fd fb7d 	bl	80a00a2 <_ZdlPv>
 80a29a8:	4620      	mov	r0, r4
 80a29aa:	bd10      	pop	{r4, pc}

080a29ac <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a29ac:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a29ae:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a29b0:	4604      	mov	r4, r0
 80a29b2:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a29b4:	b925      	cbnz	r5, 80a29c0 <_ZN11USARTSerial5writeEh+0x14>
 80a29b6:	7c00      	ldrb	r0, [r0, #16]
 80a29b8:	f7fe fd64 	bl	80a1484 <HAL_USART_Available_Data_For_Write>
 80a29bc:	2800      	cmp	r0, #0
 80a29be:	dd05      	ble.n	80a29cc <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a29c0:	4631      	mov	r1, r6
 80a29c2:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a29c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a29c8:	f7fe bd2c 	b.w	80a1424 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a29cc:	4628      	mov	r0, r5
 80a29ce:	bd70      	pop	{r4, r5, r6, pc}

080a29d0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a29d0:	b510      	push	{r4, lr}
 80a29d2:	4604      	mov	r4, r0
 80a29d4:	4608      	mov	r0, r1
 80a29d6:	4611      	mov	r1, r2
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a29d8:	2200      	movs	r2, #0
 80a29da:	6062      	str	r2, [r4, #4]
 80a29dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a29e0:	60a2      	str	r2, [r4, #8]
 80a29e2:	4a05      	ldr	r2, [pc, #20]	; (80a29f8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a29e4:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a29e6:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a29e8:	2201      	movs	r2, #1
 80a29ea:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a29ec:	461a      	mov	r2, r3
 80a29ee:	f7fe fd11 	bl	80a1414 <HAL_USART_Init>
}
 80a29f2:	4620      	mov	r0, r4
 80a29f4:	bd10      	pop	{r4, pc}
 80a29f6:	bf00      	nop
 80a29f8:	080a4b0c 	.word	0x080a4b0c

080a29fc <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
 80a29fc:	2300      	movs	r3, #0
 80a29fe:	7c00      	ldrb	r0, [r0, #16]
 80a2a00:	f7fe bd48 	b.w	80a1494 <HAL_USART_BeginConfig>

080a2a04 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
 80a2a04:	2200      	movs	r2, #0
 80a2a06:	f7ff bff9 	b.w	80a29fc <_ZN11USARTSerial5beginEmm>

080a2a0a <_ZN11USARTSerial5writeEt>:
  return 0;
}

size_t USARTSerial::write(uint16_t c)
{
  return HAL_USART_Write_NineBitData(_serial, c);
 80a2a0a:	7c00      	ldrb	r0, [r0, #16]
 80a2a0c:	f7fe bd4a 	b.w	80a14a4 <HAL_USART_Write_NineBitData>

080a2a10 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a2a10:	7c00      	ldrb	r0, [r0, #16]
 80a2a12:	f7fe bd2f 	b.w	80a1474 <HAL_USART_Is_Enabled>
	...

080a2a18 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a2a18:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a2a1a:	4d0c      	ldr	r5, [pc, #48]	; (80a2a4c <_Z22__fetch_global_Serial1v+0x34>)
 80a2a1c:	6829      	ldr	r1, [r5, #0]
 80a2a1e:	f011 0401 	ands.w	r4, r1, #1
 80a2a22:	d111      	bne.n	80a2a48 <_Z22__fetch_global_Serial1v+0x30>
 80a2a24:	4628      	mov	r0, r5
 80a2a26:	f7fd fb40 	bl	80a00aa <__cxa_guard_acquire>
 80a2a2a:	b168      	cbz	r0, 80a2a48 <_Z22__fetch_global_Serial1v+0x30>
 80a2a2c:	4a08      	ldr	r2, [pc, #32]	; (80a2a50 <_Z22__fetch_global_Serial1v+0x38>)
 80a2a2e:	4621      	mov	r1, r4
 80a2a30:	4b08      	ldr	r3, [pc, #32]	; (80a2a54 <_Z22__fetch_global_Serial1v+0x3c>)
 80a2a32:	4809      	ldr	r0, [pc, #36]	; (80a2a58 <_Z22__fetch_global_Serial1v+0x40>)
 80a2a34:	f7ff ffcc 	bl	80a29d0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a2a38:	4628      	mov	r0, r5
 80a2a3a:	f7fd fb3b 	bl	80a00b4 <__cxa_guard_release>
 80a2a3e:	4a07      	ldr	r2, [pc, #28]	; (80a2a5c <_Z22__fetch_global_Serial1v+0x44>)
 80a2a40:	4907      	ldr	r1, [pc, #28]	; (80a2a60 <_Z22__fetch_global_Serial1v+0x48>)
 80a2a42:	4805      	ldr	r0, [pc, #20]	; (80a2a58 <_Z22__fetch_global_Serial1v+0x40>)
 80a2a44:	f000 fb14 	bl	80a3070 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a2a48:	4803      	ldr	r0, [pc, #12]	; (80a2a58 <_Z22__fetch_global_Serial1v+0x40>)
 80a2a4a:	bd38      	pop	{r3, r4, r5, pc}
 80a2a4c:	200004c8 	.word	0x200004c8
 80a2a50:	200004cc 	.word	0x200004cc
 80a2a54:	20000444 	.word	0x20000444
 80a2a58:	20000430 	.word	0x20000430
 80a2a5c:	20000370 	.word	0x20000370
 80a2a60:	080a297d 	.word	0x080a297d

080a2a64 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2a64:	7441      	strb	r1, [r0, #17]
 80a2a66:	4770      	bx	lr

080a2a68 <_ZN9USBSerialD1Ev>:
#include "spark_wiring_platform.h"
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"

class USBSerial : public Stream
 80a2a68:	4770      	bx	lr

080a2a6a <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 80a2a6a:	2100      	movs	r1, #0
 80a2a6c:	7c00      	ldrb	r0, [r0, #16]
 80a2a6e:	f7fe bd39 	b.w	80a14e4 <HAL_USB_USART_Receive_Data>

080a2a72 <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 80a2a72:	2101      	movs	r1, #1
 80a2a74:	7c00      	ldrb	r0, [r0, #16]
 80a2a76:	f7fe bd35 	b.w	80a14e4 <HAL_USB_USART_Receive_Data>

080a2a7a <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 80a2a7a:	7c00      	ldrb	r0, [r0, #16]
 80a2a7c:	f7fe bd2a 	b.w	80a14d4 <HAL_USB_USART_Available_Data_For_Write>

080a2a80 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 80a2a80:	7c00      	ldrb	r0, [r0, #16]
 80a2a82:	f7fe bd1f 	b.w	80a14c4 <HAL_USB_USART_Available_Data>

080a2a86 <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 80a2a86:	b538      	push	{r3, r4, r5, lr}
 80a2a88:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2a8a:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 80a2a8c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2a8e:	f7fe fd21 	bl	80a14d4 <HAL_USB_USART_Available_Data_For_Write>
 80a2a92:	2800      	cmp	r0, #0
 80a2a94:	dc01      	bgt.n	80a2a9a <_ZN9USBSerial5writeEh+0x14>
 80a2a96:	7c60      	ldrb	r0, [r4, #17]
 80a2a98:	b120      	cbz	r0, 80a2aa4 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 80a2a9a:	4629      	mov	r1, r5
 80a2a9c:	7c20      	ldrb	r0, [r4, #16]
 80a2a9e:	f7fe fd29 	bl	80a14f4 <HAL_USB_USART_Send_Data>
    return 1;
 80a2aa2:	2001      	movs	r0, #1
  }
  return 0;
}
 80a2aa4:	bd38      	pop	{r3, r4, r5, pc}

080a2aa6 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a2aa6:	7c00      	ldrb	r0, [r0, #16]
 80a2aa8:	f7fe bd2c 	b.w	80a1504 <HAL_USB_USART_Flush_Data>

080a2aac <_ZN9USBSerialD0Ev>:
 80a2aac:	b510      	push	{r4, lr}
 80a2aae:	4604      	mov	r4, r0
 80a2ab0:	f7fd faf7 	bl	80a00a2 <_ZdlPv>
 80a2ab4:	4620      	mov	r0, r4
 80a2ab6:	bd10      	pop	{r4, pc}

080a2ab8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a2ab8:	b510      	push	{r4, lr}
 80a2aba:	4604      	mov	r4, r0
 80a2abc:	2300      	movs	r3, #0
 80a2abe:	6063      	str	r3, [r4, #4]
 80a2ac0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2ac4:	60a3      	str	r3, [r4, #8]
 80a2ac6:	4b05      	ldr	r3, [pc, #20]	; (80a2adc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a2ac8:	4608      	mov	r0, r1
 80a2aca:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a2acc:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a2ace:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a2ad0:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a2ad2:	4611      	mov	r1, r2
 80a2ad4:	f7fe fcee 	bl	80a14b4 <HAL_USB_USART_Init>
}
 80a2ad8:	4620      	mov	r0, r4
 80a2ada:	bd10      	pop	{r4, pc}
 80a2adc:	080a4b3c 	.word	0x080a4b3c

080a2ae0 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a2ae0:	b510      	push	{r4, lr}
 80a2ae2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2ae4:	2214      	movs	r2, #20
 80a2ae6:	2100      	movs	r1, #0
 80a2ae8:	f001 fd59 	bl	80a459e <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a2aec:	4b05      	ldr	r3, [pc, #20]	; (80a2b04 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a2aee:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a2af0:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a2af2:	4b05      	ldr	r3, [pc, #20]	; (80a2b08 <_Z19acquireSerialBufferv+0x28>)
 80a2af4:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a2af6:	f240 1301 	movw	r3, #257	; 0x101
 80a2afa:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a2afc:	2381      	movs	r3, #129	; 0x81
 80a2afe:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a2b00:	bd10      	pop	{r4, pc}
 80a2b02:	bf00      	nop
 80a2b04:	200005d5 	.word	0x200005d5
 80a2b08:	20000554 	.word	0x20000554

080a2b0c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a2b0c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2b0e:	4d0e      	ldr	r5, [pc, #56]	; (80a2b48 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a2b10:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a2b12:	a801      	add	r0, sp, #4
 80a2b14:	f7ff ffe4 	bl	80a2ae0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2b18:	6829      	ldr	r1, [r5, #0]
 80a2b1a:	f011 0401 	ands.w	r4, r1, #1
 80a2b1e:	d110      	bne.n	80a2b42 <_Z16_fetch_usbserialv+0x36>
 80a2b20:	4628      	mov	r0, r5
 80a2b22:	f7fd fac2 	bl	80a00aa <__cxa_guard_acquire>
 80a2b26:	b160      	cbz	r0, 80a2b42 <_Z16_fetch_usbserialv+0x36>
 80a2b28:	aa01      	add	r2, sp, #4
 80a2b2a:	4621      	mov	r1, r4
 80a2b2c:	4807      	ldr	r0, [pc, #28]	; (80a2b4c <_Z16_fetch_usbserialv+0x40>)
 80a2b2e:	f7ff ffc3 	bl	80a2ab8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2b32:	4628      	mov	r0, r5
 80a2b34:	f7fd fabe 	bl	80a00b4 <__cxa_guard_release>
 80a2b38:	4a05      	ldr	r2, [pc, #20]	; (80a2b50 <_Z16_fetch_usbserialv+0x44>)
 80a2b3a:	4906      	ldr	r1, [pc, #24]	; (80a2b54 <_Z16_fetch_usbserialv+0x48>)
 80a2b3c:	4803      	ldr	r0, [pc, #12]	; (80a2b4c <_Z16_fetch_usbserialv+0x40>)
 80a2b3e:	f000 fa97 	bl	80a3070 <__aeabi_atexit>
	return _usbserial;
}
 80a2b42:	4802      	ldr	r0, [pc, #8]	; (80a2b4c <_Z16_fetch_usbserialv+0x40>)
 80a2b44:	b007      	add	sp, #28
 80a2b46:	bd30      	pop	{r4, r5, pc}
 80a2b48:	20000550 	.word	0x20000550
 80a2b4c:	200006d8 	.word	0x200006d8
 80a2b50:	20000370 	.word	0x20000370
 80a2b54:	080a2a69 	.word	0x080a2a69

080a2b58 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a2b58:	b510      	push	{r4, lr}
 80a2b5a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2b5c:	2214      	movs	r2, #20
 80a2b5e:	2100      	movs	r1, #0
 80a2b60:	f001 fd1d 	bl	80a459e <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a2b64:	4b05      	ldr	r3, [pc, #20]	; (80a2b7c <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a2b66:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a2b68:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a2b6a:	4b05      	ldr	r3, [pc, #20]	; (80a2b80 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a2b6c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a2b6e:	f240 1301 	movw	r3, #257	; 0x101
 80a2b72:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a2b74:	2381      	movs	r3, #129	; 0x81
 80a2b76:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a2b78:	bd10      	pop	{r4, pc}
 80a2b7a:	bf00      	nop
 80a2b7c:	20000788 	.word	0x20000788
 80a2b80:	200006f0 	.word	0x200006f0

080a2b84 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a2b84:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2b86:	4c0e      	ldr	r4, [pc, #56]	; (80a2bc0 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a2b88:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a2b8a:	a801      	add	r0, sp, #4
 80a2b8c:	f7ff ffe4 	bl	80a2b58 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2b90:	6823      	ldr	r3, [r4, #0]
 80a2b92:	07db      	lsls	r3, r3, #31
 80a2b94:	d410      	bmi.n	80a2bb8 <_Z17_fetch_usbserial1v+0x34>
 80a2b96:	4620      	mov	r0, r4
 80a2b98:	f7fd fa87 	bl	80a00aa <__cxa_guard_acquire>
 80a2b9c:	b160      	cbz	r0, 80a2bb8 <_Z17_fetch_usbserial1v+0x34>
 80a2b9e:	aa01      	add	r2, sp, #4
 80a2ba0:	2101      	movs	r1, #1
 80a2ba2:	4808      	ldr	r0, [pc, #32]	; (80a2bc4 <_Z17_fetch_usbserial1v+0x40>)
 80a2ba4:	f7ff ff88 	bl	80a2ab8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2ba8:	4620      	mov	r0, r4
 80a2baa:	f7fd fa83 	bl	80a00b4 <__cxa_guard_release>
 80a2bae:	4a06      	ldr	r2, [pc, #24]	; (80a2bc8 <_Z17_fetch_usbserial1v+0x44>)
 80a2bb0:	4906      	ldr	r1, [pc, #24]	; (80a2bcc <_Z17_fetch_usbserial1v+0x48>)
 80a2bb2:	4804      	ldr	r0, [pc, #16]	; (80a2bc4 <_Z17_fetch_usbserial1v+0x40>)
 80a2bb4:	f000 fa5c 	bl	80a3070 <__aeabi_atexit>
  return _usbserial1;
}
 80a2bb8:	4802      	ldr	r0, [pc, #8]	; (80a2bc4 <_Z17_fetch_usbserial1v+0x40>)
 80a2bba:	b006      	add	sp, #24
 80a2bbc:	bd10      	pop	{r4, pc}
 80a2bbe:	bf00      	nop
 80a2bc0:	200006ec 	.word	0x200006ec
 80a2bc4:	20000774 	.word	0x20000774
 80a2bc8:	20000370 	.word	0x20000370
 80a2bcc:	080a2a69 	.word	0x080a2a69

080a2bd0 <_ZN5spark9WiFiClassD1Ev>:
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
    ~WiFiClass() {}
 80a2bd0:	4770      	bx	lr

080a2bd2 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a2bd2:	2200      	movs	r2, #0
 80a2bd4:	4611      	mov	r1, r2
 80a2bd6:	4610      	mov	r0, r2
 80a2bd8:	f7fe bd30 	b.w	80a163c <network_ready>

080a2bdc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    void setIPAddressSource(IPAddressSource source) {
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
 80a2bdc:	4803      	ldr	r0, [pc, #12]	; (80a2bec <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a2bde:	4b04      	ldr	r3, [pc, #16]	; (80a2bf0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x14>)
one second timeout is reached). If the aforementioned "bug" is ever fixed by
TI, no changes need to be made to this function, as it would be implemented
the same way.
*****************************************************************************/

    WiFiClass WiFi;
 80a2be0:	4a04      	ldr	r2, [pc, #16]	; (80a2bf4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x18>)
 80a2be2:	4905      	ldr	r1, [pc, #20]	; (80a2bf8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x1c>)
 80a2be4:	6003      	str	r3, [r0, #0]
 80a2be6:	f000 ba43 	b.w	80a3070 <__aeabi_atexit>
 80a2bea:	bf00      	nop
 80a2bec:	2000088c 	.word	0x2000088c
 80a2bf0:	080a4b6c 	.word	0x080a4b6c
 80a2bf4:	20000370 	.word	0x20000370
 80a2bf8:	080a2bd1 	.word	0x080a2bd1

080a2bfc <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 80a2bfc:	b510      	push	{r4, lr}
 80a2bfe:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 80a2c00:	f001 fd2b 	bl	80a465a <strlen>
 80a2c04:	3801      	subs	r0, #1
 80a2c06:	1823      	adds	r3, r4, r0
 80a2c08:	4620      	mov	r0, r4
	while(i<j){
 80a2c0a:	4298      	cmp	r0, r3
 80a2c0c:	d206      	bcs.n	80a2c1c <_Z11str_reversePc+0x20>
		c = *i;
 80a2c0e:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 80a2c10:	7819      	ldrb	r1, [r3, #0]
 80a2c12:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 80a2c16:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
 80a2c1a:	e7f6      	b.n	80a2c0a <_Z11str_reversePc+0xe>
 80a2c1c:	bd10      	pop	{r4, pc}

080a2c1e <ltoa>:
{
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
 80a2c1e:	1e93      	subs	r3, r2, #2
            base = 10;                    /* can only use 0-9, A-Z        */
 80a2c20:	2b23      	cmp	r3, #35	; 0x23



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
 80a2c22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2c26:	4615      	mov	r5, r2
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
 80a2c28:	bf34      	ite	cc
 80a2c2a:	4615      	movcc	r5, r2
 80a2c2c:	250a      	movcs	r5, #10



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
 80a2c2e:	b08c      	sub	sp, #48	; 0x30
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
 80a2c30:	2300      	movs	r3, #0

      if (10 == base && N < 0L)
 80a2c32:	2d0a      	cmp	r5, #10



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
 80a2c34:	460c      	mov	r4, r1
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
 80a2c36:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c

      if (10 == base && N < 0L)
 80a2c3a:	d107      	bne.n	80a2c4c <ltoa+0x2e>
 80a2c3c:	4298      	cmp	r0, r3
 80a2c3e:	da05      	bge.n	80a2c4c <ltoa+0x2e>
      {
            *head++ = '-';
 80a2c40:	232d      	movs	r3, #45	; 0x2d
 80a2c42:	f101 0801 	add.w	r8, r1, #1
 80a2c46:	700b      	strb	r3, [r1, #0]
            uarg    = -N;
 80a2c48:	4240      	negs	r0, r0
 80a2c4a:	e001      	b.n	80a2c50 <ltoa+0x32>
      }
      else  uarg = N;

      if (uarg)
 80a2c4c:	b1a8      	cbz	r0, 80a2c7a <ltoa+0x5c>
 80a2c4e:	46a0      	mov	r8, r4
 80a2c50:	f10d 062b 	add.w	r6, sp, #43	; 0x2b
 80a2c54:	2701      	movs	r7, #1
      {
            for (i = 1; uarg; ++i)
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
 80a2c56:	462a      	mov	r2, r5
 80a2c58:	4601      	mov	r1, r0
 80a2c5a:	a801      	add	r0, sp, #4
 80a2c5c:	f001 fc80 	bl	80a4560 <ldiv>
 80a2c60:	9a02      	ldr	r2, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
 80a2c62:	9801      	ldr	r0, [sp, #4]
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
 80a2c64:	2a09      	cmp	r2, #9
 80a2c66:	bfcc      	ite	gt
 80a2c68:	2337      	movgt	r3, #55	; 0x37
 80a2c6a:	2330      	movle	r3, #48	; 0x30
 80a2c6c:	4413      	add	r3, r2
 80a2c6e:	f806 3901 	strb.w	r3, [r6], #-1
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
 80a2c72:	3701      	adds	r7, #1
 80a2c74:	2800      	cmp	r0, #0
 80a2c76:	d1ee      	bne.n	80a2c56 <ltoa+0x38>
 80a2c78:	e006      	b.n	80a2c88 <ltoa+0x6a>
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
            }
      }
      else  *tail-- = '0';
 80a2c7a:	46a0      	mov	r8, r4
 80a2c7c:	2330      	movs	r3, #48	; 0x30
 80a2c7e:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 80a2c82:	f10d 062a 	add.w	r6, sp, #42	; 0x2a


//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
      int i = 2;
 80a2c86:	2702      	movs	r7, #2
                  uarg    = r.quot;
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
 80a2c88:	463a      	mov	r2, r7
 80a2c8a:	1c71      	adds	r1, r6, #1
 80a2c8c:	4640      	mov	r0, r8
 80a2c8e:	f001 fc7b 	bl	80a4588 <memcpy>
      return str;
}
 80a2c92:	4620      	mov	r0, r4
 80a2c94:	b00c      	add	sp, #48	; 0x30
 80a2c96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a2c9a <ultoa>:

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 80a2c9a:	b570      	push	{r4, r5, r6, lr}
 80a2c9c:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 80a2c9e:	1e91      	subs	r1, r2, #2
 80a2ca0:	2922      	cmp	r1, #34	; 0x22
 80a2ca2:	d820      	bhi.n	80a2ce6 <ultoa+0x4c>
 80a2ca4:	4625      	mov	r5, r4
 80a2ca6:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 80a2ca8:	b910      	cbnz	r0, 80a2cb0 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a2caa:	4423      	add	r3, r4
            *ptr++ = '0';
 80a2cac:	2230      	movs	r2, #48	; 0x30
 80a2cae:	e00e      	b.n	80a2cce <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 80a2cb0:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 80a2cb4:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 80a2cb8:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 80a2cba:	2809      	cmp	r0, #9
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
            result.rem = a%radix;
            *ptr = result.rem;
 80a2cbc:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
                *ptr += '0';
 80a2cc0:	bf94      	ite	ls
 80a2cc2:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 80a2cc4:	3157      	addhi	r1, #87	; 0x57
 80a2cc6:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
 80a2cca:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 80a2ccc:	e7eb      	b.n	80a2ca6 <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a2cce:	4299      	cmp	r1, r3
 80a2cd0:	d202      	bcs.n	80a2cd8 <ultoa+0x3e>
            *ptr++ = '0';
 80a2cd2:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a2cd6:	e7fa      	b.n	80a2cce <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
 80a2cd8:	2300      	movs	r3, #0
	str_reverse(buffer);
 80a2cda:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
 80a2cdc:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
 80a2cde:	f7ff ff8d 	bl	80a2bfc <_Z11str_reversePc>
	return buffer;
 80a2ce2:	4620      	mov	r0, r4
 80a2ce4:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
 80a2ce6:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
 80a2ce8:	bd70      	pop	{r4, r5, r6, pc}

080a2cea <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 80a2cea:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
 80a2cec:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 80a2cee:	460c      	mov	r4, r1
 80a2cf0:	4615      	mov	r5, r2
	if(a<0){
 80a2cf2:	da0b      	bge.n	80a2d0c <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 80a2cf4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 80a2cf8:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 80a2cfc:	bf14      	ite	ne
 80a2cfe:	4258      	negne	r0, r3
 80a2d00:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
 80a2d02:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 80a2d04:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
 80a2d06:	462a      	mov	r2, r5
 80a2d08:	4419      	add	r1, r3
 80a2d0a:	e000      	b.n	80a2d0e <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
 80a2d0c:	2301      	movs	r3, #1
 80a2d0e:	f7ff ffc4 	bl	80a2c9a <ultoa>
	}
	return buffer;
}
 80a2d12:	4620      	mov	r0, r4
 80a2d14:	bd38      	pop	{r3, r4, r5, pc}
	...

080a2d18 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a2d18:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a2d1a:	4b14      	ldr	r3, [pc, #80]	; (80a2d6c <serialEventRun+0x54>)
 80a2d1c:	b133      	cbz	r3, 80a2d2c <serialEventRun+0x14>
 80a2d1e:	f7ff fef5 	bl	80a2b0c <_Z16_fetch_usbserialv>
 80a2d22:	6803      	ldr	r3, [r0, #0]
 80a2d24:	691b      	ldr	r3, [r3, #16]
 80a2d26:	4798      	blx	r3
 80a2d28:	2800      	cmp	r0, #0
 80a2d2a:	dc16      	bgt.n	80a2d5a <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a2d2c:	4b10      	ldr	r3, [pc, #64]	; (80a2d70 <serialEventRun+0x58>)
 80a2d2e:	b133      	cbz	r3, 80a2d3e <serialEventRun+0x26>
 80a2d30:	f7ff fe72 	bl	80a2a18 <_Z22__fetch_global_Serial1v>
 80a2d34:	6803      	ldr	r3, [r0, #0]
 80a2d36:	691b      	ldr	r3, [r3, #16]
 80a2d38:	4798      	blx	r3
 80a2d3a:	2800      	cmp	r0, #0
 80a2d3c:	dc10      	bgt.n	80a2d60 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a2d3e:	4b0d      	ldr	r3, [pc, #52]	; (80a2d74 <serialEventRun+0x5c>)
 80a2d40:	b10b      	cbz	r3, 80a2d46 <serialEventRun+0x2e>
 80a2d42:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a2d46:	4b0c      	ldr	r3, [pc, #48]	; (80a2d78 <serialEventRun+0x60>)
 80a2d48:	b17b      	cbz	r3, 80a2d6a <serialEventRun+0x52>
 80a2d4a:	f7ff ff1b 	bl	80a2b84 <_Z17_fetch_usbserial1v>
 80a2d4e:	6803      	ldr	r3, [r0, #0]
 80a2d50:	691b      	ldr	r3, [r3, #16]
 80a2d52:	4798      	blx	r3
 80a2d54:	2800      	cmp	r0, #0
 80a2d56:	dc06      	bgt.n	80a2d66 <serialEventRun+0x4e>
 80a2d58:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a2d5a:	f3af 8000 	nop.w
 80a2d5e:	e7e5      	b.n	80a2d2c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a2d60:	f3af 8000 	nop.w
 80a2d64:	e7eb      	b.n	80a2d3e <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a2d66:	f3af 8000 	nop.w
 80a2d6a:	bd08      	pop	{r3, pc}
	...

080a2d7c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a2d7c:	b508      	push	{r3, lr}
	serialEventRun();
 80a2d7e:	f7ff ffcb 	bl	80a2d18 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a2d82:	f7fe fa5d 	bl	80a1240 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a2d86:	4b01      	ldr	r3, [pc, #4]	; (80a2d8c <_post_loop+0x10>)
 80a2d88:	6018      	str	r0, [r3, #0]
 80a2d8a:	bd08      	pop	{r3, pc}
 80a2d8c:	20000898 	.word	0x20000898

080a2d90 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a2d90:	4802      	ldr	r0, [pc, #8]	; (80a2d9c <_Z33system_initialize_user_backup_ramv+0xc>)
 80a2d92:	4a03      	ldr	r2, [pc, #12]	; (80a2da0 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a2d94:	4903      	ldr	r1, [pc, #12]	; (80a2da4 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a2d96:	1a12      	subs	r2, r2, r0
 80a2d98:	f001 bbf6 	b.w	80a4588 <memcpy>
 80a2d9c:	40024000 	.word	0x40024000
 80a2da0:	40024004 	.word	0x40024004
 80a2da4:	080a4d28 	.word	0x080a4d28

080a2da8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a2da8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2daa:	2300      	movs	r3, #0
 80a2dac:	9300      	str	r3, [sp, #0]
 80a2dae:	461a      	mov	r2, r3
 80a2db0:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2db4:	f7fe fc00 	bl	80a15b8 <system_ctrl_set_result>
}
 80a2db8:	b003      	add	sp, #12
 80a2dba:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a2dc0 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a2dc0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a2dc2:	8843      	ldrh	r3, [r0, #2]
 80a2dc4:	2b0a      	cmp	r3, #10
 80a2dc6:	d008      	beq.n	80a2dda <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a2dc8:	2b50      	cmp	r3, #80	; 0x50
 80a2dca:	d109      	bne.n	80a2de0 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a2dcc:	4b09      	ldr	r3, [pc, #36]	; (80a2df4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a2dce:	681b      	ldr	r3, [r3, #0]
 80a2dd0:	b13b      	cbz	r3, 80a2de2 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a2dd2:	b003      	add	sp, #12
 80a2dd4:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a2dd8:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a2dda:	f7ff ffe5 	bl	80a2da8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a2dde:	e006      	b.n	80a2dee <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2de0:	2300      	movs	r3, #0
 80a2de2:	9300      	str	r3, [sp, #0]
 80a2de4:	461a      	mov	r2, r3
 80a2de6:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2dea:	f7fe fbe5 	bl	80a15b8 <system_ctrl_set_result>
        break;
    }
}
 80a2dee:	b003      	add	sp, #12
 80a2df0:	f85d fb04 	ldr.w	pc, [sp], #4
 80a2df4:	20000890 	.word	0x20000890

080a2df8 <module_user_init_hook>:

void module_user_init_hook()
{
 80a2df8:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a2dfa:	4c10      	ldr	r4, [pc, #64]	; (80a2e3c <module_user_init_hook+0x44>)
 80a2dfc:	4d10      	ldr	r5, [pc, #64]	; (80a2e40 <module_user_init_hook+0x48>)
 80a2dfe:	6823      	ldr	r3, [r4, #0]
 80a2e00:	42ab      	cmp	r3, r5
 80a2e02:	4b10      	ldr	r3, [pc, #64]	; (80a2e44 <module_user_init_hook+0x4c>)
 80a2e04:	bf0c      	ite	eq
 80a2e06:	2201      	moveq	r2, #1
 80a2e08:	2200      	movne	r2, #0
 80a2e0a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a2e0c:	d002      	beq.n	80a2e14 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a2e0e:	f7ff ffbf 	bl	80a2d90 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a2e12:	6025      	str	r5, [r4, #0]
#endif

    // todo - add a RNG define for that capability
#if defined(STM32F2XX)
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    srand(HAL_RNG_GetRandomNumber());
 80a2e14:	f7fe fa0c 	bl	80a1230 <HAL_RNG_GetRandomNumber>
 80a2e18:	f001 fbca 	bl	80a45b0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a2e1c:	4b0a      	ldr	r3, [pc, #40]	; (80a2e48 <module_user_init_hook+0x50>)
 80a2e1e:	b11b      	cbz	r3, 80a2e28 <module_user_init_hook+0x30>
        uint32_t seed = HAL_RNG_GetRandomNumber();
 80a2e20:	f7fe fa06 	bl	80a1230 <HAL_RNG_GetRandomNumber>
        random_seed_from_cloud(seed);
 80a2e24:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a2e28:	2100      	movs	r1, #0
 80a2e2a:	4807      	ldr	r0, [pc, #28]	; (80a2e48 <module_user_init_hook+0x50>)
 80a2e2c:	f7fe fbfe 	bl	80a162c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a2e30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a2e34:	2100      	movs	r1, #0
 80a2e36:	4805      	ldr	r0, [pc, #20]	; (80a2e4c <module_user_init_hook+0x54>)
 80a2e38:	f7fe bbb4 	b.w	80a15a4 <system_ctrl_set_app_request_handler>
 80a2e3c:	40024000 	.word	0x40024000
 80a2e40:	9a271c1e 	.word	0x9a271c1e
 80a2e44:	20000894 	.word	0x20000894
 80a2e48:	00000000 	.word	0x00000000
 80a2e4c:	080a2dc1 	.word	0x080a2dc1

080a2e50 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
 80a2e50:	b508      	push	{r3, lr}
 80a2e52:	4b02      	ldr	r3, [pc, #8]	; (80a2e5c <spark_protocol_instance+0xc>)
 80a2e54:	681b      	ldr	r3, [r3, #0]
 80a2e56:	681b      	ldr	r3, [r3, #0]
 80a2e58:	9301      	str	r3, [sp, #4]
 80a2e5a:	bd08      	pop	{r3, pc}
 80a2e5c:	0802019c 	.word	0x0802019c

080a2e60 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
 80a2e60:	b508      	push	{r3, lr}
 80a2e62:	4b02      	ldr	r3, [pc, #8]	; (80a2e6c <spark_protocol_set_product_id+0xc>)
 80a2e64:	681b      	ldr	r3, [r3, #0]
 80a2e66:	685b      	ldr	r3, [r3, #4]
 80a2e68:	9301      	str	r3, [sp, #4]
 80a2e6a:	bd08      	pop	{r3, pc}
 80a2e6c:	0802019c 	.word	0x0802019c

080a2e70 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
 80a2e70:	b508      	push	{r3, lr}
 80a2e72:	4b02      	ldr	r3, [pc, #8]	; (80a2e7c <spark_protocol_set_product_firmware_version+0xc>)
 80a2e74:	681b      	ldr	r3, [r3, #0]
 80a2e76:	689b      	ldr	r3, [r3, #8]
 80a2e78:	9301      	str	r3, [sp, #4]
 80a2e7a:	bd08      	pop	{r3, pc}
 80a2e7c:	0802019c 	.word	0x0802019c

080a2e80 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a2e80:	b510      	push	{r4, lr}
 80a2e82:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a2e84:	480f      	ldr	r0, [pc, #60]	; (80a2ec4 <pinAvailable+0x44>)
 80a2e86:	f7ff f8f7 	bl	80a2078 <_ZN8SPIClass9isEnabledEv>
 80a2e8a:	b128      	cbz	r0, 80a2e98 <pinAvailable+0x18>
 80a2e8c:	f1a4 030d 	sub.w	r3, r4, #13
 80a2e90:	2b02      	cmp	r3, #2
 80a2e92:	d801      	bhi.n	80a2e98 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a2e94:	2000      	movs	r0, #0
 80a2e96:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a2e98:	f000 f890 	bl	80a2fbc <_Z19__fetch_global_Wirev>
 80a2e9c:	f7fe ff22 	bl	80a1ce4 <_ZN7TwoWire9isEnabledEv>
 80a2ea0:	b108      	cbz	r0, 80a2ea6 <pinAvailable+0x26>
 80a2ea2:	2c01      	cmp	r4, #1
 80a2ea4:	d9f6      	bls.n	80a2e94 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a2ea6:	f7ff fdb7 	bl	80a2a18 <_Z22__fetch_global_Serial1v>
 80a2eaa:	f7ff fdb1 	bl	80a2a10 <_ZN11USARTSerial9isEnabledEv>
 80a2eae:	b118      	cbz	r0, 80a2eb8 <pinAvailable+0x38>
 80a2eb0:	f1a4 0312 	sub.w	r3, r4, #18
 80a2eb4:	2b01      	cmp	r3, #1
 80a2eb6:	d9ed      	bls.n	80a2e94 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a2eb8:	2c17      	cmp	r4, #23
 80a2eba:	bf8c      	ite	hi
 80a2ebc:	2000      	movhi	r0, #0
 80a2ebe:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a2ec0:	bd10      	pop	{r4, pc}
 80a2ec2:	bf00      	nop
 80a2ec4:	200008cc 	.word	0x200008cc

080a2ec8 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2ec8:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a2eca:	b538      	push	{r3, r4, r5, lr}
 80a2ecc:	4604      	mov	r4, r0
 80a2ece:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2ed0:	d80a      	bhi.n	80a2ee8 <pinMode+0x20>
 80a2ed2:	29ff      	cmp	r1, #255	; 0xff
 80a2ed4:	d008      	beq.n	80a2ee8 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a2ed6:	f7ff ffd3 	bl	80a2e80 <pinAvailable>
 80a2eda:	b128      	cbz	r0, 80a2ee8 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a2edc:	4629      	mov	r1, r5
 80a2ede:	4620      	mov	r0, r4
}
 80a2ee0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a2ee4:	f7fe b9d4 	b.w	80a1290 <HAL_Pin_Mode>
 80a2ee8:	bd38      	pop	{r3, r4, r5, pc}

080a2eea <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a2eea:	b538      	push	{r3, r4, r5, lr}
 80a2eec:	4604      	mov	r4, r0
 80a2eee:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a2ef0:	f7fe f9d6 	bl	80a12a0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a2ef4:	28ff      	cmp	r0, #255	; 0xff
 80a2ef6:	d010      	beq.n	80a2f1a <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a2ef8:	2806      	cmp	r0, #6
 80a2efa:	d804      	bhi.n	80a2f06 <digitalWrite+0x1c>
 80a2efc:	234d      	movs	r3, #77	; 0x4d
 80a2efe:	fa23 f000 	lsr.w	r0, r3, r0
 80a2f02:	07c3      	lsls	r3, r0, #31
 80a2f04:	d409      	bmi.n	80a2f1a <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a2f06:	4620      	mov	r0, r4
 80a2f08:	f7ff ffba 	bl	80a2e80 <pinAvailable>
 80a2f0c:	b128      	cbz	r0, 80a2f1a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a2f0e:	4629      	mov	r1, r5
 80a2f10:	4620      	mov	r0, r4
}
 80a2f12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a2f16:	f7fe b9cb 	b.w	80a12b0 <HAL_GPIO_Write>
 80a2f1a:	bd38      	pop	{r3, r4, r5, pc}

080a2f1c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a2f1c:	b510      	push	{r4, lr}
 80a2f1e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a2f20:	f7fe f9be 	bl	80a12a0 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 80a2f24:	3804      	subs	r0, #4
 80a2f26:	b2c0      	uxtb	r0, r0
 80a2f28:	2801      	cmp	r0, #1
 80a2f2a:	d908      	bls.n	80a2f3e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a2f2c:	4620      	mov	r0, r4
 80a2f2e:	f7ff ffa7 	bl	80a2e80 <pinAvailable>
 80a2f32:	b120      	cbz	r0, 80a2f3e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a2f34:	4620      	mov	r0, r4
}
 80a2f36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a2f3a:	f7fe b9c1 	b.w	80a12c0 <HAL_GPIO_Read>
}
 80a2f3e:	2000      	movs	r0, #0
 80a2f40:	bd10      	pop	{r4, pc}

080a2f42 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80a2f42:	b510      	push	{r4, lr}
 80a2f44:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 80a2f46:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80a2f48:	bf9c      	itt	ls
 80a2f4a:	340a      	addls	r4, #10
 80a2f4c:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a2f4e:	4620      	mov	r0, r4
 80a2f50:	f7ff ff96 	bl	80a2e80 <pinAvailable>
 80a2f54:	b150      	cbz	r0, 80a2f6c <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 80a2f56:	2103      	movs	r1, #3
 80a2f58:	4620      	mov	r0, r4
 80a2f5a:	f7fe f991 	bl	80a1280 <HAL_Validate_Pin_Function>
 80a2f5e:	2803      	cmp	r0, #3
 80a2f60:	d104      	bne.n	80a2f6c <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80a2f62:	4620      	mov	r0, r4
}
 80a2f64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80a2f68:	f7fe b9ba 	b.w	80a12e0 <HAL_ADC_Read>
}
 80a2f6c:	2000      	movs	r0, #0
 80a2f6e:	bd10      	pop	{r4, pc}

080a2f70 <_Z11analogWritetm>:
/*
 * @brief Should take an integer 0-255 and create a 500Hz PWM signal with a duty cycle from 0-100%.
 * On Photon, DAC1 and DAC2 act as true analog outputs(values: 0 to 4095) using onchip DAC peripheral
 */
void analogWrite(pin_t pin, uint32_t value)
{
 80a2f70:	b538      	push	{r3, r4, r5, lr}
 80a2f72:	4604      	mov	r4, r0
 80a2f74:	460d      	mov	r5, r1
    // Safety check
    if (!pinAvailable(pin))
 80a2f76:	f7ff ff83 	bl	80a2e80 <pinAvailable>
 80a2f7a:	b1f0      	cbz	r0, 80a2fba <_Z11analogWritetm+0x4a>
    {
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
 80a2f7c:	2104      	movs	r1, #4
 80a2f7e:	4620      	mov	r0, r4
 80a2f80:	f7fe f97e 	bl	80a1280 <HAL_Validate_Pin_Function>
 80a2f84:	2804      	cmp	r0, #4
 80a2f86:	d105      	bne.n	80a2f94 <_Z11analogWritetm+0x24>
    {
        HAL_DAC_Write(pin, value);
 80a2f88:	b2a9      	uxth	r1, r5
 80a2f8a:	4620      	mov	r0, r4
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
    }
}
 80a2f8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return;
    }

    if (HAL_Validate_Pin_Function(pin, PF_DAC) == PF_DAC)
    {
        HAL_DAC_Write(pin, value);
 80a2f90:	f7fe b99e 	b.w	80a12d0 <HAL_DAC_Write>
    }
    else if (HAL_Validate_Pin_Function(pin, PF_TIMER) == PF_TIMER)
 80a2f94:	2102      	movs	r1, #2
 80a2f96:	4620      	mov	r0, r4
 80a2f98:	f7fe f972 	bl	80a1280 <HAL_Validate_Pin_Function>
 80a2f9c:	2802      	cmp	r0, #2
 80a2f9e:	d10c      	bne.n	80a2fba <_Z11analogWritetm+0x4a>
    {
        PinMode mode = HAL_Get_Pin_Mode(pin);
 80a2fa0:	4620      	mov	r0, r4
 80a2fa2:	f7fe f97d 	bl	80a12a0 <HAL_Get_Pin_Mode>

        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
 80a2fa6:	2801      	cmp	r0, #1
 80a2fa8:	d001      	beq.n	80a2fae <_Z11analogWritetm+0x3e>
 80a2faa:	2804      	cmp	r0, #4
 80a2fac:	d105      	bne.n	80a2fba <_Z11analogWritetm+0x4a>
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
 80a2fae:	4629      	mov	r1, r5
 80a2fb0:	4620      	mov	r0, r4
    }
}
 80a2fb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        if (mode != OUTPUT && mode != AF_OUTPUT_PUSHPULL)
        {
            return;
        }

        HAL_PWM_Write_Ext(pin, value);
 80a2fb6:	f7fe b99b 	b.w	80a12f0 <HAL_PWM_Write_Ext>
 80a2fba:	bd38      	pop	{r3, r4, r5, pc}

080a2fbc <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a2fbc:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a2fbe:	4d0b      	ldr	r5, [pc, #44]	; (80a2fec <_Z19__fetch_global_Wirev+0x30>)
 80a2fc0:	6829      	ldr	r1, [r5, #0]
 80a2fc2:	f011 0401 	ands.w	r4, r1, #1
 80a2fc6:	d10f      	bne.n	80a2fe8 <_Z19__fetch_global_Wirev+0x2c>
 80a2fc8:	4628      	mov	r0, r5
 80a2fca:	f7fd f86e 	bl	80a00aa <__cxa_guard_acquire>
 80a2fce:	b158      	cbz	r0, 80a2fe8 <_Z19__fetch_global_Wirev+0x2c>
 80a2fd0:	4621      	mov	r1, r4
 80a2fd2:	4807      	ldr	r0, [pc, #28]	; (80a2ff0 <_Z19__fetch_global_Wirev+0x34>)
 80a2fd4:	f7fe fe74 	bl	80a1cc0 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a2fd8:	4628      	mov	r0, r5
 80a2fda:	f7fd f86b 	bl	80a00b4 <__cxa_guard_release>
 80a2fde:	4a05      	ldr	r2, [pc, #20]	; (80a2ff4 <_Z19__fetch_global_Wirev+0x38>)
 80a2fe0:	4905      	ldr	r1, [pc, #20]	; (80a2ff8 <_Z19__fetch_global_Wirev+0x3c>)
 80a2fe2:	4803      	ldr	r0, [pc, #12]	; (80a2ff0 <_Z19__fetch_global_Wirev+0x34>)
 80a2fe4:	f000 f844 	bl	80a3070 <__aeabi_atexit>
	return wire;
}
 80a2fe8:	4801      	ldr	r0, [pc, #4]	; (80a2ff0 <_Z19__fetch_global_Wirev+0x34>)
 80a2fea:	bd38      	pop	{r3, r4, r5, pc}
 80a2fec:	2000089c 	.word	0x2000089c
 80a2ff0:	200008a0 	.word	0x200008a0
 80a2ff4:	20000370 	.word	0x20000370
 80a2ff8:	080a1c69 	.word	0x080a1c69

080a2ffc <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a2ffc:	b513      	push	{r0, r1, r4, lr}
 80a2ffe:	4c08      	ldr	r4, [pc, #32]	; (80a3020 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a3000:	2300      	movs	r3, #0
 80a3002:	461a      	mov	r2, r3
 80a3004:	4619      	mov	r1, r3
 80a3006:	9300      	str	r3, [sp, #0]
 80a3008:	4620      	mov	r0, r4
 80a300a:	f7fe feab 	bl	80a1d64 <_ZN9IPAddressC1Ehhhh>
 80a300e:	4620      	mov	r0, r4
 80a3010:	4a04      	ldr	r2, [pc, #16]	; (80a3024 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a3012:	4905      	ldr	r1, [pc, #20]	; (80a3028 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a3014:	b002      	add	sp, #8
 80a3016:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a301a:	f000 b829 	b.w	80a3070 <__aeabi_atexit>
 80a301e:	bf00      	nop
 80a3020:	200008b4 	.word	0x200008b4
 80a3024:	20000370 	.word	0x20000370
 80a3028:	080a1ced 	.word	0x080a1ced

080a302c <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a302c:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a302e:	4c0c      	ldr	r4, [pc, #48]	; (80a3060 <_GLOBAL__sub_I_SPI+0x34>)
 80a3030:	4e0c      	ldr	r6, [pc, #48]	; (80a3064 <_GLOBAL__sub_I_SPI+0x38>)
 80a3032:	4d0d      	ldr	r5, [pc, #52]	; (80a3068 <_GLOBAL__sub_I_SPI+0x3c>)
 80a3034:	2100      	movs	r1, #0
 80a3036:	4620      	mov	r0, r4
 80a3038:	f7ff f80a 	bl	80a2050 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a303c:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a303e:	4c0b      	ldr	r4, [pc, #44]	; (80a306c <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a3040:	4632      	mov	r2, r6
 80a3042:	4629      	mov	r1, r5
 80a3044:	f000 f814 	bl	80a3070 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a3048:	2101      	movs	r1, #1
 80a304a:	4620      	mov	r0, r4
 80a304c:	f7ff f800 	bl	80a2050 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a3050:	4632      	mov	r2, r6
 80a3052:	4629      	mov	r1, r5
 80a3054:	4620      	mov	r0, r4
 80a3056:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a305a:	f000 b809 	b.w	80a3070 <__aeabi_atexit>
 80a305e:	bf00      	nop
 80a3060:	200008cc 	.word	0x200008cc
 80a3064:	20000370 	.word	0x20000370
 80a3068:	080a2041 	.word	0x080a2041
 80a306c:	200008dc 	.word	0x200008dc

080a3070 <__aeabi_atexit>:
 80a3070:	460b      	mov	r3, r1
 80a3072:	4601      	mov	r1, r0
 80a3074:	4618      	mov	r0, r3
 80a3076:	f001 ba65 	b.w	80a4544 <__cxa_atexit>

080a307a <_ZSt25__throw_bad_function_callv>:
 80a307a:	b508      	push	{r3, lr}
 80a307c:	f7fe fafe 	bl	80a167c <abort>

080a3080 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a3080:	4b24      	ldr	r3, [pc, #144]	; (80a3114 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a3082:	681a      	ldr	r2, [r3, #0]
 80a3084:	07d0      	lsls	r0, r2, #31
 80a3086:	bf5c      	itt	pl
 80a3088:	2201      	movpl	r2, #1
 80a308a:	601a      	strpl	r2, [r3, #0]
 80a308c:	4b22      	ldr	r3, [pc, #136]	; (80a3118 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a308e:	681a      	ldr	r2, [r3, #0]
 80a3090:	07d1      	lsls	r1, r2, #31
 80a3092:	bf5c      	itt	pl
 80a3094:	2201      	movpl	r2, #1
 80a3096:	601a      	strpl	r2, [r3, #0]
 80a3098:	4b20      	ldr	r3, [pc, #128]	; (80a311c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a309a:	681a      	ldr	r2, [r3, #0]
 80a309c:	07d2      	lsls	r2, r2, #31
 80a309e:	bf5c      	itt	pl
 80a30a0:	2201      	movpl	r2, #1
 80a30a2:	601a      	strpl	r2, [r3, #0]
 80a30a4:	4b1e      	ldr	r3, [pc, #120]	; (80a3120 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a30a6:	681a      	ldr	r2, [r3, #0]
 80a30a8:	07d0      	lsls	r0, r2, #31
 80a30aa:	bf5c      	itt	pl
 80a30ac:	2201      	movpl	r2, #1
 80a30ae:	601a      	strpl	r2, [r3, #0]
 80a30b0:	4b1c      	ldr	r3, [pc, #112]	; (80a3124 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a30b2:	681a      	ldr	r2, [r3, #0]
 80a30b4:	07d1      	lsls	r1, r2, #31
 80a30b6:	bf5c      	itt	pl
 80a30b8:	2201      	movpl	r2, #1
 80a30ba:	601a      	strpl	r2, [r3, #0]
 80a30bc:	4b1a      	ldr	r3, [pc, #104]	; (80a3128 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a30be:	681a      	ldr	r2, [r3, #0]
 80a30c0:	07d2      	lsls	r2, r2, #31
 80a30c2:	bf5c      	itt	pl
 80a30c4:	2201      	movpl	r2, #1
 80a30c6:	601a      	strpl	r2, [r3, #0]
 80a30c8:	4b18      	ldr	r3, [pc, #96]	; (80a312c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a30ca:	681a      	ldr	r2, [r3, #0]
 80a30cc:	07d0      	lsls	r0, r2, #31
 80a30ce:	bf5c      	itt	pl
 80a30d0:	2201      	movpl	r2, #1
 80a30d2:	601a      	strpl	r2, [r3, #0]
 80a30d4:	4b16      	ldr	r3, [pc, #88]	; (80a3130 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a30d6:	681a      	ldr	r2, [r3, #0]
 80a30d8:	07d1      	lsls	r1, r2, #31
 80a30da:	bf5c      	itt	pl
 80a30dc:	2201      	movpl	r2, #1
 80a30de:	601a      	strpl	r2, [r3, #0]
 80a30e0:	4b14      	ldr	r3, [pc, #80]	; (80a3134 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a30e2:	681a      	ldr	r2, [r3, #0]
 80a30e4:	07d2      	lsls	r2, r2, #31
 80a30e6:	bf5c      	itt	pl
 80a30e8:	2201      	movpl	r2, #1
 80a30ea:	601a      	strpl	r2, [r3, #0]
 80a30ec:	4b12      	ldr	r3, [pc, #72]	; (80a3138 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a30ee:	681a      	ldr	r2, [r3, #0]
 80a30f0:	07d0      	lsls	r0, r2, #31
 80a30f2:	bf5c      	itt	pl
 80a30f4:	2201      	movpl	r2, #1
 80a30f6:	601a      	strpl	r2, [r3, #0]
 80a30f8:	4b10      	ldr	r3, [pc, #64]	; (80a313c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a30fa:	681a      	ldr	r2, [r3, #0]
 80a30fc:	07d1      	lsls	r1, r2, #31
 80a30fe:	bf5c      	itt	pl
 80a3100:	2201      	movpl	r2, #1
 80a3102:	601a      	strpl	r2, [r3, #0]
 80a3104:	4b0e      	ldr	r3, [pc, #56]	; (80a3140 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a3106:	681a      	ldr	r2, [r3, #0]
 80a3108:	07d2      	lsls	r2, r2, #31
 80a310a:	bf5c      	itt	pl
 80a310c:	2201      	movpl	r2, #1
 80a310e:	601a      	strpl	r2, [r3, #0]
 80a3110:	4770      	bx	lr
 80a3112:	bf00      	nop
 80a3114:	20000918 	.word	0x20000918
 80a3118:	20000914 	.word	0x20000914
 80a311c:	20000910 	.word	0x20000910
 80a3120:	2000090c 	.word	0x2000090c
 80a3124:	20000908 	.word	0x20000908
 80a3128:	20000904 	.word	0x20000904
 80a312c:	20000900 	.word	0x20000900
 80a3130:	200008fc 	.word	0x200008fc
 80a3134:	200008f8 	.word	0x200008f8
 80a3138:	200008f4 	.word	0x200008f4
 80a313c:	200008f0 	.word	0x200008f0
 80a3140:	200008ec 	.word	0x200008ec

080a3144 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a3144:	4b18      	ldr	r3, [pc, #96]	; (80a31a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a3146:	681a      	ldr	r2, [r3, #0]
 80a3148:	07d1      	lsls	r1, r2, #31
 80a314a:	bf5c      	itt	pl
 80a314c:	2201      	movpl	r2, #1
 80a314e:	601a      	strpl	r2, [r3, #0]
 80a3150:	4b16      	ldr	r3, [pc, #88]	; (80a31ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a3152:	681a      	ldr	r2, [r3, #0]
 80a3154:	07d2      	lsls	r2, r2, #31
 80a3156:	bf5c      	itt	pl
 80a3158:	2201      	movpl	r2, #1
 80a315a:	601a      	strpl	r2, [r3, #0]
 80a315c:	4b14      	ldr	r3, [pc, #80]	; (80a31b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a315e:	681a      	ldr	r2, [r3, #0]
 80a3160:	07d0      	lsls	r0, r2, #31
 80a3162:	bf5c      	itt	pl
 80a3164:	2201      	movpl	r2, #1
 80a3166:	601a      	strpl	r2, [r3, #0]
 80a3168:	4b12      	ldr	r3, [pc, #72]	; (80a31b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a316a:	681a      	ldr	r2, [r3, #0]
 80a316c:	07d1      	lsls	r1, r2, #31
 80a316e:	bf5c      	itt	pl
 80a3170:	2201      	movpl	r2, #1
 80a3172:	601a      	strpl	r2, [r3, #0]
 80a3174:	4b10      	ldr	r3, [pc, #64]	; (80a31b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a3176:	681a      	ldr	r2, [r3, #0]
 80a3178:	07d2      	lsls	r2, r2, #31
 80a317a:	bf5c      	itt	pl
 80a317c:	2201      	movpl	r2, #1
 80a317e:	601a      	strpl	r2, [r3, #0]
 80a3180:	4b0e      	ldr	r3, [pc, #56]	; (80a31bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a3182:	681a      	ldr	r2, [r3, #0]
 80a3184:	07d0      	lsls	r0, r2, #31
 80a3186:	bf5c      	itt	pl
 80a3188:	2201      	movpl	r2, #1
 80a318a:	601a      	strpl	r2, [r3, #0]
 80a318c:	4b0c      	ldr	r3, [pc, #48]	; (80a31c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a318e:	681a      	ldr	r2, [r3, #0]
 80a3190:	07d1      	lsls	r1, r2, #31
 80a3192:	bf5c      	itt	pl
 80a3194:	2201      	movpl	r2, #1
 80a3196:	601a      	strpl	r2, [r3, #0]
 80a3198:	4b0a      	ldr	r3, [pc, #40]	; (80a31c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a319a:	681a      	ldr	r2, [r3, #0]
 80a319c:	07d2      	lsls	r2, r2, #31
 80a319e:	bf5c      	itt	pl
 80a31a0:	2201      	movpl	r2, #1
 80a31a2:	601a      	strpl	r2, [r3, #0]
 80a31a4:	4770      	bx	lr
 80a31a6:	bf00      	nop
 80a31a8:	20000938 	.word	0x20000938
 80a31ac:	20000934 	.word	0x20000934
 80a31b0:	20000930 	.word	0x20000930
 80a31b4:	2000092c 	.word	0x2000092c
 80a31b8:	20000928 	.word	0x20000928
 80a31bc:	20000924 	.word	0x20000924
 80a31c0:	20000920 	.word	0x20000920
 80a31c4:	2000091c 	.word	0x2000091c

080a31c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a31c8:	4b18      	ldr	r3, [pc, #96]	; (80a322c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a31ca:	681a      	ldr	r2, [r3, #0]
 80a31cc:	07d1      	lsls	r1, r2, #31
 80a31ce:	bf5c      	itt	pl
 80a31d0:	2201      	movpl	r2, #1
 80a31d2:	601a      	strpl	r2, [r3, #0]
 80a31d4:	4b16      	ldr	r3, [pc, #88]	; (80a3230 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a31d6:	681a      	ldr	r2, [r3, #0]
 80a31d8:	07d2      	lsls	r2, r2, #31
 80a31da:	bf5c      	itt	pl
 80a31dc:	2201      	movpl	r2, #1
 80a31de:	601a      	strpl	r2, [r3, #0]
 80a31e0:	4b14      	ldr	r3, [pc, #80]	; (80a3234 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a31e2:	681a      	ldr	r2, [r3, #0]
 80a31e4:	07d0      	lsls	r0, r2, #31
 80a31e6:	bf5c      	itt	pl
 80a31e8:	2201      	movpl	r2, #1
 80a31ea:	601a      	strpl	r2, [r3, #0]
 80a31ec:	4b12      	ldr	r3, [pc, #72]	; (80a3238 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a31ee:	681a      	ldr	r2, [r3, #0]
 80a31f0:	07d1      	lsls	r1, r2, #31
 80a31f2:	bf5c      	itt	pl
 80a31f4:	2201      	movpl	r2, #1
 80a31f6:	601a      	strpl	r2, [r3, #0]
 80a31f8:	4b10      	ldr	r3, [pc, #64]	; (80a323c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a31fa:	681a      	ldr	r2, [r3, #0]
 80a31fc:	07d2      	lsls	r2, r2, #31
 80a31fe:	bf5c      	itt	pl
 80a3200:	2201      	movpl	r2, #1
 80a3202:	601a      	strpl	r2, [r3, #0]
 80a3204:	4b0e      	ldr	r3, [pc, #56]	; (80a3240 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a3206:	681a      	ldr	r2, [r3, #0]
 80a3208:	07d0      	lsls	r0, r2, #31
 80a320a:	bf5c      	itt	pl
 80a320c:	2201      	movpl	r2, #1
 80a320e:	601a      	strpl	r2, [r3, #0]
 80a3210:	4b0c      	ldr	r3, [pc, #48]	; (80a3244 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a3212:	681a      	ldr	r2, [r3, #0]
 80a3214:	07d1      	lsls	r1, r2, #31
 80a3216:	bf5c      	itt	pl
 80a3218:	2201      	movpl	r2, #1
 80a321a:	601a      	strpl	r2, [r3, #0]
 80a321c:	4b0a      	ldr	r3, [pc, #40]	; (80a3248 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a321e:	681a      	ldr	r2, [r3, #0]
 80a3220:	07d2      	lsls	r2, r2, #31
 80a3222:	bf5c      	itt	pl
 80a3224:	2201      	movpl	r2, #1
 80a3226:	601a      	strpl	r2, [r3, #0]
 80a3228:	4770      	bx	lr
 80a322a:	bf00      	nop
 80a322c:	20000958 	.word	0x20000958
 80a3230:	20000954 	.word	0x20000954
 80a3234:	20000950 	.word	0x20000950
 80a3238:	2000094c 	.word	0x2000094c
 80a323c:	20000948 	.word	0x20000948
 80a3240:	20000944 	.word	0x20000944
 80a3244:	20000940 	.word	0x20000940
 80a3248:	2000093c 	.word	0x2000093c

080a324c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a324c:	4b24      	ldr	r3, [pc, #144]	; (80a32e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a324e:	681a      	ldr	r2, [r3, #0]
 80a3250:	07d0      	lsls	r0, r2, #31
 80a3252:	bf5c      	itt	pl
 80a3254:	2201      	movpl	r2, #1
 80a3256:	601a      	strpl	r2, [r3, #0]
 80a3258:	4b22      	ldr	r3, [pc, #136]	; (80a32e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a325a:	681a      	ldr	r2, [r3, #0]
 80a325c:	07d1      	lsls	r1, r2, #31
 80a325e:	bf5c      	itt	pl
 80a3260:	2201      	movpl	r2, #1
 80a3262:	601a      	strpl	r2, [r3, #0]
 80a3264:	4b20      	ldr	r3, [pc, #128]	; (80a32e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a3266:	681a      	ldr	r2, [r3, #0]
 80a3268:	07d2      	lsls	r2, r2, #31
 80a326a:	bf5c      	itt	pl
 80a326c:	2201      	movpl	r2, #1
 80a326e:	601a      	strpl	r2, [r3, #0]
 80a3270:	4b1e      	ldr	r3, [pc, #120]	; (80a32ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a3272:	681a      	ldr	r2, [r3, #0]
 80a3274:	07d0      	lsls	r0, r2, #31
 80a3276:	bf5c      	itt	pl
 80a3278:	2201      	movpl	r2, #1
 80a327a:	601a      	strpl	r2, [r3, #0]
 80a327c:	4b1c      	ldr	r3, [pc, #112]	; (80a32f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a327e:	681a      	ldr	r2, [r3, #0]
 80a3280:	07d1      	lsls	r1, r2, #31
 80a3282:	bf5c      	itt	pl
 80a3284:	2201      	movpl	r2, #1
 80a3286:	601a      	strpl	r2, [r3, #0]
 80a3288:	4b1a      	ldr	r3, [pc, #104]	; (80a32f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a328a:	681a      	ldr	r2, [r3, #0]
 80a328c:	07d2      	lsls	r2, r2, #31
 80a328e:	bf5c      	itt	pl
 80a3290:	2201      	movpl	r2, #1
 80a3292:	601a      	strpl	r2, [r3, #0]
 80a3294:	4b18      	ldr	r3, [pc, #96]	; (80a32f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a3296:	681a      	ldr	r2, [r3, #0]
 80a3298:	07d0      	lsls	r0, r2, #31
 80a329a:	bf5c      	itt	pl
 80a329c:	2201      	movpl	r2, #1
 80a329e:	601a      	strpl	r2, [r3, #0]
 80a32a0:	4b16      	ldr	r3, [pc, #88]	; (80a32fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a32a2:	681a      	ldr	r2, [r3, #0]
 80a32a4:	07d1      	lsls	r1, r2, #31
 80a32a6:	bf5c      	itt	pl
 80a32a8:	2201      	movpl	r2, #1
 80a32aa:	601a      	strpl	r2, [r3, #0]
 80a32ac:	4b14      	ldr	r3, [pc, #80]	; (80a3300 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a32ae:	681a      	ldr	r2, [r3, #0]
 80a32b0:	07d2      	lsls	r2, r2, #31
 80a32b2:	bf5c      	itt	pl
 80a32b4:	2201      	movpl	r2, #1
 80a32b6:	601a      	strpl	r2, [r3, #0]
 80a32b8:	4b12      	ldr	r3, [pc, #72]	; (80a3304 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a32ba:	681a      	ldr	r2, [r3, #0]
 80a32bc:	07d0      	lsls	r0, r2, #31
 80a32be:	bf5c      	itt	pl
 80a32c0:	2201      	movpl	r2, #1
 80a32c2:	601a      	strpl	r2, [r3, #0]
 80a32c4:	4b10      	ldr	r3, [pc, #64]	; (80a3308 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a32c6:	681a      	ldr	r2, [r3, #0]
 80a32c8:	07d1      	lsls	r1, r2, #31
 80a32ca:	bf5c      	itt	pl
 80a32cc:	2201      	movpl	r2, #1
 80a32ce:	601a      	strpl	r2, [r3, #0]
 80a32d0:	4b0e      	ldr	r3, [pc, #56]	; (80a330c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a32d2:	681a      	ldr	r2, [r3, #0]
 80a32d4:	07d2      	lsls	r2, r2, #31
 80a32d6:	bf5c      	itt	pl
 80a32d8:	2201      	movpl	r2, #1
 80a32da:	601a      	strpl	r2, [r3, #0]
 80a32dc:	4770      	bx	lr
 80a32de:	bf00      	nop
 80a32e0:	20000988 	.word	0x20000988
 80a32e4:	20000984 	.word	0x20000984
 80a32e8:	20000980 	.word	0x20000980
 80a32ec:	2000097c 	.word	0x2000097c
 80a32f0:	20000978 	.word	0x20000978
 80a32f4:	20000974 	.word	0x20000974
 80a32f8:	20000970 	.word	0x20000970
 80a32fc:	2000096c 	.word	0x2000096c
 80a3300:	20000968 	.word	0x20000968
 80a3304:	20000964 	.word	0x20000964
 80a3308:	20000960 	.word	0x20000960
 80a330c:	2000095c 	.word	0x2000095c

080a3310 <__aeabi_drsub>:
 80a3310:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a3314:	e002      	b.n	80a331c <__adddf3>
 80a3316:	bf00      	nop

080a3318 <__aeabi_dsub>:
 80a3318:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a331c <__adddf3>:
 80a331c:	b530      	push	{r4, r5, lr}
 80a331e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a3322:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a3326:	ea94 0f05 	teq	r4, r5
 80a332a:	bf08      	it	eq
 80a332c:	ea90 0f02 	teqeq	r0, r2
 80a3330:	bf1f      	itttt	ne
 80a3332:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a3336:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a333a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a333e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a3342:	f000 80e2 	beq.w	80a350a <__adddf3+0x1ee>
 80a3346:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a334a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a334e:	bfb8      	it	lt
 80a3350:	426d      	neglt	r5, r5
 80a3352:	dd0c      	ble.n	80a336e <__adddf3+0x52>
 80a3354:	442c      	add	r4, r5
 80a3356:	ea80 0202 	eor.w	r2, r0, r2
 80a335a:	ea81 0303 	eor.w	r3, r1, r3
 80a335e:	ea82 0000 	eor.w	r0, r2, r0
 80a3362:	ea83 0101 	eor.w	r1, r3, r1
 80a3366:	ea80 0202 	eor.w	r2, r0, r2
 80a336a:	ea81 0303 	eor.w	r3, r1, r3
 80a336e:	2d36      	cmp	r5, #54	; 0x36
 80a3370:	bf88      	it	hi
 80a3372:	bd30      	pophi	{r4, r5, pc}
 80a3374:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a3378:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a337c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a3380:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a3384:	d002      	beq.n	80a338c <__adddf3+0x70>
 80a3386:	4240      	negs	r0, r0
 80a3388:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a338c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a3390:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a3394:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a3398:	d002      	beq.n	80a33a0 <__adddf3+0x84>
 80a339a:	4252      	negs	r2, r2
 80a339c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a33a0:	ea94 0f05 	teq	r4, r5
 80a33a4:	f000 80a7 	beq.w	80a34f6 <__adddf3+0x1da>
 80a33a8:	f1a4 0401 	sub.w	r4, r4, #1
 80a33ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80a33b0:	db0d      	blt.n	80a33ce <__adddf3+0xb2>
 80a33b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a33b6:	fa22 f205 	lsr.w	r2, r2, r5
 80a33ba:	1880      	adds	r0, r0, r2
 80a33bc:	f141 0100 	adc.w	r1, r1, #0
 80a33c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80a33c4:	1880      	adds	r0, r0, r2
 80a33c6:	fa43 f305 	asr.w	r3, r3, r5
 80a33ca:	4159      	adcs	r1, r3
 80a33cc:	e00e      	b.n	80a33ec <__adddf3+0xd0>
 80a33ce:	f1a5 0520 	sub.w	r5, r5, #32
 80a33d2:	f10e 0e20 	add.w	lr, lr, #32
 80a33d6:	2a01      	cmp	r2, #1
 80a33d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a33dc:	bf28      	it	cs
 80a33de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a33e2:	fa43 f305 	asr.w	r3, r3, r5
 80a33e6:	18c0      	adds	r0, r0, r3
 80a33e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a33ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a33f0:	d507      	bpl.n	80a3402 <__adddf3+0xe6>
 80a33f2:	f04f 0e00 	mov.w	lr, #0
 80a33f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80a33fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a33fe:	eb6e 0101 	sbc.w	r1, lr, r1
 80a3402:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a3406:	d31b      	bcc.n	80a3440 <__adddf3+0x124>
 80a3408:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a340c:	d30c      	bcc.n	80a3428 <__adddf3+0x10c>
 80a340e:	0849      	lsrs	r1, r1, #1
 80a3410:	ea5f 0030 	movs.w	r0, r0, rrx
 80a3414:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a3418:	f104 0401 	add.w	r4, r4, #1
 80a341c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a3420:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a3424:	f080 809a 	bcs.w	80a355c <__adddf3+0x240>
 80a3428:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a342c:	bf08      	it	eq
 80a342e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a3432:	f150 0000 	adcs.w	r0, r0, #0
 80a3436:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a343a:	ea41 0105 	orr.w	r1, r1, r5
 80a343e:	bd30      	pop	{r4, r5, pc}
 80a3440:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a3444:	4140      	adcs	r0, r0
 80a3446:	eb41 0101 	adc.w	r1, r1, r1
 80a344a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a344e:	f1a4 0401 	sub.w	r4, r4, #1
 80a3452:	d1e9      	bne.n	80a3428 <__adddf3+0x10c>
 80a3454:	f091 0f00 	teq	r1, #0
 80a3458:	bf04      	itt	eq
 80a345a:	4601      	moveq	r1, r0
 80a345c:	2000      	moveq	r0, #0
 80a345e:	fab1 f381 	clz	r3, r1
 80a3462:	bf08      	it	eq
 80a3464:	3320      	addeq	r3, #32
 80a3466:	f1a3 030b 	sub.w	r3, r3, #11
 80a346a:	f1b3 0220 	subs.w	r2, r3, #32
 80a346e:	da0c      	bge.n	80a348a <__adddf3+0x16e>
 80a3470:	320c      	adds	r2, #12
 80a3472:	dd08      	ble.n	80a3486 <__adddf3+0x16a>
 80a3474:	f102 0c14 	add.w	ip, r2, #20
 80a3478:	f1c2 020c 	rsb	r2, r2, #12
 80a347c:	fa01 f00c 	lsl.w	r0, r1, ip
 80a3480:	fa21 f102 	lsr.w	r1, r1, r2
 80a3484:	e00c      	b.n	80a34a0 <__adddf3+0x184>
 80a3486:	f102 0214 	add.w	r2, r2, #20
 80a348a:	bfd8      	it	le
 80a348c:	f1c2 0c20 	rsble	ip, r2, #32
 80a3490:	fa01 f102 	lsl.w	r1, r1, r2
 80a3494:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a3498:	bfdc      	itt	le
 80a349a:	ea41 010c 	orrle.w	r1, r1, ip
 80a349e:	4090      	lslle	r0, r2
 80a34a0:	1ae4      	subs	r4, r4, r3
 80a34a2:	bfa2      	ittt	ge
 80a34a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a34a8:	4329      	orrge	r1, r5
 80a34aa:	bd30      	popge	{r4, r5, pc}
 80a34ac:	ea6f 0404 	mvn.w	r4, r4
 80a34b0:	3c1f      	subs	r4, #31
 80a34b2:	da1c      	bge.n	80a34ee <__adddf3+0x1d2>
 80a34b4:	340c      	adds	r4, #12
 80a34b6:	dc0e      	bgt.n	80a34d6 <__adddf3+0x1ba>
 80a34b8:	f104 0414 	add.w	r4, r4, #20
 80a34bc:	f1c4 0220 	rsb	r2, r4, #32
 80a34c0:	fa20 f004 	lsr.w	r0, r0, r4
 80a34c4:	fa01 f302 	lsl.w	r3, r1, r2
 80a34c8:	ea40 0003 	orr.w	r0, r0, r3
 80a34cc:	fa21 f304 	lsr.w	r3, r1, r4
 80a34d0:	ea45 0103 	orr.w	r1, r5, r3
 80a34d4:	bd30      	pop	{r4, r5, pc}
 80a34d6:	f1c4 040c 	rsb	r4, r4, #12
 80a34da:	f1c4 0220 	rsb	r2, r4, #32
 80a34de:	fa20 f002 	lsr.w	r0, r0, r2
 80a34e2:	fa01 f304 	lsl.w	r3, r1, r4
 80a34e6:	ea40 0003 	orr.w	r0, r0, r3
 80a34ea:	4629      	mov	r1, r5
 80a34ec:	bd30      	pop	{r4, r5, pc}
 80a34ee:	fa21 f004 	lsr.w	r0, r1, r4
 80a34f2:	4629      	mov	r1, r5
 80a34f4:	bd30      	pop	{r4, r5, pc}
 80a34f6:	f094 0f00 	teq	r4, #0
 80a34fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a34fe:	bf06      	itte	eq
 80a3500:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a3504:	3401      	addeq	r4, #1
 80a3506:	3d01      	subne	r5, #1
 80a3508:	e74e      	b.n	80a33a8 <__adddf3+0x8c>
 80a350a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a350e:	bf18      	it	ne
 80a3510:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a3514:	d029      	beq.n	80a356a <__adddf3+0x24e>
 80a3516:	ea94 0f05 	teq	r4, r5
 80a351a:	bf08      	it	eq
 80a351c:	ea90 0f02 	teqeq	r0, r2
 80a3520:	d005      	beq.n	80a352e <__adddf3+0x212>
 80a3522:	ea54 0c00 	orrs.w	ip, r4, r0
 80a3526:	bf04      	itt	eq
 80a3528:	4619      	moveq	r1, r3
 80a352a:	4610      	moveq	r0, r2
 80a352c:	bd30      	pop	{r4, r5, pc}
 80a352e:	ea91 0f03 	teq	r1, r3
 80a3532:	bf1e      	ittt	ne
 80a3534:	2100      	movne	r1, #0
 80a3536:	2000      	movne	r0, #0
 80a3538:	bd30      	popne	{r4, r5, pc}
 80a353a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a353e:	d105      	bne.n	80a354c <__adddf3+0x230>
 80a3540:	0040      	lsls	r0, r0, #1
 80a3542:	4149      	adcs	r1, r1
 80a3544:	bf28      	it	cs
 80a3546:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a354a:	bd30      	pop	{r4, r5, pc}
 80a354c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a3550:	bf3c      	itt	cc
 80a3552:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a3556:	bd30      	popcc	{r4, r5, pc}
 80a3558:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a355c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a3560:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a3564:	f04f 0000 	mov.w	r0, #0
 80a3568:	bd30      	pop	{r4, r5, pc}
 80a356a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a356e:	bf1a      	itte	ne
 80a3570:	4619      	movne	r1, r3
 80a3572:	4610      	movne	r0, r2
 80a3574:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a3578:	bf1c      	itt	ne
 80a357a:	460b      	movne	r3, r1
 80a357c:	4602      	movne	r2, r0
 80a357e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a3582:	bf06      	itte	eq
 80a3584:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a3588:	ea91 0f03 	teqeq	r1, r3
 80a358c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a3590:	bd30      	pop	{r4, r5, pc}
 80a3592:	bf00      	nop

080a3594 <__aeabi_ui2d>:
 80a3594:	f090 0f00 	teq	r0, #0
 80a3598:	bf04      	itt	eq
 80a359a:	2100      	moveq	r1, #0
 80a359c:	4770      	bxeq	lr
 80a359e:	b530      	push	{r4, r5, lr}
 80a35a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a35a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a35a8:	f04f 0500 	mov.w	r5, #0
 80a35ac:	f04f 0100 	mov.w	r1, #0
 80a35b0:	e750      	b.n	80a3454 <__adddf3+0x138>
 80a35b2:	bf00      	nop

080a35b4 <__aeabi_i2d>:
 80a35b4:	f090 0f00 	teq	r0, #0
 80a35b8:	bf04      	itt	eq
 80a35ba:	2100      	moveq	r1, #0
 80a35bc:	4770      	bxeq	lr
 80a35be:	b530      	push	{r4, r5, lr}
 80a35c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a35c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a35c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a35cc:	bf48      	it	mi
 80a35ce:	4240      	negmi	r0, r0
 80a35d0:	f04f 0100 	mov.w	r1, #0
 80a35d4:	e73e      	b.n	80a3454 <__adddf3+0x138>
 80a35d6:	bf00      	nop

080a35d8 <__aeabi_f2d>:
 80a35d8:	0042      	lsls	r2, r0, #1
 80a35da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a35de:	ea4f 0131 	mov.w	r1, r1, rrx
 80a35e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a35e6:	bf1f      	itttt	ne
 80a35e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a35ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a35f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a35f4:	4770      	bxne	lr
 80a35f6:	f092 0f00 	teq	r2, #0
 80a35fa:	bf14      	ite	ne
 80a35fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a3600:	4770      	bxeq	lr
 80a3602:	b530      	push	{r4, r5, lr}
 80a3604:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a3608:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a360c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a3610:	e720      	b.n	80a3454 <__adddf3+0x138>
 80a3612:	bf00      	nop

080a3614 <__aeabi_ul2d>:
 80a3614:	ea50 0201 	orrs.w	r2, r0, r1
 80a3618:	bf08      	it	eq
 80a361a:	4770      	bxeq	lr
 80a361c:	b530      	push	{r4, r5, lr}
 80a361e:	f04f 0500 	mov.w	r5, #0
 80a3622:	e00a      	b.n	80a363a <__aeabi_l2d+0x16>

080a3624 <__aeabi_l2d>:
 80a3624:	ea50 0201 	orrs.w	r2, r0, r1
 80a3628:	bf08      	it	eq
 80a362a:	4770      	bxeq	lr
 80a362c:	b530      	push	{r4, r5, lr}
 80a362e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a3632:	d502      	bpl.n	80a363a <__aeabi_l2d+0x16>
 80a3634:	4240      	negs	r0, r0
 80a3636:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a363a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a363e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a3642:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a3646:	f43f aedc 	beq.w	80a3402 <__adddf3+0xe6>
 80a364a:	f04f 0203 	mov.w	r2, #3
 80a364e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a3652:	bf18      	it	ne
 80a3654:	3203      	addne	r2, #3
 80a3656:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a365a:	bf18      	it	ne
 80a365c:	3203      	addne	r2, #3
 80a365e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a3662:	f1c2 0320 	rsb	r3, r2, #32
 80a3666:	fa00 fc03 	lsl.w	ip, r0, r3
 80a366a:	fa20 f002 	lsr.w	r0, r0, r2
 80a366e:	fa01 fe03 	lsl.w	lr, r1, r3
 80a3672:	ea40 000e 	orr.w	r0, r0, lr
 80a3676:	fa21 f102 	lsr.w	r1, r1, r2
 80a367a:	4414      	add	r4, r2
 80a367c:	e6c1      	b.n	80a3402 <__adddf3+0xe6>
 80a367e:	bf00      	nop

080a3680 <__aeabi_dmul>:
 80a3680:	b570      	push	{r4, r5, r6, lr}
 80a3682:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a3686:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a368a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a368e:	bf1d      	ittte	ne
 80a3690:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a3694:	ea94 0f0c 	teqne	r4, ip
 80a3698:	ea95 0f0c 	teqne	r5, ip
 80a369c:	f000 f8de 	bleq	80a385c <__aeabi_dmul+0x1dc>
 80a36a0:	442c      	add	r4, r5
 80a36a2:	ea81 0603 	eor.w	r6, r1, r3
 80a36a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a36aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a36ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a36b2:	bf18      	it	ne
 80a36b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a36b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a36bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a36c0:	d038      	beq.n	80a3734 <__aeabi_dmul+0xb4>
 80a36c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80a36c6:	f04f 0500 	mov.w	r5, #0
 80a36ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a36ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a36d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a36d6:	f04f 0600 	mov.w	r6, #0
 80a36da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a36de:	f09c 0f00 	teq	ip, #0
 80a36e2:	bf18      	it	ne
 80a36e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80a36e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a36ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a36f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a36f4:	d204      	bcs.n	80a3700 <__aeabi_dmul+0x80>
 80a36f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a36fa:	416d      	adcs	r5, r5
 80a36fc:	eb46 0606 	adc.w	r6, r6, r6
 80a3700:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a3704:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a3708:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a370c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a3710:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a3714:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a3718:	bf88      	it	hi
 80a371a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a371e:	d81e      	bhi.n	80a375e <__aeabi_dmul+0xde>
 80a3720:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a3724:	bf08      	it	eq
 80a3726:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a372a:	f150 0000 	adcs.w	r0, r0, #0
 80a372e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a3732:	bd70      	pop	{r4, r5, r6, pc}
 80a3734:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a3738:	ea46 0101 	orr.w	r1, r6, r1
 80a373c:	ea40 0002 	orr.w	r0, r0, r2
 80a3740:	ea81 0103 	eor.w	r1, r1, r3
 80a3744:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a3748:	bfc2      	ittt	gt
 80a374a:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a374e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a3752:	bd70      	popgt	{r4, r5, r6, pc}
 80a3754:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a3758:	f04f 0e00 	mov.w	lr, #0
 80a375c:	3c01      	subs	r4, #1
 80a375e:	f300 80ab 	bgt.w	80a38b8 <__aeabi_dmul+0x238>
 80a3762:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a3766:	bfde      	ittt	le
 80a3768:	2000      	movle	r0, #0
 80a376a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a376e:	bd70      	pople	{r4, r5, r6, pc}
 80a3770:	f1c4 0400 	rsb	r4, r4, #0
 80a3774:	3c20      	subs	r4, #32
 80a3776:	da35      	bge.n	80a37e4 <__aeabi_dmul+0x164>
 80a3778:	340c      	adds	r4, #12
 80a377a:	dc1b      	bgt.n	80a37b4 <__aeabi_dmul+0x134>
 80a377c:	f104 0414 	add.w	r4, r4, #20
 80a3780:	f1c4 0520 	rsb	r5, r4, #32
 80a3784:	fa00 f305 	lsl.w	r3, r0, r5
 80a3788:	fa20 f004 	lsr.w	r0, r0, r4
 80a378c:	fa01 f205 	lsl.w	r2, r1, r5
 80a3790:	ea40 0002 	orr.w	r0, r0, r2
 80a3794:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a3798:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a379c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a37a0:	fa21 f604 	lsr.w	r6, r1, r4
 80a37a4:	eb42 0106 	adc.w	r1, r2, r6
 80a37a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a37ac:	bf08      	it	eq
 80a37ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a37b2:	bd70      	pop	{r4, r5, r6, pc}
 80a37b4:	f1c4 040c 	rsb	r4, r4, #12
 80a37b8:	f1c4 0520 	rsb	r5, r4, #32
 80a37bc:	fa00 f304 	lsl.w	r3, r0, r4
 80a37c0:	fa20 f005 	lsr.w	r0, r0, r5
 80a37c4:	fa01 f204 	lsl.w	r2, r1, r4
 80a37c8:	ea40 0002 	orr.w	r0, r0, r2
 80a37cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a37d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a37d4:	f141 0100 	adc.w	r1, r1, #0
 80a37d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a37dc:	bf08      	it	eq
 80a37de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a37e2:	bd70      	pop	{r4, r5, r6, pc}
 80a37e4:	f1c4 0520 	rsb	r5, r4, #32
 80a37e8:	fa00 f205 	lsl.w	r2, r0, r5
 80a37ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80a37f0:	fa20 f304 	lsr.w	r3, r0, r4
 80a37f4:	fa01 f205 	lsl.w	r2, r1, r5
 80a37f8:	ea43 0302 	orr.w	r3, r3, r2
 80a37fc:	fa21 f004 	lsr.w	r0, r1, r4
 80a3800:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a3804:	fa21 f204 	lsr.w	r2, r1, r4
 80a3808:	ea20 0002 	bic.w	r0, r0, r2
 80a380c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a3810:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a3814:	bf08      	it	eq
 80a3816:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a381a:	bd70      	pop	{r4, r5, r6, pc}
 80a381c:	f094 0f00 	teq	r4, #0
 80a3820:	d10f      	bne.n	80a3842 <__aeabi_dmul+0x1c2>
 80a3822:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a3826:	0040      	lsls	r0, r0, #1
 80a3828:	eb41 0101 	adc.w	r1, r1, r1
 80a382c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a3830:	bf08      	it	eq
 80a3832:	3c01      	subeq	r4, #1
 80a3834:	d0f7      	beq.n	80a3826 <__aeabi_dmul+0x1a6>
 80a3836:	ea41 0106 	orr.w	r1, r1, r6
 80a383a:	f095 0f00 	teq	r5, #0
 80a383e:	bf18      	it	ne
 80a3840:	4770      	bxne	lr
 80a3842:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a3846:	0052      	lsls	r2, r2, #1
 80a3848:	eb43 0303 	adc.w	r3, r3, r3
 80a384c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a3850:	bf08      	it	eq
 80a3852:	3d01      	subeq	r5, #1
 80a3854:	d0f7      	beq.n	80a3846 <__aeabi_dmul+0x1c6>
 80a3856:	ea43 0306 	orr.w	r3, r3, r6
 80a385a:	4770      	bx	lr
 80a385c:	ea94 0f0c 	teq	r4, ip
 80a3860:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a3864:	bf18      	it	ne
 80a3866:	ea95 0f0c 	teqne	r5, ip
 80a386a:	d00c      	beq.n	80a3886 <__aeabi_dmul+0x206>
 80a386c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a3870:	bf18      	it	ne
 80a3872:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a3876:	d1d1      	bne.n	80a381c <__aeabi_dmul+0x19c>
 80a3878:	ea81 0103 	eor.w	r1, r1, r3
 80a387c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a3880:	f04f 0000 	mov.w	r0, #0
 80a3884:	bd70      	pop	{r4, r5, r6, pc}
 80a3886:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a388a:	bf06      	itte	eq
 80a388c:	4610      	moveq	r0, r2
 80a388e:	4619      	moveq	r1, r3
 80a3890:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a3894:	d019      	beq.n	80a38ca <__aeabi_dmul+0x24a>
 80a3896:	ea94 0f0c 	teq	r4, ip
 80a389a:	d102      	bne.n	80a38a2 <__aeabi_dmul+0x222>
 80a389c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a38a0:	d113      	bne.n	80a38ca <__aeabi_dmul+0x24a>
 80a38a2:	ea95 0f0c 	teq	r5, ip
 80a38a6:	d105      	bne.n	80a38b4 <__aeabi_dmul+0x234>
 80a38a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a38ac:	bf1c      	itt	ne
 80a38ae:	4610      	movne	r0, r2
 80a38b0:	4619      	movne	r1, r3
 80a38b2:	d10a      	bne.n	80a38ca <__aeabi_dmul+0x24a>
 80a38b4:	ea81 0103 	eor.w	r1, r1, r3
 80a38b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a38bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a38c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a38c4:	f04f 0000 	mov.w	r0, #0
 80a38c8:	bd70      	pop	{r4, r5, r6, pc}
 80a38ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a38ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a38d2:	bd70      	pop	{r4, r5, r6, pc}

080a38d4 <__aeabi_ddiv>:
 80a38d4:	b570      	push	{r4, r5, r6, lr}
 80a38d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a38da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a38de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a38e2:	bf1d      	ittte	ne
 80a38e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a38e8:	ea94 0f0c 	teqne	r4, ip
 80a38ec:	ea95 0f0c 	teqne	r5, ip
 80a38f0:	f000 f8a7 	bleq	80a3a42 <__aeabi_ddiv+0x16e>
 80a38f4:	eba4 0405 	sub.w	r4, r4, r5
 80a38f8:	ea81 0e03 	eor.w	lr, r1, r3
 80a38fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a3900:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a3904:	f000 8088 	beq.w	80a3a18 <__aeabi_ddiv+0x144>
 80a3908:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a390c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a3910:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a3914:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a3918:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a391c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a3920:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a3924:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a3928:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a392c:	429d      	cmp	r5, r3
 80a392e:	bf08      	it	eq
 80a3930:	4296      	cmpeq	r6, r2
 80a3932:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a3936:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a393a:	d202      	bcs.n	80a3942 <__aeabi_ddiv+0x6e>
 80a393c:	085b      	lsrs	r3, r3, #1
 80a393e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3942:	1ab6      	subs	r6, r6, r2
 80a3944:	eb65 0503 	sbc.w	r5, r5, r3
 80a3948:	085b      	lsrs	r3, r3, #1
 80a394a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a394e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a3952:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a3956:	ebb6 0e02 	subs.w	lr, r6, r2
 80a395a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a395e:	bf22      	ittt	cs
 80a3960:	1ab6      	subcs	r6, r6, r2
 80a3962:	4675      	movcs	r5, lr
 80a3964:	ea40 000c 	orrcs.w	r0, r0, ip
 80a3968:	085b      	lsrs	r3, r3, #1
 80a396a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a396e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a3972:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a3976:	bf22      	ittt	cs
 80a3978:	1ab6      	subcs	r6, r6, r2
 80a397a:	4675      	movcs	r5, lr
 80a397c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a3980:	085b      	lsrs	r3, r3, #1
 80a3982:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3986:	ebb6 0e02 	subs.w	lr, r6, r2
 80a398a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a398e:	bf22      	ittt	cs
 80a3990:	1ab6      	subcs	r6, r6, r2
 80a3992:	4675      	movcs	r5, lr
 80a3994:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a3998:	085b      	lsrs	r3, r3, #1
 80a399a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a399e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a39a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a39a6:	bf22      	ittt	cs
 80a39a8:	1ab6      	subcs	r6, r6, r2
 80a39aa:	4675      	movcs	r5, lr
 80a39ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a39b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80a39b4:	d018      	beq.n	80a39e8 <__aeabi_ddiv+0x114>
 80a39b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a39ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a39be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a39c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a39c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a39ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a39ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a39d2:	d1c0      	bne.n	80a3956 <__aeabi_ddiv+0x82>
 80a39d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a39d8:	d10b      	bne.n	80a39f2 <__aeabi_ddiv+0x11e>
 80a39da:	ea41 0100 	orr.w	r1, r1, r0
 80a39de:	f04f 0000 	mov.w	r0, #0
 80a39e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a39e6:	e7b6      	b.n	80a3956 <__aeabi_ddiv+0x82>
 80a39e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a39ec:	bf04      	itt	eq
 80a39ee:	4301      	orreq	r1, r0
 80a39f0:	2000      	moveq	r0, #0
 80a39f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a39f6:	bf88      	it	hi
 80a39f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a39fc:	f63f aeaf 	bhi.w	80a375e <__aeabi_dmul+0xde>
 80a3a00:	ebb5 0c03 	subs.w	ip, r5, r3
 80a3a04:	bf04      	itt	eq
 80a3a06:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a3a0a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a3a0e:	f150 0000 	adcs.w	r0, r0, #0
 80a3a12:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a3a16:	bd70      	pop	{r4, r5, r6, pc}
 80a3a18:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a3a1c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a3a20:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a3a24:	bfc2      	ittt	gt
 80a3a26:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a3a2a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a3a2e:	bd70      	popgt	{r4, r5, r6, pc}
 80a3a30:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a3a34:	f04f 0e00 	mov.w	lr, #0
 80a3a38:	3c01      	subs	r4, #1
 80a3a3a:	e690      	b.n	80a375e <__aeabi_dmul+0xde>
 80a3a3c:	ea45 0e06 	orr.w	lr, r5, r6
 80a3a40:	e68d      	b.n	80a375e <__aeabi_dmul+0xde>
 80a3a42:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a3a46:	ea94 0f0c 	teq	r4, ip
 80a3a4a:	bf08      	it	eq
 80a3a4c:	ea95 0f0c 	teqeq	r5, ip
 80a3a50:	f43f af3b 	beq.w	80a38ca <__aeabi_dmul+0x24a>
 80a3a54:	ea94 0f0c 	teq	r4, ip
 80a3a58:	d10a      	bne.n	80a3a70 <__aeabi_ddiv+0x19c>
 80a3a5a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a3a5e:	f47f af34 	bne.w	80a38ca <__aeabi_dmul+0x24a>
 80a3a62:	ea95 0f0c 	teq	r5, ip
 80a3a66:	f47f af25 	bne.w	80a38b4 <__aeabi_dmul+0x234>
 80a3a6a:	4610      	mov	r0, r2
 80a3a6c:	4619      	mov	r1, r3
 80a3a6e:	e72c      	b.n	80a38ca <__aeabi_dmul+0x24a>
 80a3a70:	ea95 0f0c 	teq	r5, ip
 80a3a74:	d106      	bne.n	80a3a84 <__aeabi_ddiv+0x1b0>
 80a3a76:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a3a7a:	f43f aefd 	beq.w	80a3878 <__aeabi_dmul+0x1f8>
 80a3a7e:	4610      	mov	r0, r2
 80a3a80:	4619      	mov	r1, r3
 80a3a82:	e722      	b.n	80a38ca <__aeabi_dmul+0x24a>
 80a3a84:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a3a88:	bf18      	it	ne
 80a3a8a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a3a8e:	f47f aec5 	bne.w	80a381c <__aeabi_dmul+0x19c>
 80a3a92:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a3a96:	f47f af0d 	bne.w	80a38b4 <__aeabi_dmul+0x234>
 80a3a9a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a3a9e:	f47f aeeb 	bne.w	80a3878 <__aeabi_dmul+0x1f8>
 80a3aa2:	e712      	b.n	80a38ca <__aeabi_dmul+0x24a>

080a3aa4 <__gedf2>:
 80a3aa4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a3aa8:	e006      	b.n	80a3ab8 <__cmpdf2+0x4>
 80a3aaa:	bf00      	nop

080a3aac <__ledf2>:
 80a3aac:	f04f 0c01 	mov.w	ip, #1
 80a3ab0:	e002      	b.n	80a3ab8 <__cmpdf2+0x4>
 80a3ab2:	bf00      	nop

080a3ab4 <__cmpdf2>:
 80a3ab4:	f04f 0c01 	mov.w	ip, #1
 80a3ab8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a3abc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a3ac0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a3ac8:	bf18      	it	ne
 80a3aca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a3ace:	d01b      	beq.n	80a3b08 <__cmpdf2+0x54>
 80a3ad0:	b001      	add	sp, #4
 80a3ad2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a3ad6:	bf0c      	ite	eq
 80a3ad8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a3adc:	ea91 0f03 	teqne	r1, r3
 80a3ae0:	bf02      	ittt	eq
 80a3ae2:	ea90 0f02 	teqeq	r0, r2
 80a3ae6:	2000      	moveq	r0, #0
 80a3ae8:	4770      	bxeq	lr
 80a3aea:	f110 0f00 	cmn.w	r0, #0
 80a3aee:	ea91 0f03 	teq	r1, r3
 80a3af2:	bf58      	it	pl
 80a3af4:	4299      	cmppl	r1, r3
 80a3af6:	bf08      	it	eq
 80a3af8:	4290      	cmpeq	r0, r2
 80a3afa:	bf2c      	ite	cs
 80a3afc:	17d8      	asrcs	r0, r3, #31
 80a3afe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a3b02:	f040 0001 	orr.w	r0, r0, #1
 80a3b06:	4770      	bx	lr
 80a3b08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a3b0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3b10:	d102      	bne.n	80a3b18 <__cmpdf2+0x64>
 80a3b12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a3b16:	d107      	bne.n	80a3b28 <__cmpdf2+0x74>
 80a3b18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a3b1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3b20:	d1d6      	bne.n	80a3ad0 <__cmpdf2+0x1c>
 80a3b22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a3b26:	d0d3      	beq.n	80a3ad0 <__cmpdf2+0x1c>
 80a3b28:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a3b2c:	4770      	bx	lr
 80a3b2e:	bf00      	nop

080a3b30 <__aeabi_cdrcmple>:
 80a3b30:	4684      	mov	ip, r0
 80a3b32:	4610      	mov	r0, r2
 80a3b34:	4662      	mov	r2, ip
 80a3b36:	468c      	mov	ip, r1
 80a3b38:	4619      	mov	r1, r3
 80a3b3a:	4663      	mov	r3, ip
 80a3b3c:	e000      	b.n	80a3b40 <__aeabi_cdcmpeq>
 80a3b3e:	bf00      	nop

080a3b40 <__aeabi_cdcmpeq>:
 80a3b40:	b501      	push	{r0, lr}
 80a3b42:	f7ff ffb7 	bl	80a3ab4 <__cmpdf2>
 80a3b46:	2800      	cmp	r0, #0
 80a3b48:	bf48      	it	mi
 80a3b4a:	f110 0f00 	cmnmi.w	r0, #0
 80a3b4e:	bd01      	pop	{r0, pc}

080a3b50 <__aeabi_dcmpeq>:
 80a3b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3b54:	f7ff fff4 	bl	80a3b40 <__aeabi_cdcmpeq>
 80a3b58:	bf0c      	ite	eq
 80a3b5a:	2001      	moveq	r0, #1
 80a3b5c:	2000      	movne	r0, #0
 80a3b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3b62:	bf00      	nop

080a3b64 <__aeabi_dcmplt>:
 80a3b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3b68:	f7ff ffea 	bl	80a3b40 <__aeabi_cdcmpeq>
 80a3b6c:	bf34      	ite	cc
 80a3b6e:	2001      	movcc	r0, #1
 80a3b70:	2000      	movcs	r0, #0
 80a3b72:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3b76:	bf00      	nop

080a3b78 <__aeabi_dcmple>:
 80a3b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3b7c:	f7ff ffe0 	bl	80a3b40 <__aeabi_cdcmpeq>
 80a3b80:	bf94      	ite	ls
 80a3b82:	2001      	movls	r0, #1
 80a3b84:	2000      	movhi	r0, #0
 80a3b86:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3b8a:	bf00      	nop

080a3b8c <__aeabi_dcmpge>:
 80a3b8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3b90:	f7ff ffce 	bl	80a3b30 <__aeabi_cdrcmple>
 80a3b94:	bf94      	ite	ls
 80a3b96:	2001      	movls	r0, #1
 80a3b98:	2000      	movhi	r0, #0
 80a3b9a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3b9e:	bf00      	nop

080a3ba0 <__aeabi_dcmpgt>:
 80a3ba0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3ba4:	f7ff ffc4 	bl	80a3b30 <__aeabi_cdrcmple>
 80a3ba8:	bf34      	ite	cc
 80a3baa:	2001      	movcc	r0, #1
 80a3bac:	2000      	movcs	r0, #0
 80a3bae:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3bb2:	bf00      	nop

080a3bb4 <__aeabi_dcmpun>:
 80a3bb4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a3bb8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3bbc:	d102      	bne.n	80a3bc4 <__aeabi_dcmpun+0x10>
 80a3bbe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a3bc2:	d10a      	bne.n	80a3bda <__aeabi_dcmpun+0x26>
 80a3bc4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a3bc8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3bcc:	d102      	bne.n	80a3bd4 <__aeabi_dcmpun+0x20>
 80a3bce:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a3bd2:	d102      	bne.n	80a3bda <__aeabi_dcmpun+0x26>
 80a3bd4:	f04f 0000 	mov.w	r0, #0
 80a3bd8:	4770      	bx	lr
 80a3bda:	f04f 0001 	mov.w	r0, #1
 80a3bde:	4770      	bx	lr

080a3be0 <__aeabi_d2iz>:
 80a3be0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a3be4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a3be8:	d215      	bcs.n	80a3c16 <__aeabi_d2iz+0x36>
 80a3bea:	d511      	bpl.n	80a3c10 <__aeabi_d2iz+0x30>
 80a3bec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a3bf0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a3bf4:	d912      	bls.n	80a3c1c <__aeabi_d2iz+0x3c>
 80a3bf6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a3bfa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a3bfe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a3c02:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a3c06:	fa23 f002 	lsr.w	r0, r3, r2
 80a3c0a:	bf18      	it	ne
 80a3c0c:	4240      	negne	r0, r0
 80a3c0e:	4770      	bx	lr
 80a3c10:	f04f 0000 	mov.w	r0, #0
 80a3c14:	4770      	bx	lr
 80a3c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a3c1a:	d105      	bne.n	80a3c28 <__aeabi_d2iz+0x48>
 80a3c1c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a3c20:	bf08      	it	eq
 80a3c22:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a3c26:	4770      	bx	lr
 80a3c28:	f04f 0000 	mov.w	r0, #0
 80a3c2c:	4770      	bx	lr
 80a3c2e:	bf00      	nop

080a3c30 <__aeabi_d2uiz>:
 80a3c30:	004a      	lsls	r2, r1, #1
 80a3c32:	d211      	bcs.n	80a3c58 <__aeabi_d2uiz+0x28>
 80a3c34:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a3c38:	d211      	bcs.n	80a3c5e <__aeabi_d2uiz+0x2e>
 80a3c3a:	d50d      	bpl.n	80a3c58 <__aeabi_d2uiz+0x28>
 80a3c3c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a3c40:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a3c44:	d40e      	bmi.n	80a3c64 <__aeabi_d2uiz+0x34>
 80a3c46:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a3c4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a3c4e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a3c52:	fa23 f002 	lsr.w	r0, r3, r2
 80a3c56:	4770      	bx	lr
 80a3c58:	f04f 0000 	mov.w	r0, #0
 80a3c5c:	4770      	bx	lr
 80a3c5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a3c62:	d102      	bne.n	80a3c6a <__aeabi_d2uiz+0x3a>
 80a3c64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a3c68:	4770      	bx	lr
 80a3c6a:	f04f 0000 	mov.w	r0, #0
 80a3c6e:	4770      	bx	lr

080a3c70 <__aeabi_d2f>:
 80a3c70:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a3c74:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a3c78:	bf24      	itt	cs
 80a3c7a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a3c7e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a3c82:	d90d      	bls.n	80a3ca0 <__aeabi_d2f+0x30>
 80a3c84:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a3c88:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a3c8c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a3c90:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a3c94:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a3c98:	bf08      	it	eq
 80a3c9a:	f020 0001 	biceq.w	r0, r0, #1
 80a3c9e:	4770      	bx	lr
 80a3ca0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a3ca4:	d121      	bne.n	80a3cea <__aeabi_d2f+0x7a>
 80a3ca6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a3caa:	bfbc      	itt	lt
 80a3cac:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a3cb0:	4770      	bxlt	lr
 80a3cb2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a3cb6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a3cba:	f1c2 0218 	rsb	r2, r2, #24
 80a3cbe:	f1c2 0c20 	rsb	ip, r2, #32
 80a3cc2:	fa10 f30c 	lsls.w	r3, r0, ip
 80a3cc6:	fa20 f002 	lsr.w	r0, r0, r2
 80a3cca:	bf18      	it	ne
 80a3ccc:	f040 0001 	orrne.w	r0, r0, #1
 80a3cd0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a3cd4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a3cd8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a3cdc:	ea40 000c 	orr.w	r0, r0, ip
 80a3ce0:	fa23 f302 	lsr.w	r3, r3, r2
 80a3ce4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a3ce8:	e7cc      	b.n	80a3c84 <__aeabi_d2f+0x14>
 80a3cea:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a3cee:	d107      	bne.n	80a3d00 <__aeabi_d2f+0x90>
 80a3cf0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a3cf4:	bf1e      	ittt	ne
 80a3cf6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a3cfa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a3cfe:	4770      	bxne	lr
 80a3d00:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a3d04:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a3d08:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3d0c:	4770      	bx	lr
 80a3d0e:	bf00      	nop

080a3d10 <__aeabi_frsub>:
 80a3d10:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a3d14:	e002      	b.n	80a3d1c <__addsf3>
 80a3d16:	bf00      	nop

080a3d18 <__aeabi_fsub>:
 80a3d18:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a3d1c <__addsf3>:
 80a3d1c:	0042      	lsls	r2, r0, #1
 80a3d1e:	bf1f      	itttt	ne
 80a3d20:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a3d24:	ea92 0f03 	teqne	r2, r3
 80a3d28:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a3d2c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a3d30:	d06a      	beq.n	80a3e08 <__addsf3+0xec>
 80a3d32:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a3d36:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a3d3a:	bfc1      	itttt	gt
 80a3d3c:	18d2      	addgt	r2, r2, r3
 80a3d3e:	4041      	eorgt	r1, r0
 80a3d40:	4048      	eorgt	r0, r1
 80a3d42:	4041      	eorgt	r1, r0
 80a3d44:	bfb8      	it	lt
 80a3d46:	425b      	neglt	r3, r3
 80a3d48:	2b19      	cmp	r3, #25
 80a3d4a:	bf88      	it	hi
 80a3d4c:	4770      	bxhi	lr
 80a3d4e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a3d52:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3d56:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a3d5a:	bf18      	it	ne
 80a3d5c:	4240      	negne	r0, r0
 80a3d5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a3d62:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a3d66:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a3d6a:	bf18      	it	ne
 80a3d6c:	4249      	negne	r1, r1
 80a3d6e:	ea92 0f03 	teq	r2, r3
 80a3d72:	d03f      	beq.n	80a3df4 <__addsf3+0xd8>
 80a3d74:	f1a2 0201 	sub.w	r2, r2, #1
 80a3d78:	fa41 fc03 	asr.w	ip, r1, r3
 80a3d7c:	eb10 000c 	adds.w	r0, r0, ip
 80a3d80:	f1c3 0320 	rsb	r3, r3, #32
 80a3d84:	fa01 f103 	lsl.w	r1, r1, r3
 80a3d88:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a3d8c:	d502      	bpl.n	80a3d94 <__addsf3+0x78>
 80a3d8e:	4249      	negs	r1, r1
 80a3d90:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a3d94:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a3d98:	d313      	bcc.n	80a3dc2 <__addsf3+0xa6>
 80a3d9a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a3d9e:	d306      	bcc.n	80a3dae <__addsf3+0x92>
 80a3da0:	0840      	lsrs	r0, r0, #1
 80a3da2:	ea4f 0131 	mov.w	r1, r1, rrx
 80a3da6:	f102 0201 	add.w	r2, r2, #1
 80a3daa:	2afe      	cmp	r2, #254	; 0xfe
 80a3dac:	d251      	bcs.n	80a3e52 <__addsf3+0x136>
 80a3dae:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a3db2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a3db6:	bf08      	it	eq
 80a3db8:	f020 0001 	biceq.w	r0, r0, #1
 80a3dbc:	ea40 0003 	orr.w	r0, r0, r3
 80a3dc0:	4770      	bx	lr
 80a3dc2:	0049      	lsls	r1, r1, #1
 80a3dc4:	eb40 0000 	adc.w	r0, r0, r0
 80a3dc8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a3dcc:	f1a2 0201 	sub.w	r2, r2, #1
 80a3dd0:	d1ed      	bne.n	80a3dae <__addsf3+0x92>
 80a3dd2:	fab0 fc80 	clz	ip, r0
 80a3dd6:	f1ac 0c08 	sub.w	ip, ip, #8
 80a3dda:	ebb2 020c 	subs.w	r2, r2, ip
 80a3dde:	fa00 f00c 	lsl.w	r0, r0, ip
 80a3de2:	bfaa      	itet	ge
 80a3de4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a3de8:	4252      	neglt	r2, r2
 80a3dea:	4318      	orrge	r0, r3
 80a3dec:	bfbc      	itt	lt
 80a3dee:	40d0      	lsrlt	r0, r2
 80a3df0:	4318      	orrlt	r0, r3
 80a3df2:	4770      	bx	lr
 80a3df4:	f092 0f00 	teq	r2, #0
 80a3df8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a3dfc:	bf06      	itte	eq
 80a3dfe:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a3e02:	3201      	addeq	r2, #1
 80a3e04:	3b01      	subne	r3, #1
 80a3e06:	e7b5      	b.n	80a3d74 <__addsf3+0x58>
 80a3e08:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a3e0c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a3e10:	bf18      	it	ne
 80a3e12:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a3e16:	d021      	beq.n	80a3e5c <__addsf3+0x140>
 80a3e18:	ea92 0f03 	teq	r2, r3
 80a3e1c:	d004      	beq.n	80a3e28 <__addsf3+0x10c>
 80a3e1e:	f092 0f00 	teq	r2, #0
 80a3e22:	bf08      	it	eq
 80a3e24:	4608      	moveq	r0, r1
 80a3e26:	4770      	bx	lr
 80a3e28:	ea90 0f01 	teq	r0, r1
 80a3e2c:	bf1c      	itt	ne
 80a3e2e:	2000      	movne	r0, #0
 80a3e30:	4770      	bxne	lr
 80a3e32:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a3e36:	d104      	bne.n	80a3e42 <__addsf3+0x126>
 80a3e38:	0040      	lsls	r0, r0, #1
 80a3e3a:	bf28      	it	cs
 80a3e3c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a3e40:	4770      	bx	lr
 80a3e42:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a3e46:	bf3c      	itt	cc
 80a3e48:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a3e4c:	4770      	bxcc	lr
 80a3e4e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a3e52:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a3e56:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3e5a:	4770      	bx	lr
 80a3e5c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a3e60:	bf16      	itet	ne
 80a3e62:	4608      	movne	r0, r1
 80a3e64:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a3e68:	4601      	movne	r1, r0
 80a3e6a:	0242      	lsls	r2, r0, #9
 80a3e6c:	bf06      	itte	eq
 80a3e6e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a3e72:	ea90 0f01 	teqeq	r0, r1
 80a3e76:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a3e7a:	4770      	bx	lr

080a3e7c <__aeabi_ui2f>:
 80a3e7c:	f04f 0300 	mov.w	r3, #0
 80a3e80:	e004      	b.n	80a3e8c <__aeabi_i2f+0x8>
 80a3e82:	bf00      	nop

080a3e84 <__aeabi_i2f>:
 80a3e84:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a3e88:	bf48      	it	mi
 80a3e8a:	4240      	negmi	r0, r0
 80a3e8c:	ea5f 0c00 	movs.w	ip, r0
 80a3e90:	bf08      	it	eq
 80a3e92:	4770      	bxeq	lr
 80a3e94:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a3e98:	4601      	mov	r1, r0
 80a3e9a:	f04f 0000 	mov.w	r0, #0
 80a3e9e:	e01c      	b.n	80a3eda <__aeabi_l2f+0x2a>

080a3ea0 <__aeabi_ul2f>:
 80a3ea0:	ea50 0201 	orrs.w	r2, r0, r1
 80a3ea4:	bf08      	it	eq
 80a3ea6:	4770      	bxeq	lr
 80a3ea8:	f04f 0300 	mov.w	r3, #0
 80a3eac:	e00a      	b.n	80a3ec4 <__aeabi_l2f+0x14>
 80a3eae:	bf00      	nop

080a3eb0 <__aeabi_l2f>:
 80a3eb0:	ea50 0201 	orrs.w	r2, r0, r1
 80a3eb4:	bf08      	it	eq
 80a3eb6:	4770      	bxeq	lr
 80a3eb8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a3ebc:	d502      	bpl.n	80a3ec4 <__aeabi_l2f+0x14>
 80a3ebe:	4240      	negs	r0, r0
 80a3ec0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a3ec4:	ea5f 0c01 	movs.w	ip, r1
 80a3ec8:	bf02      	ittt	eq
 80a3eca:	4684      	moveq	ip, r0
 80a3ecc:	4601      	moveq	r1, r0
 80a3ece:	2000      	moveq	r0, #0
 80a3ed0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a3ed4:	bf08      	it	eq
 80a3ed6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a3eda:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a3ede:	fabc f28c 	clz	r2, ip
 80a3ee2:	3a08      	subs	r2, #8
 80a3ee4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a3ee8:	db10      	blt.n	80a3f0c <__aeabi_l2f+0x5c>
 80a3eea:	fa01 fc02 	lsl.w	ip, r1, r2
 80a3eee:	4463      	add	r3, ip
 80a3ef0:	fa00 fc02 	lsl.w	ip, r0, r2
 80a3ef4:	f1c2 0220 	rsb	r2, r2, #32
 80a3ef8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a3efc:	fa20 f202 	lsr.w	r2, r0, r2
 80a3f00:	eb43 0002 	adc.w	r0, r3, r2
 80a3f04:	bf08      	it	eq
 80a3f06:	f020 0001 	biceq.w	r0, r0, #1
 80a3f0a:	4770      	bx	lr
 80a3f0c:	f102 0220 	add.w	r2, r2, #32
 80a3f10:	fa01 fc02 	lsl.w	ip, r1, r2
 80a3f14:	f1c2 0220 	rsb	r2, r2, #32
 80a3f18:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a3f1c:	fa21 f202 	lsr.w	r2, r1, r2
 80a3f20:	eb43 0002 	adc.w	r0, r3, r2
 80a3f24:	bf08      	it	eq
 80a3f26:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a3f2a:	4770      	bx	lr

080a3f2c <__aeabi_fmul>:
 80a3f2c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a3f30:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a3f34:	bf1e      	ittt	ne
 80a3f36:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a3f3a:	ea92 0f0c 	teqne	r2, ip
 80a3f3e:	ea93 0f0c 	teqne	r3, ip
 80a3f42:	d06f      	beq.n	80a4024 <__aeabi_fmul+0xf8>
 80a3f44:	441a      	add	r2, r3
 80a3f46:	ea80 0c01 	eor.w	ip, r0, r1
 80a3f4a:	0240      	lsls	r0, r0, #9
 80a3f4c:	bf18      	it	ne
 80a3f4e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a3f52:	d01e      	beq.n	80a3f92 <__aeabi_fmul+0x66>
 80a3f54:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a3f58:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a3f5c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a3f60:	fba0 3101 	umull	r3, r1, r0, r1
 80a3f64:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a3f68:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a3f6c:	bf3e      	ittt	cc
 80a3f6e:	0049      	lslcc	r1, r1, #1
 80a3f70:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a3f74:	005b      	lslcc	r3, r3, #1
 80a3f76:	ea40 0001 	orr.w	r0, r0, r1
 80a3f7a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a3f7e:	2afd      	cmp	r2, #253	; 0xfd
 80a3f80:	d81d      	bhi.n	80a3fbe <__aeabi_fmul+0x92>
 80a3f82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a3f86:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a3f8a:	bf08      	it	eq
 80a3f8c:	f020 0001 	biceq.w	r0, r0, #1
 80a3f90:	4770      	bx	lr
 80a3f92:	f090 0f00 	teq	r0, #0
 80a3f96:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a3f9a:	bf08      	it	eq
 80a3f9c:	0249      	lsleq	r1, r1, #9
 80a3f9e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a3fa2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a3fa6:	3a7f      	subs	r2, #127	; 0x7f
 80a3fa8:	bfc2      	ittt	gt
 80a3faa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a3fae:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a3fb2:	4770      	bxgt	lr
 80a3fb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3fb8:	f04f 0300 	mov.w	r3, #0
 80a3fbc:	3a01      	subs	r2, #1
 80a3fbe:	dc5d      	bgt.n	80a407c <__aeabi_fmul+0x150>
 80a3fc0:	f112 0f19 	cmn.w	r2, #25
 80a3fc4:	bfdc      	itt	le
 80a3fc6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a3fca:	4770      	bxle	lr
 80a3fcc:	f1c2 0200 	rsb	r2, r2, #0
 80a3fd0:	0041      	lsls	r1, r0, #1
 80a3fd2:	fa21 f102 	lsr.w	r1, r1, r2
 80a3fd6:	f1c2 0220 	rsb	r2, r2, #32
 80a3fda:	fa00 fc02 	lsl.w	ip, r0, r2
 80a3fde:	ea5f 0031 	movs.w	r0, r1, rrx
 80a3fe2:	f140 0000 	adc.w	r0, r0, #0
 80a3fe6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a3fea:	bf08      	it	eq
 80a3fec:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a3ff0:	4770      	bx	lr
 80a3ff2:	f092 0f00 	teq	r2, #0
 80a3ff6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a3ffa:	bf02      	ittt	eq
 80a3ffc:	0040      	lsleq	r0, r0, #1
 80a3ffe:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a4002:	3a01      	subeq	r2, #1
 80a4004:	d0f9      	beq.n	80a3ffa <__aeabi_fmul+0xce>
 80a4006:	ea40 000c 	orr.w	r0, r0, ip
 80a400a:	f093 0f00 	teq	r3, #0
 80a400e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a4012:	bf02      	ittt	eq
 80a4014:	0049      	lsleq	r1, r1, #1
 80a4016:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a401a:	3b01      	subeq	r3, #1
 80a401c:	d0f9      	beq.n	80a4012 <__aeabi_fmul+0xe6>
 80a401e:	ea41 010c 	orr.w	r1, r1, ip
 80a4022:	e78f      	b.n	80a3f44 <__aeabi_fmul+0x18>
 80a4024:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a4028:	ea92 0f0c 	teq	r2, ip
 80a402c:	bf18      	it	ne
 80a402e:	ea93 0f0c 	teqne	r3, ip
 80a4032:	d00a      	beq.n	80a404a <__aeabi_fmul+0x11e>
 80a4034:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a4038:	bf18      	it	ne
 80a403a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a403e:	d1d8      	bne.n	80a3ff2 <__aeabi_fmul+0xc6>
 80a4040:	ea80 0001 	eor.w	r0, r0, r1
 80a4044:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a4048:	4770      	bx	lr
 80a404a:	f090 0f00 	teq	r0, #0
 80a404e:	bf17      	itett	ne
 80a4050:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a4054:	4608      	moveq	r0, r1
 80a4056:	f091 0f00 	teqne	r1, #0
 80a405a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a405e:	d014      	beq.n	80a408a <__aeabi_fmul+0x15e>
 80a4060:	ea92 0f0c 	teq	r2, ip
 80a4064:	d101      	bne.n	80a406a <__aeabi_fmul+0x13e>
 80a4066:	0242      	lsls	r2, r0, #9
 80a4068:	d10f      	bne.n	80a408a <__aeabi_fmul+0x15e>
 80a406a:	ea93 0f0c 	teq	r3, ip
 80a406e:	d103      	bne.n	80a4078 <__aeabi_fmul+0x14c>
 80a4070:	024b      	lsls	r3, r1, #9
 80a4072:	bf18      	it	ne
 80a4074:	4608      	movne	r0, r1
 80a4076:	d108      	bne.n	80a408a <__aeabi_fmul+0x15e>
 80a4078:	ea80 0001 	eor.w	r0, r0, r1
 80a407c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a4080:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a4084:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4088:	4770      	bx	lr
 80a408a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a408e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a4092:	4770      	bx	lr

080a4094 <__aeabi_fdiv>:
 80a4094:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a4098:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a409c:	bf1e      	ittt	ne
 80a409e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a40a2:	ea92 0f0c 	teqne	r2, ip
 80a40a6:	ea93 0f0c 	teqne	r3, ip
 80a40aa:	d069      	beq.n	80a4180 <__aeabi_fdiv+0xec>
 80a40ac:	eba2 0203 	sub.w	r2, r2, r3
 80a40b0:	ea80 0c01 	eor.w	ip, r0, r1
 80a40b4:	0249      	lsls	r1, r1, #9
 80a40b6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a40ba:	d037      	beq.n	80a412c <__aeabi_fdiv+0x98>
 80a40bc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a40c0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a40c4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a40c8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a40cc:	428b      	cmp	r3, r1
 80a40ce:	bf38      	it	cc
 80a40d0:	005b      	lslcc	r3, r3, #1
 80a40d2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a40d6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a40da:	428b      	cmp	r3, r1
 80a40dc:	bf24      	itt	cs
 80a40de:	1a5b      	subcs	r3, r3, r1
 80a40e0:	ea40 000c 	orrcs.w	r0, r0, ip
 80a40e4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a40e8:	bf24      	itt	cs
 80a40ea:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a40ee:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a40f2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a40f6:	bf24      	itt	cs
 80a40f8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a40fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a4100:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a4104:	bf24      	itt	cs
 80a4106:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a410a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a410e:	011b      	lsls	r3, r3, #4
 80a4110:	bf18      	it	ne
 80a4112:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a4116:	d1e0      	bne.n	80a40da <__aeabi_fdiv+0x46>
 80a4118:	2afd      	cmp	r2, #253	; 0xfd
 80a411a:	f63f af50 	bhi.w	80a3fbe <__aeabi_fmul+0x92>
 80a411e:	428b      	cmp	r3, r1
 80a4120:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a4124:	bf08      	it	eq
 80a4126:	f020 0001 	biceq.w	r0, r0, #1
 80a412a:	4770      	bx	lr
 80a412c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a4130:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a4134:	327f      	adds	r2, #127	; 0x7f
 80a4136:	bfc2      	ittt	gt
 80a4138:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a413c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a4140:	4770      	bxgt	lr
 80a4142:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4146:	f04f 0300 	mov.w	r3, #0
 80a414a:	3a01      	subs	r2, #1
 80a414c:	e737      	b.n	80a3fbe <__aeabi_fmul+0x92>
 80a414e:	f092 0f00 	teq	r2, #0
 80a4152:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a4156:	bf02      	ittt	eq
 80a4158:	0040      	lsleq	r0, r0, #1
 80a415a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a415e:	3a01      	subeq	r2, #1
 80a4160:	d0f9      	beq.n	80a4156 <__aeabi_fdiv+0xc2>
 80a4162:	ea40 000c 	orr.w	r0, r0, ip
 80a4166:	f093 0f00 	teq	r3, #0
 80a416a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a416e:	bf02      	ittt	eq
 80a4170:	0049      	lsleq	r1, r1, #1
 80a4172:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a4176:	3b01      	subeq	r3, #1
 80a4178:	d0f9      	beq.n	80a416e <__aeabi_fdiv+0xda>
 80a417a:	ea41 010c 	orr.w	r1, r1, ip
 80a417e:	e795      	b.n	80a40ac <__aeabi_fdiv+0x18>
 80a4180:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a4184:	ea92 0f0c 	teq	r2, ip
 80a4188:	d108      	bne.n	80a419c <__aeabi_fdiv+0x108>
 80a418a:	0242      	lsls	r2, r0, #9
 80a418c:	f47f af7d 	bne.w	80a408a <__aeabi_fmul+0x15e>
 80a4190:	ea93 0f0c 	teq	r3, ip
 80a4194:	f47f af70 	bne.w	80a4078 <__aeabi_fmul+0x14c>
 80a4198:	4608      	mov	r0, r1
 80a419a:	e776      	b.n	80a408a <__aeabi_fmul+0x15e>
 80a419c:	ea93 0f0c 	teq	r3, ip
 80a41a0:	d104      	bne.n	80a41ac <__aeabi_fdiv+0x118>
 80a41a2:	024b      	lsls	r3, r1, #9
 80a41a4:	f43f af4c 	beq.w	80a4040 <__aeabi_fmul+0x114>
 80a41a8:	4608      	mov	r0, r1
 80a41aa:	e76e      	b.n	80a408a <__aeabi_fmul+0x15e>
 80a41ac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a41b0:	bf18      	it	ne
 80a41b2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a41b6:	d1ca      	bne.n	80a414e <__aeabi_fdiv+0xba>
 80a41b8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a41bc:	f47f af5c 	bne.w	80a4078 <__aeabi_fmul+0x14c>
 80a41c0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a41c4:	f47f af3c 	bne.w	80a4040 <__aeabi_fmul+0x114>
 80a41c8:	e75f      	b.n	80a408a <__aeabi_fmul+0x15e>
 80a41ca:	bf00      	nop

080a41cc <__aeabi_uldivmod>:
 80a41cc:	b953      	cbnz	r3, 80a41e4 <__aeabi_uldivmod+0x18>
 80a41ce:	b94a      	cbnz	r2, 80a41e4 <__aeabi_uldivmod+0x18>
 80a41d0:	2900      	cmp	r1, #0
 80a41d2:	bf08      	it	eq
 80a41d4:	2800      	cmpeq	r0, #0
 80a41d6:	bf1c      	itt	ne
 80a41d8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80a41dc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80a41e0:	f000 b9a6 	b.w	80a4530 <__aeabi_idiv0>
 80a41e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80a41e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80a41ec:	f000 f82a 	bl	80a4244 <__udivmoddi4>
 80a41f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a41f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a41f8:	b004      	add	sp, #16
 80a41fa:	4770      	bx	lr

080a41fc <__aeabi_d2ulz>:
 80a41fc:	b5d0      	push	{r4, r6, r7, lr}
 80a41fe:	2200      	movs	r2, #0
 80a4200:	4b0e      	ldr	r3, [pc, #56]	; (80a423c <__aeabi_d2ulz+0x40>)
 80a4202:	4606      	mov	r6, r0
 80a4204:	460f      	mov	r7, r1
 80a4206:	f7ff fa3b 	bl	80a3680 <__aeabi_dmul>
 80a420a:	f7ff fd11 	bl	80a3c30 <__aeabi_d2uiz>
 80a420e:	4604      	mov	r4, r0
 80a4210:	f7ff f9c0 	bl	80a3594 <__aeabi_ui2d>
 80a4214:	2200      	movs	r2, #0
 80a4216:	4b0a      	ldr	r3, [pc, #40]	; (80a4240 <__aeabi_d2ulz+0x44>)
 80a4218:	f7ff fa32 	bl	80a3680 <__aeabi_dmul>
 80a421c:	4602      	mov	r2, r0
 80a421e:	460b      	mov	r3, r1
 80a4220:	4630      	mov	r0, r6
 80a4222:	4639      	mov	r1, r7
 80a4224:	f7ff f878 	bl	80a3318 <__aeabi_dsub>
 80a4228:	f7ff fd02 	bl	80a3c30 <__aeabi_d2uiz>
 80a422c:	4623      	mov	r3, r4
 80a422e:	2200      	movs	r2, #0
 80a4230:	ea42 0200 	orr.w	r2, r2, r0
 80a4234:	4610      	mov	r0, r2
 80a4236:	4619      	mov	r1, r3
 80a4238:	bdd0      	pop	{r4, r6, r7, pc}
 80a423a:	bf00      	nop
 80a423c:	3df00000 	.word	0x3df00000
 80a4240:	41f00000 	.word	0x41f00000

080a4244 <__udivmoddi4>:
 80a4244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a4248:	468c      	mov	ip, r1
 80a424a:	460c      	mov	r4, r1
 80a424c:	4605      	mov	r5, r0
 80a424e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80a4250:	2b00      	cmp	r3, #0
 80a4252:	d14f      	bne.n	80a42f4 <__udivmoddi4+0xb0>
 80a4254:	428a      	cmp	r2, r1
 80a4256:	4617      	mov	r7, r2
 80a4258:	d96b      	bls.n	80a4332 <__udivmoddi4+0xee>
 80a425a:	fab2 fe82 	clz	lr, r2
 80a425e:	f1be 0f00 	cmp.w	lr, #0
 80a4262:	d00b      	beq.n	80a427c <__udivmoddi4+0x38>
 80a4264:	f1ce 0520 	rsb	r5, lr, #32
 80a4268:	fa20 f505 	lsr.w	r5, r0, r5
 80a426c:	fa01 f30e 	lsl.w	r3, r1, lr
 80a4270:	ea45 0c03 	orr.w	ip, r5, r3
 80a4274:	fa02 f70e 	lsl.w	r7, r2, lr
 80a4278:	fa00 f50e 	lsl.w	r5, r0, lr
 80a427c:	0c39      	lsrs	r1, r7, #16
 80a427e:	fbbc f0f1 	udiv	r0, ip, r1
 80a4282:	b2ba      	uxth	r2, r7
 80a4284:	fb01 c310 	mls	r3, r1, r0, ip
 80a4288:	fb00 f802 	mul.w	r8, r0, r2
 80a428c:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80a4290:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
 80a4294:	45a0      	cmp	r8, r4
 80a4296:	d909      	bls.n	80a42ac <__udivmoddi4+0x68>
 80a4298:	19e4      	adds	r4, r4, r7
 80a429a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80a429e:	f080 8128 	bcs.w	80a44f2 <__udivmoddi4+0x2ae>
 80a42a2:	45a0      	cmp	r8, r4
 80a42a4:	f240 8125 	bls.w	80a44f2 <__udivmoddi4+0x2ae>
 80a42a8:	3802      	subs	r0, #2
 80a42aa:	443c      	add	r4, r7
 80a42ac:	ebc8 0404 	rsb	r4, r8, r4
 80a42b0:	fbb4 f3f1 	udiv	r3, r4, r1
 80a42b4:	fb01 4c13 	mls	ip, r1, r3, r4
 80a42b8:	fb03 f202 	mul.w	r2, r3, r2
 80a42bc:	b2ac      	uxth	r4, r5
 80a42be:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
 80a42c2:	428a      	cmp	r2, r1
 80a42c4:	d909      	bls.n	80a42da <__udivmoddi4+0x96>
 80a42c6:	19c9      	adds	r1, r1, r7
 80a42c8:	f103 34ff 	add.w	r4, r3, #4294967295	; 0xffffffff
 80a42cc:	f080 810f 	bcs.w	80a44ee <__udivmoddi4+0x2aa>
 80a42d0:	428a      	cmp	r2, r1
 80a42d2:	f240 810c 	bls.w	80a44ee <__udivmoddi4+0x2aa>
 80a42d6:	3b02      	subs	r3, #2
 80a42d8:	4439      	add	r1, r7
 80a42da:	1a8a      	subs	r2, r1, r2
 80a42dc:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80a42e0:	2100      	movs	r1, #0
 80a42e2:	2e00      	cmp	r6, #0
 80a42e4:	d063      	beq.n	80a43ae <__udivmoddi4+0x16a>
 80a42e6:	fa22 f20e 	lsr.w	r2, r2, lr
 80a42ea:	2300      	movs	r3, #0
 80a42ec:	e886 000c 	stmia.w	r6, {r2, r3}
 80a42f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a42f4:	428b      	cmp	r3, r1
 80a42f6:	d907      	bls.n	80a4308 <__udivmoddi4+0xc4>
 80a42f8:	2e00      	cmp	r6, #0
 80a42fa:	d056      	beq.n	80a43aa <__udivmoddi4+0x166>
 80a42fc:	2100      	movs	r1, #0
 80a42fe:	e886 0011 	stmia.w	r6, {r0, r4}
 80a4302:	4608      	mov	r0, r1
 80a4304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a4308:	fab3 f183 	clz	r1, r3
 80a430c:	2900      	cmp	r1, #0
 80a430e:	f040 8093 	bne.w	80a4438 <__udivmoddi4+0x1f4>
 80a4312:	42a3      	cmp	r3, r4
 80a4314:	d302      	bcc.n	80a431c <__udivmoddi4+0xd8>
 80a4316:	4282      	cmp	r2, r0
 80a4318:	f200 80fe 	bhi.w	80a4518 <__udivmoddi4+0x2d4>
 80a431c:	1a85      	subs	r5, r0, r2
 80a431e:	eb64 0303 	sbc.w	r3, r4, r3
 80a4322:	469c      	mov	ip, r3
 80a4324:	2001      	movs	r0, #1
 80a4326:	2e00      	cmp	r6, #0
 80a4328:	d041      	beq.n	80a43ae <__udivmoddi4+0x16a>
 80a432a:	e886 1020 	stmia.w	r6, {r5, ip}
 80a432e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a4332:	b912      	cbnz	r2, 80a433a <__udivmoddi4+0xf6>
 80a4334:	2701      	movs	r7, #1
 80a4336:	fbb7 f7f2 	udiv	r7, r7, r2
 80a433a:	fab7 fe87 	clz	lr, r7
 80a433e:	f1be 0f00 	cmp.w	lr, #0
 80a4342:	d136      	bne.n	80a43b2 <__udivmoddi4+0x16e>
 80a4344:	1be4      	subs	r4, r4, r7
 80a4346:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80a434a:	fa1f f987 	uxth.w	r9, r7
 80a434e:	2101      	movs	r1, #1
 80a4350:	fbb4 f3f8 	udiv	r3, r4, r8
 80a4354:	fb08 4413 	mls	r4, r8, r3, r4
 80a4358:	fb09 f203 	mul.w	r2, r9, r3
 80a435c:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80a4360:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
 80a4364:	42a2      	cmp	r2, r4
 80a4366:	d907      	bls.n	80a4378 <__udivmoddi4+0x134>
 80a4368:	19e4      	adds	r4, r4, r7
 80a436a:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 80a436e:	d202      	bcs.n	80a4376 <__udivmoddi4+0x132>
 80a4370:	42a2      	cmp	r2, r4
 80a4372:	f200 80d3 	bhi.w	80a451c <__udivmoddi4+0x2d8>
 80a4376:	4603      	mov	r3, r0
 80a4378:	1aa4      	subs	r4, r4, r2
 80a437a:	fbb4 f0f8 	udiv	r0, r4, r8
 80a437e:	fb08 4810 	mls	r8, r8, r0, r4
 80a4382:	fb09 f900 	mul.w	r9, r9, r0
 80a4386:	b2ac      	uxth	r4, r5
 80a4388:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
 80a438c:	4591      	cmp	r9, r2
 80a438e:	d907      	bls.n	80a43a0 <__udivmoddi4+0x15c>
 80a4390:	19d2      	adds	r2, r2, r7
 80a4392:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80a4396:	d202      	bcs.n	80a439e <__udivmoddi4+0x15a>
 80a4398:	4591      	cmp	r9, r2
 80a439a:	f200 80ba 	bhi.w	80a4512 <__udivmoddi4+0x2ce>
 80a439e:	4620      	mov	r0, r4
 80a43a0:	ebc9 0202 	rsb	r2, r9, r2
 80a43a4:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80a43a8:	e79b      	b.n	80a42e2 <__udivmoddi4+0x9e>
 80a43aa:	4631      	mov	r1, r6
 80a43ac:	4630      	mov	r0, r6
 80a43ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a43b2:	fa07 f70e 	lsl.w	r7, r7, lr
 80a43b6:	f1ce 0c20 	rsb	ip, lr, #32
 80a43ba:	fa24 f30c 	lsr.w	r3, r4, ip
 80a43be:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80a43c2:	fbb3 faf8 	udiv	sl, r3, r8
 80a43c6:	fa1f f987 	uxth.w	r9, r7
 80a43ca:	fb08 351a 	mls	r5, r8, sl, r3
 80a43ce:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a43d2:	fa04 f40e 	lsl.w	r4, r4, lr
 80a43d6:	fb0a fb09 	mul.w	fp, sl, r9
 80a43da:	ea4c 0c04 	orr.w	ip, ip, r4
 80a43de:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80a43e2:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
 80a43e6:	459b      	cmp	fp, r3
 80a43e8:	fa00 f50e 	lsl.w	r5, r0, lr
 80a43ec:	d90a      	bls.n	80a4404 <__udivmoddi4+0x1c0>
 80a43ee:	19db      	adds	r3, r3, r7
 80a43f0:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
 80a43f4:	f080 808b 	bcs.w	80a450e <__udivmoddi4+0x2ca>
 80a43f8:	459b      	cmp	fp, r3
 80a43fa:	f240 8088 	bls.w	80a450e <__udivmoddi4+0x2ca>
 80a43fe:	f1aa 0a02 	sub.w	sl, sl, #2
 80a4402:	443b      	add	r3, r7
 80a4404:	ebcb 0303 	rsb	r3, fp, r3
 80a4408:	fbb3 f0f8 	udiv	r0, r3, r8
 80a440c:	fb08 3310 	mls	r3, r8, r0, r3
 80a4410:	fb00 f409 	mul.w	r4, r0, r9
 80a4414:	fa1f fc8c 	uxth.w	ip, ip
 80a4418:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
 80a441c:	429c      	cmp	r4, r3
 80a441e:	d907      	bls.n	80a4430 <__udivmoddi4+0x1ec>
 80a4420:	19db      	adds	r3, r3, r7
 80a4422:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80a4426:	d26e      	bcs.n	80a4506 <__udivmoddi4+0x2c2>
 80a4428:	429c      	cmp	r4, r3
 80a442a:	d96c      	bls.n	80a4506 <__udivmoddi4+0x2c2>
 80a442c:	3802      	subs	r0, #2
 80a442e:	443b      	add	r3, r7
 80a4430:	1b1c      	subs	r4, r3, r4
 80a4432:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
 80a4436:	e78b      	b.n	80a4350 <__udivmoddi4+0x10c>
 80a4438:	f1c1 0e20 	rsb	lr, r1, #32
 80a443c:	408b      	lsls	r3, r1
 80a443e:	fa22 fc0e 	lsr.w	ip, r2, lr
 80a4442:	ea4c 0c03 	orr.w	ip, ip, r3
 80a4446:	fa24 f70e 	lsr.w	r7, r4, lr
 80a444a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80a444e:	fbb7 faf9 	udiv	sl, r7, r9
 80a4452:	fa1f f38c 	uxth.w	r3, ip
 80a4456:	fb09 771a 	mls	r7, r9, sl, r7
 80a445a:	fa20 f80e 	lsr.w	r8, r0, lr
 80a445e:	408c      	lsls	r4, r1
 80a4460:	fb0a f503 	mul.w	r5, sl, r3
 80a4464:	ea48 0404 	orr.w	r4, r8, r4
 80a4468:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80a446c:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 80a4470:	42bd      	cmp	r5, r7
 80a4472:	fa02 f201 	lsl.w	r2, r2, r1
 80a4476:	fa00 fb01 	lsl.w	fp, r0, r1
 80a447a:	d909      	bls.n	80a4490 <__udivmoddi4+0x24c>
 80a447c:	eb17 070c 	adds.w	r7, r7, ip
 80a4480:	f10a 30ff 	add.w	r0, sl, #4294967295	; 0xffffffff
 80a4484:	d241      	bcs.n	80a450a <__udivmoddi4+0x2c6>
 80a4486:	42bd      	cmp	r5, r7
 80a4488:	d93f      	bls.n	80a450a <__udivmoddi4+0x2c6>
 80a448a:	f1aa 0a02 	sub.w	sl, sl, #2
 80a448e:	4467      	add	r7, ip
 80a4490:	1b7f      	subs	r7, r7, r5
 80a4492:	fbb7 f5f9 	udiv	r5, r7, r9
 80a4496:	fb09 7715 	mls	r7, r9, r5, r7
 80a449a:	fb05 f303 	mul.w	r3, r5, r3
 80a449e:	b2a4      	uxth	r4, r4
 80a44a0:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 80a44a4:	42bb      	cmp	r3, r7
 80a44a6:	d908      	bls.n	80a44ba <__udivmoddi4+0x276>
 80a44a8:	eb17 070c 	adds.w	r7, r7, ip
 80a44ac:	f105 30ff 	add.w	r0, r5, #4294967295	; 0xffffffff
 80a44b0:	d227      	bcs.n	80a4502 <__udivmoddi4+0x2be>
 80a44b2:	42bb      	cmp	r3, r7
 80a44b4:	d925      	bls.n	80a4502 <__udivmoddi4+0x2be>
 80a44b6:	3d02      	subs	r5, #2
 80a44b8:	4467      	add	r7, ip
 80a44ba:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
 80a44be:	fba0 8902 	umull	r8, r9, r0, r2
 80a44c2:	1aff      	subs	r7, r7, r3
 80a44c4:	454f      	cmp	r7, r9
 80a44c6:	4645      	mov	r5, r8
 80a44c8:	464c      	mov	r4, r9
 80a44ca:	d314      	bcc.n	80a44f6 <__udivmoddi4+0x2b2>
 80a44cc:	d029      	beq.n	80a4522 <__udivmoddi4+0x2de>
 80a44ce:	b366      	cbz	r6, 80a452a <__udivmoddi4+0x2e6>
 80a44d0:	ebbb 0305 	subs.w	r3, fp, r5
 80a44d4:	eb67 0704 	sbc.w	r7, r7, r4
 80a44d8:	fa07 fe0e 	lsl.w	lr, r7, lr
 80a44dc:	40cb      	lsrs	r3, r1
 80a44de:	40cf      	lsrs	r7, r1
 80a44e0:	ea4e 0303 	orr.w	r3, lr, r3
 80a44e4:	e886 0088 	stmia.w	r6, {r3, r7}
 80a44e8:	2100      	movs	r1, #0
 80a44ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a44ee:	4623      	mov	r3, r4
 80a44f0:	e6f3      	b.n	80a42da <__udivmoddi4+0x96>
 80a44f2:	4618      	mov	r0, r3
 80a44f4:	e6da      	b.n	80a42ac <__udivmoddi4+0x68>
 80a44f6:	ebb8 0502 	subs.w	r5, r8, r2
 80a44fa:	eb69 040c 	sbc.w	r4, r9, ip
 80a44fe:	3801      	subs	r0, #1
 80a4500:	e7e5      	b.n	80a44ce <__udivmoddi4+0x28a>
 80a4502:	4605      	mov	r5, r0
 80a4504:	e7d9      	b.n	80a44ba <__udivmoddi4+0x276>
 80a4506:	4610      	mov	r0, r2
 80a4508:	e792      	b.n	80a4430 <__udivmoddi4+0x1ec>
 80a450a:	4682      	mov	sl, r0
 80a450c:	e7c0      	b.n	80a4490 <__udivmoddi4+0x24c>
 80a450e:	4692      	mov	sl, r2
 80a4510:	e778      	b.n	80a4404 <__udivmoddi4+0x1c0>
 80a4512:	3802      	subs	r0, #2
 80a4514:	443a      	add	r2, r7
 80a4516:	e743      	b.n	80a43a0 <__udivmoddi4+0x15c>
 80a4518:	4608      	mov	r0, r1
 80a451a:	e704      	b.n	80a4326 <__udivmoddi4+0xe2>
 80a451c:	3b02      	subs	r3, #2
 80a451e:	443c      	add	r4, r7
 80a4520:	e72a      	b.n	80a4378 <__udivmoddi4+0x134>
 80a4522:	45c3      	cmp	fp, r8
 80a4524:	d3e7      	bcc.n	80a44f6 <__udivmoddi4+0x2b2>
 80a4526:	463c      	mov	r4, r7
 80a4528:	e7d1      	b.n	80a44ce <__udivmoddi4+0x28a>
 80a452a:	4631      	mov	r1, r6
 80a452c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a4530 <__aeabi_idiv0>:
 80a4530:	4770      	bx	lr
 80a4532:	bf00      	nop

080a4534 <atoi>:
 80a4534:	220a      	movs	r2, #10
 80a4536:	2100      	movs	r1, #0
 80a4538:	f000 b932 	b.w	80a47a0 <strtol>

080a453c <atol>:
 80a453c:	220a      	movs	r2, #10
 80a453e:	2100      	movs	r1, #0
 80a4540:	f000 b92e 	b.w	80a47a0 <strtol>

080a4544 <__cxa_atexit>:
 80a4544:	b510      	push	{r4, lr}
 80a4546:	4c05      	ldr	r4, [pc, #20]	; (80a455c <__cxa_atexit+0x18>)
 80a4548:	4613      	mov	r3, r2
 80a454a:	b12c      	cbz	r4, 80a4558 <__cxa_atexit+0x14>
 80a454c:	460a      	mov	r2, r1
 80a454e:	4601      	mov	r1, r0
 80a4550:	2002      	movs	r0, #2
 80a4552:	f3af 8000 	nop.w
 80a4556:	bd10      	pop	{r4, pc}
 80a4558:	4620      	mov	r0, r4
 80a455a:	bd10      	pop	{r4, pc}
 80a455c:	00000000 	.word	0x00000000

080a4560 <ldiv>:
 80a4560:	b510      	push	{r4, lr}
 80a4562:	fb91 f4f2 	sdiv	r4, r1, r2
 80a4566:	2900      	cmp	r1, #0
 80a4568:	fb02 1314 	mls	r3, r2, r4, r1
 80a456c:	db04      	blt.n	80a4578 <ldiv+0x18>
 80a456e:	2b00      	cmp	r3, #0
 80a4570:	da07      	bge.n	80a4582 <ldiv+0x22>
 80a4572:	3401      	adds	r4, #1
 80a4574:	1a9b      	subs	r3, r3, r2
 80a4576:	e004      	b.n	80a4582 <ldiv+0x22>
 80a4578:	2b00      	cmp	r3, #0
 80a457a:	bfc4      	itt	gt
 80a457c:	f104 34ff 	addgt.w	r4, r4, #4294967295	; 0xffffffff
 80a4580:	189b      	addgt	r3, r3, r2
 80a4582:	6004      	str	r4, [r0, #0]
 80a4584:	6043      	str	r3, [r0, #4]
 80a4586:	bd10      	pop	{r4, pc}

080a4588 <memcpy>:
 80a4588:	b510      	push	{r4, lr}
 80a458a:	1e43      	subs	r3, r0, #1
 80a458c:	440a      	add	r2, r1
 80a458e:	4291      	cmp	r1, r2
 80a4590:	d004      	beq.n	80a459c <memcpy+0x14>
 80a4592:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a4596:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a459a:	e7f8      	b.n	80a458e <memcpy+0x6>
 80a459c:	bd10      	pop	{r4, pc}

080a459e <memset>:
 80a459e:	4603      	mov	r3, r0
 80a45a0:	4402      	add	r2, r0
 80a45a2:	4293      	cmp	r3, r2
 80a45a4:	d002      	beq.n	80a45ac <memset+0xe>
 80a45a6:	f803 1b01 	strb.w	r1, [r3], #1
 80a45aa:	e7fa      	b.n	80a45a2 <memset+0x4>
 80a45ac:	4770      	bx	lr
	...

080a45b0 <srand>:
 80a45b0:	b538      	push	{r3, r4, r5, lr}
 80a45b2:	4b12      	ldr	r3, [pc, #72]	; (80a45fc <srand+0x4c>)
 80a45b4:	4605      	mov	r5, r0
 80a45b6:	681c      	ldr	r4, [r3, #0]
 80a45b8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a45ba:	b9d3      	cbnz	r3, 80a45f2 <srand+0x42>
 80a45bc:	2018      	movs	r0, #24
 80a45be:	f7fd f845 	bl	80a164c <malloc>
 80a45c2:	f243 330e 	movw	r3, #13070	; 0x330e
 80a45c6:	63a0      	str	r0, [r4, #56]	; 0x38
 80a45c8:	8003      	strh	r3, [r0, #0]
 80a45ca:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a45ce:	8043      	strh	r3, [r0, #2]
 80a45d0:	f241 2334 	movw	r3, #4660	; 0x1234
 80a45d4:	8083      	strh	r3, [r0, #4]
 80a45d6:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a45da:	80c3      	strh	r3, [r0, #6]
 80a45dc:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a45e0:	8103      	strh	r3, [r0, #8]
 80a45e2:	2305      	movs	r3, #5
 80a45e4:	8143      	strh	r3, [r0, #10]
 80a45e6:	230b      	movs	r3, #11
 80a45e8:	8183      	strh	r3, [r0, #12]
 80a45ea:	2201      	movs	r2, #1
 80a45ec:	2300      	movs	r3, #0
 80a45ee:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a45f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a45f4:	2200      	movs	r2, #0
 80a45f6:	611d      	str	r5, [r3, #16]
 80a45f8:	615a      	str	r2, [r3, #20]
 80a45fa:	bd38      	pop	{r3, r4, r5, pc}
 80a45fc:	2000036c 	.word	0x2000036c

080a4600 <strcmp>:
 80a4600:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a4604:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a4608:	2a01      	cmp	r2, #1
 80a460a:	bf28      	it	cs
 80a460c:	429a      	cmpcs	r2, r3
 80a460e:	d0f7      	beq.n	80a4600 <strcmp>
 80a4610:	1ad0      	subs	r0, r2, r3
 80a4612:	4770      	bx	lr

080a4614 <strcpy>:
 80a4614:	4603      	mov	r3, r0
 80a4616:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a461a:	f803 2b01 	strb.w	r2, [r3], #1
 80a461e:	2a00      	cmp	r2, #0
 80a4620:	d1f9      	bne.n	80a4616 <strcpy+0x2>
 80a4622:	4770      	bx	lr

080a4624 <strdup>:
 80a4624:	4b02      	ldr	r3, [pc, #8]	; (80a4630 <strdup+0xc>)
 80a4626:	4601      	mov	r1, r0
 80a4628:	6818      	ldr	r0, [r3, #0]
 80a462a:	f000 b803 	b.w	80a4634 <_strdup_r>
 80a462e:	bf00      	nop
 80a4630:	2000036c 	.word	0x2000036c

080a4634 <_strdup_r>:
 80a4634:	b570      	push	{r4, r5, r6, lr}
 80a4636:	4606      	mov	r6, r0
 80a4638:	4608      	mov	r0, r1
 80a463a:	460c      	mov	r4, r1
 80a463c:	f000 f80d 	bl	80a465a <strlen>
 80a4640:	1c45      	adds	r5, r0, #1
 80a4642:	4629      	mov	r1, r5
 80a4644:	4630      	mov	r0, r6
 80a4646:	f7fd f821 	bl	80a168c <_malloc_r>
 80a464a:	4606      	mov	r6, r0
 80a464c:	b118      	cbz	r0, 80a4656 <_strdup_r+0x22>
 80a464e:	462a      	mov	r2, r5
 80a4650:	4621      	mov	r1, r4
 80a4652:	f7ff ff99 	bl	80a4588 <memcpy>
 80a4656:	4630      	mov	r0, r6
 80a4658:	bd70      	pop	{r4, r5, r6, pc}

080a465a <strlen>:
 80a465a:	4603      	mov	r3, r0
 80a465c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a4660:	2a00      	cmp	r2, #0
 80a4662:	d1fb      	bne.n	80a465c <strlen+0x2>
 80a4664:	1a18      	subs	r0, r3, r0
 80a4666:	3801      	subs	r0, #1
 80a4668:	4770      	bx	lr

080a466a <strncmp>:
 80a466a:	b530      	push	{r4, r5, lr}
 80a466c:	b182      	cbz	r2, 80a4690 <strncmp+0x26>
 80a466e:	1e45      	subs	r5, r0, #1
 80a4670:	3901      	subs	r1, #1
 80a4672:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80a4676:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80a467a:	42a3      	cmp	r3, r4
 80a467c:	d106      	bne.n	80a468c <strncmp+0x22>
 80a467e:	43ec      	mvns	r4, r5
 80a4680:	4414      	add	r4, r2
 80a4682:	42e0      	cmn	r0, r4
 80a4684:	d001      	beq.n	80a468a <strncmp+0x20>
 80a4686:	2b00      	cmp	r3, #0
 80a4688:	d1f3      	bne.n	80a4672 <strncmp+0x8>
 80a468a:	461c      	mov	r4, r3
 80a468c:	1b18      	subs	r0, r3, r4
 80a468e:	bd30      	pop	{r4, r5, pc}
 80a4690:	4610      	mov	r0, r2
 80a4692:	bd30      	pop	{r4, r5, pc}

080a4694 <_strtol_r>:
 80a4694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a4698:	460f      	mov	r7, r1
 80a469a:	4680      	mov	r8, r0
 80a469c:	483f      	ldr	r0, [pc, #252]	; (80a479c <_strtol_r+0x108>)
 80a469e:	f8d0 9000 	ldr.w	r9, [r0]
 80a46a2:	463d      	mov	r5, r7
 80a46a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a46a8:	eb09 0004 	add.w	r0, r9, r4
 80a46ac:	7840      	ldrb	r0, [r0, #1]
 80a46ae:	f000 0008 	and.w	r0, r0, #8
 80a46b2:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 80a46b6:	b108      	cbz	r0, 80a46bc <_strtol_r+0x28>
 80a46b8:	462f      	mov	r7, r5
 80a46ba:	e7f2      	b.n	80a46a2 <_strtol_r+0xe>
 80a46bc:	2c2d      	cmp	r4, #45	; 0x2d
 80a46be:	d103      	bne.n	80a46c8 <_strtol_r+0x34>
 80a46c0:	1cbd      	adds	r5, r7, #2
 80a46c2:	787c      	ldrb	r4, [r7, #1]
 80a46c4:	2601      	movs	r6, #1
 80a46c6:	e003      	b.n	80a46d0 <_strtol_r+0x3c>
 80a46c8:	2c2b      	cmp	r4, #43	; 0x2b
 80a46ca:	bf04      	itt	eq
 80a46cc:	787c      	ldrbeq	r4, [r7, #1]
 80a46ce:	1cbd      	addeq	r5, r7, #2
 80a46d0:	b113      	cbz	r3, 80a46d8 <_strtol_r+0x44>
 80a46d2:	2b10      	cmp	r3, #16
 80a46d4:	d10a      	bne.n	80a46ec <_strtol_r+0x58>
 80a46d6:	e05b      	b.n	80a4790 <_strtol_r+0xfc>
 80a46d8:	2c30      	cmp	r4, #48	; 0x30
 80a46da:	d157      	bne.n	80a478c <_strtol_r+0xf8>
 80a46dc:	7828      	ldrb	r0, [r5, #0]
 80a46de:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a46e2:	2858      	cmp	r0, #88	; 0x58
 80a46e4:	d14d      	bne.n	80a4782 <_strtol_r+0xee>
 80a46e6:	786c      	ldrb	r4, [r5, #1]
 80a46e8:	2310      	movs	r3, #16
 80a46ea:	3502      	adds	r5, #2
 80a46ec:	2e00      	cmp	r6, #0
 80a46ee:	bf14      	ite	ne
 80a46f0:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 80a46f4:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 80a46f8:	fbbc faf3 	udiv	sl, ip, r3
 80a46fc:	2700      	movs	r7, #0
 80a46fe:	4638      	mov	r0, r7
 80a4700:	fb03 cc1a 	mls	ip, r3, sl, ip
 80a4704:	eb09 0e04 	add.w	lr, r9, r4
 80a4708:	f89e e001 	ldrb.w	lr, [lr, #1]
 80a470c:	f01e 0f04 	tst.w	lr, #4
 80a4710:	d001      	beq.n	80a4716 <_strtol_r+0x82>
 80a4712:	3c30      	subs	r4, #48	; 0x30
 80a4714:	e00b      	b.n	80a472e <_strtol_r+0x9a>
 80a4716:	f01e 0e03 	ands.w	lr, lr, #3
 80a471a:	d01b      	beq.n	80a4754 <_strtol_r+0xc0>
 80a471c:	f1be 0f01 	cmp.w	lr, #1
 80a4720:	bf0c      	ite	eq
 80a4722:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80a4726:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80a472a:	ebce 0404 	rsb	r4, lr, r4
 80a472e:	42a3      	cmp	r3, r4
 80a4730:	dd10      	ble.n	80a4754 <_strtol_r+0xc0>
 80a4732:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 80a4736:	d00a      	beq.n	80a474e <_strtol_r+0xba>
 80a4738:	4550      	cmp	r0, sl
 80a473a:	d806      	bhi.n	80a474a <_strtol_r+0xb6>
 80a473c:	d101      	bne.n	80a4742 <_strtol_r+0xae>
 80a473e:	4564      	cmp	r4, ip
 80a4740:	dc03      	bgt.n	80a474a <_strtol_r+0xb6>
 80a4742:	fb03 4000 	mla	r0, r3, r0, r4
 80a4746:	2701      	movs	r7, #1
 80a4748:	e001      	b.n	80a474e <_strtol_r+0xba>
 80a474a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80a474e:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a4752:	e7d7      	b.n	80a4704 <_strtol_r+0x70>
 80a4754:	1c7b      	adds	r3, r7, #1
 80a4756:	d10c      	bne.n	80a4772 <_strtol_r+0xde>
 80a4758:	2e00      	cmp	r6, #0
 80a475a:	f04f 0322 	mov.w	r3, #34	; 0x22
 80a475e:	bf14      	ite	ne
 80a4760:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 80a4764:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a4768:	f8c8 3000 	str.w	r3, [r8]
 80a476c:	b92a      	cbnz	r2, 80a477a <_strtol_r+0xe6>
 80a476e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a4772:	b106      	cbz	r6, 80a4776 <_strtol_r+0xe2>
 80a4774:	4240      	negs	r0, r0
 80a4776:	b172      	cbz	r2, 80a4796 <_strtol_r+0x102>
 80a4778:	b107      	cbz	r7, 80a477c <_strtol_r+0xe8>
 80a477a:	1e69      	subs	r1, r5, #1
 80a477c:	6011      	str	r1, [r2, #0]
 80a477e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a4782:	2430      	movs	r4, #48	; 0x30
 80a4784:	2b00      	cmp	r3, #0
 80a4786:	d1b1      	bne.n	80a46ec <_strtol_r+0x58>
 80a4788:	2308      	movs	r3, #8
 80a478a:	e7af      	b.n	80a46ec <_strtol_r+0x58>
 80a478c:	230a      	movs	r3, #10
 80a478e:	e7ad      	b.n	80a46ec <_strtol_r+0x58>
 80a4790:	2c30      	cmp	r4, #48	; 0x30
 80a4792:	d0a3      	beq.n	80a46dc <_strtol_r+0x48>
 80a4794:	e7aa      	b.n	80a46ec <_strtol_r+0x58>
 80a4796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a479a:	bf00      	nop
 80a479c:	20000308 	.word	0x20000308

080a47a0 <strtol>:
 80a47a0:	4613      	mov	r3, r2
 80a47a2:	460a      	mov	r2, r1
 80a47a4:	4601      	mov	r1, r0
 80a47a6:	4802      	ldr	r0, [pc, #8]	; (80a47b0 <strtol+0x10>)
 80a47a8:	6800      	ldr	r0, [r0, #0]
 80a47aa:	f7ff bf73 	b.w	80a4694 <_strtol_r>
 80a47ae:	bf00      	nop
 80a47b0:	2000036c 	.word	0x2000036c

080a47b4 <dynalib_user>:
 80a47b4:	080a001d 080a005d 080a0089 080a008d     ....]...........
 80a47c4:	00000000 49480041 4c004847 6d00574f     ....A.HIGH.LOW.m
 80a47d4:	76652d79 00746e65 32343078 6948005f     y-event.x042_.Hi
 80a47e4:	4c006867 7400776f 78742e30 32223d74     gh.Low.t0.txt="2
 80a47f4:	c2342e35 002243b0 742e3074 003d7478     5.4..C".t0.txt=.
 80a4804:	74746162 56797265 61746c6f 63006567     batteryVoltage.c
 80a4814:	67726168 706d4165 6c6f7300 6f507261     hargeAmp.solarPo
 80a4824:	00726577 6464616c 31657261 6b79632f     wer.laddare1/cyk
 80a4834:	64496c65 64616c00 65726164 79632f32     elId.laddare2/cy
 80a4844:	496c656b 616c0064 72616464 632f3365     kelId.laddare3/c
 80a4854:	6c656b79 64006449 44454c6f 61566100     ykelId.doLED.aVa
 80a4864:	0065756c 6c615662 64006575 74696769     lue.bValue.digit
 80a4874:	65726c61 64006461 74696769 72776c61     alread.digitalwr
 80a4884:	00657469 6c616e61 6572676f 61006461     ite.analogread.a
 80a4894:	6f6c616e 69727767 54006574 69206568     nalogwrite.The i
 80a48a4:	7265746e 2074656e 7473756a 746f6720     nternet just got
 80a48b4:	616d7320 72657472 70750021 65746164      smarter!.update
 80a48c4:	74617453 514d0073 63205454 656e6e6f     Stats.MQTT conne
 80a48d4:	64657463 696b7300 2e796e6e 63796b73     cted.skinny.skyc
 80a48e4:	74726168 656e2e73 04000074 5454514d     harts.net...MQTT
 80a48f4:	4d060004 64734951 00000370              ...MQIsdp...

080a4900 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a4908:	080a16c9 080a16cf 080a16f7 080a16db     ................
 80a4918:	080a16cb                                ....

080a491c <_ZTV7TwoWire>:
	...
 80a4924:	080a1c69 080a1cb3 080a1c8b 080a1c6b     i...........k...
 80a4934:	080a1c93 080a1c9b 080a1ca3 080a1cab     ................

080a4944 <_ZTV9IPAddress>:
	...
 80a494c:	080a1cfb 080a1ced 080a1cef 66006e6c     ............ln.f
 80a495c:	6f63006e 64006564 69617465 0a0d006c     n.code.detail...
 80a496c:	31302500 00207530 2500205d 202c0064     .%010u .] .%d., 
 80a497c:	3a292800 5b200020 646f6300 203d2065     .(): . [.code = 
 80a498c:	00692500 61746564 20736c69 6200203d     .%i.details = .b
 80a499c:	00647561 69726553 55006c61 65534253     aud.Serial.USBSe
 80a49ac:	6c616972 79740031 70006570 6d617261     rial1.type.param
 80a49bc:	646d6300 00646900 00646e68 6d727473     .cmd.id.hnd.strm
 80a49cc:	6c696600 766c0074 6461006c 6e614864     .filt.lvl.addHan
 80a49dc:	72656c64 6d657200 4865766f 6c646e61     dler.removeHandl
 80a49ec:	65007265 486d756e 6c646e61 00737265     er.enumHandlers.
 80a49fc:	4e4f534a 65727453 6f4c6d61 6e614867     JSONStreamLogHan
 80a4a0c:	72656c64 70706100 6e6f6e00 72740065     dler.app.none.tr
 80a4a1c:	00656361 6f666e69 72617700 7265006e     ace.info.warn.er
 80a4a2c:	00726f72 696e6170 6c610063 616e006c     ror.panic.all.na
 80a4a3c:	766f006e 002e0066 00666e69              n.ovf...inf.

080a4a48 <_ZTV8SPIClass>:
	...
 80a4a50:	080a2041 080a2043                       A ..C ..

080a4a58 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
 80a4a60:	080a2475 080a247b 080a259b 080a2487     u$..{$...%...$..
 80a4a70:	080a2477                                w$..

080a4a74 <_ZTV9TCPClient>:
	...
 80a4a7c:	080a09d1 080a0a05 080a2431 080a244b     ........1$..K$..
 80a4a8c:	080a2619 080a2567 080a2539 080a2473     .&..g%..9%..s$..
 80a4a9c:	080a274d 080a248d 080a25b7 080a2695     M'...$...%...&..
 80a4aac:	080a289d 080a28ef 080a245b 080a2861     .(...(..[$..a(..
 80a4abc:	080a2519 69726977 5400676e 6c435043     .%..wiring.TCPCl
 80a4acc:	746e6569 636f7320 3d74656b 5a007825     ient socket=%x.Z
 80a4adc:	302b2500 253a6433 00753230 252d5925     .%+03d:%02u.%Y-%
 80a4aec:	64252d6d 3a482554 253a4d25 007a2553     m-%dT%H:%M:%S%z.
 80a4afc:	74637361 00656d69                       asctime.

080a4b04 <_ZTV11USARTSerial>:
	...
 80a4b0c:	080a297d 080a29a1 080a29ad 080a1db9     })...)...)......
 80a4b1c:	080a2989 080a2995 080a298f 080a299b     .)...)...)...)..
 80a4b2c:	080a297f 080a2983                       .)...)..

080a4b34 <_ZTV9USBSerial>:
	...
 80a4b3c:	080a2a69 080a2aad 080a2a87 080a1db9     i*...*...*......
 80a4b4c:	080a2a81 080a2a6b 080a2a73 080a2aa7     .*..k*..s*...*..
 80a4b5c:	080a2a7b 080a2a65                       {*..e*..

080a4b64 <_ZTVN5spark9WiFiClassE>:
	...
 80a4b6c:	080a2bd3                                .+..

080a4b70 <_ZN5spark7NetworkE>:
 80a4b70:	2000088c                                ... 

080a4b74 <_ctype_>:
 80a4b74:	20202000 20202020 28282020 20282828     .         ((((( 
 80a4b84:	20202020 20202020 20202020 20202020                     
 80a4b94:	10108820 10101010 10101010 10101010      ...............
 80a4ba4:	04040410 04040404 10040404 10101010     ................
 80a4bb4:	41411010 41414141 01010101 01010101     ..AAAAAA........
 80a4bc4:	01010101 01010101 01010101 10101010     ................
 80a4bd4:	42421010 42424242 02020202 02020202     ..BBBBBB........
 80a4be4:	02020202 02020202 02020202 10101010     ................
 80a4bf4:	00000020 00000000 00000000 00000000      ...............
	...

080a4c78 <__sf_fake_stdin>:
	...

080a4c98 <__sf_fake_stdout>:
	...

080a4cb8 <__sf_fake_stderr>:
	...
 80a4cd8:	00000043                                         C.

080a4cda <link_const_variable_data_end>:
	...

080a4cdc <link_constructors_location>:
 80a4cdc:	080a0959 	.word	0x080a0959
 80a4ce0:	080a1209 	.word	0x080a1209
 80a4ce4:	080a120d 	.word	0x080a120d
 80a4ce8:	080a1da9 	.word	0x080a1da9
 80a4cec:	080a2025 	.word	0x080a2025
 80a4cf0:	080a23f1 	.word	0x080a23f1
 80a4cf4:	080a2969 	.word	0x080a2969
 80a4cf8:	080a2bdd 	.word	0x080a2bdd
 80a4cfc:	080a2ffd 	.word	0x080a2ffd
 80a4d00:	080a302d 	.word	0x080a302d
 80a4d04:	080a3081 	.word	0x080a3081
 80a4d08:	080a3145 	.word	0x080a3145
 80a4d0c:	080a31c9 	.word	0x080a31c9
 80a4d10:	080a324d 	.word	0x080a324d

080a4d14 <link_constructors_end>:
	...
